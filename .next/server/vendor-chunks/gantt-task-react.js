"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gantt-task-react";
exports.ids = ["vendor-chunks/gantt-task-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/gantt-task-react/dist/index.modern.js":
/*!************************************************************!*\
  !*** ./node_modules/gantt-task-react/dist/index.modern.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gantt: () => (/* binding */ Gantt),\n/* harmony export */   ViewMode: () => (/* binding */ ViewMode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function() {\n            if (i >= o.length) return {\n                done: true\n            };\n            return {\n                done: false,\n                value: o[i++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar ViewMode;\n(function(ViewMode) {\n    ViewMode[\"Hour\"] = \"Hour\";\n    ViewMode[\"QuarterDay\"] = \"Quarter Day\";\n    ViewMode[\"HalfDay\"] = \"Half Day\";\n    ViewMode[\"Day\"] = \"Day\";\n    ViewMode[\"Week\"] = \"Week\";\n    ViewMode[\"Month\"] = \"Month\";\n    ViewMode[\"Year\"] = \"Year\";\n})(ViewMode || (ViewMode = {}));\nvar intlDTCache = {};\nvar getCachedDateTimeFormat = function getCachedDateTimeFormat(locString, opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    var key = JSON.stringify([\n        locString,\n        opts\n    ]);\n    var dtf = intlDTCache[key];\n    if (!dtf) {\n        dtf = new Intl.DateTimeFormat(locString, opts);\n        intlDTCache[key] = dtf;\n    }\n    return dtf;\n};\nvar addToDate = function addToDate(date, quantity, scale) {\n    var newDate = new Date(date.getFullYear() + (scale === \"year\" ? quantity : 0), date.getMonth() + (scale === \"month\" ? quantity : 0), date.getDate() + (scale === \"day\" ? quantity : 0), date.getHours() + (scale === \"hour\" ? quantity : 0), date.getMinutes() + (scale === \"minute\" ? quantity : 0), date.getSeconds() + (scale === \"second\" ? quantity : 0), date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0));\n    return newDate;\n};\nvar startOfDate = function startOfDate(date, scale) {\n    var scores = [\n        \"millisecond\",\n        \"second\",\n        \"minute\",\n        \"hour\",\n        \"day\",\n        \"month\",\n        \"year\"\n    ];\n    var shouldReset = function shouldReset(_scale) {\n        var maxScore = scores.indexOf(scale);\n        return scores.indexOf(_scale) <= maxScore;\n    };\n    var newDate = new Date(date.getFullYear(), shouldReset(\"year\") ? 0 : date.getMonth(), shouldReset(\"month\") ? 1 : date.getDate(), shouldReset(\"day\") ? 0 : date.getHours(), shouldReset(\"hour\") ? 0 : date.getMinutes(), shouldReset(\"minute\") ? 0 : date.getSeconds(), shouldReset(\"second\") ? 0 : date.getMilliseconds());\n    return newDate;\n};\nvar ganttDateRange = function ganttDateRange(tasks, viewMode, preStepsCount) {\n    var newStartDate = tasks[0].start;\n    var newEndDate = tasks[0].start;\n    for(var _iterator = _createForOfIteratorHelperLoose(tasks), _step; !(_step = _iterator()).done;){\n        var task = _step.value;\n        if (task.start < newStartDate) {\n            newStartDate = task.start;\n        }\n        if (task.end > newEndDate) {\n            newEndDate = task.end;\n        }\n    }\n    switch(viewMode){\n        case ViewMode.Year:\n            newStartDate = addToDate(newStartDate, -1, \"year\");\n            newStartDate = startOfDate(newStartDate, \"year\");\n            newEndDate = addToDate(newEndDate, 1, \"year\");\n            newEndDate = startOfDate(newEndDate, \"year\");\n            break;\n        case ViewMode.Month:\n            newStartDate = addToDate(newStartDate, -1 * preStepsCount, \"month\");\n            newStartDate = startOfDate(newStartDate, \"month\");\n            newEndDate = addToDate(newEndDate, 1, \"year\");\n            newEndDate = startOfDate(newEndDate, \"year\");\n            break;\n        case ViewMode.Week:\n            newStartDate = startOfDate(newStartDate, \"day\");\n            newStartDate = addToDate(getMonday(newStartDate), -7 * preStepsCount, \"day\");\n            newEndDate = startOfDate(newEndDate, \"day\");\n            newEndDate = addToDate(newEndDate, 1.5, \"month\");\n            break;\n        case ViewMode.Day:\n            newStartDate = startOfDate(newStartDate, \"day\");\n            newStartDate = addToDate(newStartDate, -1 * preStepsCount, \"day\");\n            newEndDate = startOfDate(newEndDate, \"day\");\n            newEndDate = addToDate(newEndDate, 19, \"day\");\n            break;\n        case ViewMode.QuarterDay:\n            newStartDate = startOfDate(newStartDate, \"day\");\n            newStartDate = addToDate(newStartDate, -1 * preStepsCount, \"day\");\n            newEndDate = startOfDate(newEndDate, \"day\");\n            newEndDate = addToDate(newEndDate, 66, \"hour\");\n            break;\n        case ViewMode.HalfDay:\n            newStartDate = startOfDate(newStartDate, \"day\");\n            newStartDate = addToDate(newStartDate, -1 * preStepsCount, \"day\");\n            newEndDate = startOfDate(newEndDate, \"day\");\n            newEndDate = addToDate(newEndDate, 108, \"hour\");\n            break;\n        case ViewMode.Hour:\n            newStartDate = startOfDate(newStartDate, \"hour\");\n            newStartDate = addToDate(newStartDate, -1 * preStepsCount, \"hour\");\n            newEndDate = startOfDate(newEndDate, \"day\");\n            newEndDate = addToDate(newEndDate, 1, \"day\");\n            break;\n    }\n    return [\n        newStartDate,\n        newEndDate\n    ];\n};\nvar seedDates = function seedDates(startDate, endDate, viewMode) {\n    var currentDate = new Date(startDate);\n    var dates = [\n        currentDate\n    ];\n    while(currentDate < endDate){\n        switch(viewMode){\n            case ViewMode.Year:\n                currentDate = addToDate(currentDate, 1, \"year\");\n                break;\n            case ViewMode.Month:\n                currentDate = addToDate(currentDate, 1, \"month\");\n                break;\n            case ViewMode.Week:\n                currentDate = addToDate(currentDate, 7, \"day\");\n                break;\n            case ViewMode.Day:\n                currentDate = addToDate(currentDate, 1, \"day\");\n                break;\n            case ViewMode.HalfDay:\n                currentDate = addToDate(currentDate, 12, \"hour\");\n                break;\n            case ViewMode.QuarterDay:\n                currentDate = addToDate(currentDate, 6, \"hour\");\n                break;\n            case ViewMode.Hour:\n                currentDate = addToDate(currentDate, 1, \"hour\");\n                break;\n        }\n        dates.push(currentDate);\n    }\n    return dates;\n};\nvar getLocaleMonth = function getLocaleMonth(date, locale) {\n    var bottomValue = getCachedDateTimeFormat(locale, {\n        month: \"long\"\n    }).format(date);\n    bottomValue = bottomValue.replace(bottomValue[0], bottomValue[0].toLocaleUpperCase());\n    return bottomValue;\n};\nvar getLocalDayOfWeek = function getLocalDayOfWeek(date, locale, format) {\n    var bottomValue = getCachedDateTimeFormat(locale, {\n        weekday: format\n    }).format(date);\n    bottomValue = bottomValue.replace(bottomValue[0], bottomValue[0].toLocaleUpperCase());\n    return bottomValue;\n};\nvar getMonday = function getMonday(date) {\n    var day = date.getDay();\n    var diff = date.getDate() - day + (day === 0 ? -6 : 1);\n    return new Date(date.setDate(diff));\n};\nvar getWeekNumberISO8601 = function getWeekNumberISO8601(date) {\n    var tmpDate = new Date(date.valueOf());\n    var dayNumber = (tmpDate.getDay() + 6) % 7;\n    tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\n    var firstThursday = tmpDate.valueOf();\n    tmpDate.setMonth(0, 1);\n    if (tmpDate.getDay() !== 4) {\n        tmpDate.setMonth(0, 1 + (4 - tmpDate.getDay() + 7) % 7);\n    }\n    var weekNumber = (1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)).toString();\n    if (weekNumber.length === 1) {\n        return \"0\" + weekNumber;\n    } else {\n        return weekNumber;\n    }\n};\nvar getDaysInMonth = function getDaysInMonth(month, year) {\n    return new Date(year, month + 1, 0).getDate();\n};\nvar styles = {\n    \"ganttTable\": \"_3_ygE\",\n    \"ganttTable_Header\": \"_1nBOt\",\n    \"ganttTable_HeaderSeparator\": \"_2eZzQ\",\n    \"ganttTable_HeaderItem\": \"_WuQ0f\"\n};\nvar TaskListHeaderDefault = function TaskListHeaderDefault(_ref) {\n    var headerHeight = _ref.headerHeight, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rowWidth = _ref.rowWidth;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable,\n        style: {\n            fontFamily: fontFamily,\n            fontSize: fontSize\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_Header,\n        style: {\n            height: headerHeight - 2\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_HeaderItem,\n        style: {\n            minWidth: rowWidth\n        }\n    }, \"\\xa0Name\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_HeaderSeparator,\n        style: {\n            height: headerHeight * 0.5,\n            marginTop: headerHeight * 0.2\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_HeaderItem,\n        style: {\n            minWidth: rowWidth\n        }\n    }, \"\\xa0From\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_HeaderSeparator,\n        style: {\n            height: headerHeight * 0.5,\n            marginTop: headerHeight * 0.25\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.ganttTable_HeaderItem,\n        style: {\n            minWidth: rowWidth\n        }\n    }, \"\\xa0To\")));\n};\nvar styles$1 = {\n    \"taskListWrapper\": \"_3ZbQT\",\n    \"taskListTableRow\": \"_34SS0\",\n    \"taskListCell\": \"_3lLk3\",\n    \"taskListNameWrapper\": \"_nI1Xw\",\n    \"taskListExpander\": \"_2QjE6\",\n    \"taskListEmptyExpander\": \"_2TfEi\"\n};\nvar localeDateStringCache = {};\nvar toLocaleDateStringFactory = function toLocaleDateStringFactory(locale) {\n    return function(date, dateTimeOptions) {\n        var key = date.toString();\n        var lds = localeDateStringCache[key];\n        if (!lds) {\n            lds = date.toLocaleDateString(locale, dateTimeOptions);\n            localeDateStringCache[key] = lds;\n        }\n        return lds;\n    };\n};\nvar dateTimeOptions = {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n};\nvar TaskListTableDefault = function TaskListTableDefault(_ref) {\n    var rowHeight = _ref.rowHeight, rowWidth = _ref.rowWidth, tasks = _ref.tasks, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, locale = _ref.locale, onExpanderClick = _ref.onExpanderClick;\n    var toLocaleDateString = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return toLocaleDateStringFactory(locale);\n    }, [\n        locale\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles$1.taskListWrapper,\n        style: {\n            fontFamily: fontFamily,\n            fontSize: fontSize\n        }\n    }, tasks.map(function(t) {\n        var expanderSymbol = \"\";\n        if (t.hideChildren === false) {\n            expanderSymbol = \"▼\";\n        } else if (t.hideChildren === true) {\n            expanderSymbol = \"▶\";\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: styles$1.taskListTableRow,\n            style: {\n                height: rowHeight\n            },\n            key: t.id + \"row\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: styles$1.taskListCell,\n            style: {\n                minWidth: rowWidth,\n                maxWidth: rowWidth\n            },\n            title: t.name\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: styles$1.taskListNameWrapper\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: expanderSymbol ? styles$1.taskListExpander : styles$1.taskListEmptyExpander,\n            onClick: function onClick() {\n                return onExpanderClick(t);\n            }\n        }, expanderSymbol), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, t.name))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: styles$1.taskListCell,\n            style: {\n                minWidth: rowWidth,\n                maxWidth: rowWidth\n            }\n        }, \"\\xa0\", toLocaleDateString(t.start, dateTimeOptions)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: styles$1.taskListCell,\n            style: {\n                minWidth: rowWidth,\n                maxWidth: rowWidth\n            }\n        }, \"\\xa0\", toLocaleDateString(t.end, dateTimeOptions)));\n    }));\n};\nvar styles$2 = {\n    \"tooltipDefaultContainer\": \"_3T42e\",\n    \"tooltipDefaultContainerParagraph\": \"_29NTg\",\n    \"tooltipDetailsContainer\": \"_25P-K\",\n    \"tooltipDetailsContainerHidden\": \"_3gVAq\"\n};\nvar Tooltip = function Tooltip(_ref) {\n    var task = _ref.task, rowHeight = _ref.rowHeight, rtl = _ref.rtl, svgContainerHeight = _ref.svgContainerHeight, svgContainerWidth = _ref.svgContainerWidth, scrollX = _ref.scrollX, scrollY = _ref.scrollY, arrowIndent = _ref.arrowIndent, fontSize = _ref.fontSize, fontFamily = _ref.fontFamily, headerHeight = _ref.headerHeight, taskListWidth = _ref.taskListWidth, TooltipContent = _ref.TooltipContent;\n    var tooltipRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), relatedY = _useState[0], setRelatedY = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), relatedX = _useState2[0], setRelatedX = _useState2[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (tooltipRef.current) {\n            var tooltipHeight = tooltipRef.current.offsetHeight * 1.1;\n            var tooltipWidth = tooltipRef.current.offsetWidth * 1.1;\n            var newRelatedY = task.index * rowHeight - scrollY + headerHeight;\n            var newRelatedX;\n            if (rtl) {\n                newRelatedX = task.x1 - arrowIndent * 1.5 - tooltipWidth - scrollX;\n                if (newRelatedX < 0) {\n                    newRelatedX = task.x2 + arrowIndent * 1.5 - scrollX;\n                }\n                var tooltipLeftmostPoint = tooltipWidth + newRelatedX;\n                if (tooltipLeftmostPoint > svgContainerWidth) {\n                    newRelatedX = svgContainerWidth - tooltipWidth;\n                    newRelatedY += rowHeight;\n                }\n            } else {\n                newRelatedX = task.x2 + arrowIndent * 1.5 + taskListWidth - scrollX;\n                var _tooltipLeftmostPoint = tooltipWidth + newRelatedX;\n                var fullChartWidth = taskListWidth + svgContainerWidth;\n                if (_tooltipLeftmostPoint > fullChartWidth) {\n                    newRelatedX = task.x1 + taskListWidth - arrowIndent * 1.5 - scrollX - tooltipWidth;\n                }\n                if (newRelatedX < taskListWidth) {\n                    newRelatedX = svgContainerWidth + taskListWidth - tooltipWidth;\n                    newRelatedY += rowHeight;\n                }\n            }\n            var tooltipLowerPoint = tooltipHeight + newRelatedY - scrollY;\n            if (tooltipLowerPoint > svgContainerHeight - scrollY) {\n                newRelatedY = svgContainerHeight - tooltipHeight;\n            }\n            setRelatedY(newRelatedY);\n            setRelatedX(newRelatedX);\n        }\n    }, [\n        tooltipRef,\n        task,\n        arrowIndent,\n        scrollX,\n        scrollY,\n        headerHeight,\n        taskListWidth,\n        rowHeight,\n        svgContainerHeight,\n        svgContainerWidth,\n        rtl\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: tooltipRef,\n        className: relatedX ? styles$2.tooltipDetailsContainer : styles$2.tooltipDetailsContainerHidden,\n        style: {\n            left: relatedX,\n            top: relatedY\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TooltipContent, {\n        task: task,\n        fontSize: fontSize,\n        fontFamily: fontFamily\n    }));\n};\nvar StandardTooltipContent = function StandardTooltipContent(_ref2) {\n    var task = _ref2.task, fontSize = _ref2.fontSize, fontFamily = _ref2.fontFamily;\n    var style = {\n        fontSize: fontSize,\n        fontFamily: fontFamily\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles$2.tooltipDefaultContainer,\n        style: style\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"b\", {\n        style: {\n            fontSize: fontSize + 6\n        }\n    }, task.name + \": \" + task.start.getDate() + \"-\" + (task.start.getMonth() + 1) + \"-\" + task.start.getFullYear() + \" - \" + task.end.getDate() + \"-\" + (task.end.getMonth() + 1) + \"-\" + task.end.getFullYear()), task.end.getTime() - task.start.getTime() !== 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n        className: styles$2.tooltipDefaultContainerParagraph\n    }, \"Duration: \" + ~~((task.end.getTime() - task.start.getTime()) / (1000 * 60 * 60 * 24)) + \" day(s)\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n        className: styles$2.tooltipDefaultContainerParagraph\n    }, !!task.progress && \"Progress: \" + task.progress + \" %\"));\n};\nvar styles$3 = {\n    \"scroll\": \"_1eT-t\"\n};\nvar VerticalScroll = function VerticalScroll(_ref) {\n    var scroll = _ref.scroll, ganttHeight = _ref.ganttHeight, ganttFullHeight = _ref.ganttFullHeight, headerHeight = _ref.headerHeight, rtl = _ref.rtl, onScroll = _ref.onScroll;\n    var scrollRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (scrollRef.current) {\n            scrollRef.current.scrollTop = scroll;\n        }\n    }, [\n        scroll\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            height: ganttHeight,\n            marginTop: headerHeight,\n            marginLeft: rtl ? \"\" : \"-1rem\"\n        },\n        className: styles$3.scroll,\n        onScroll: onScroll,\n        ref: scrollRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            height: ganttFullHeight,\n            width: 1\n        }\n    }));\n};\nvar TaskList = function TaskList(_ref) {\n    var headerHeight = _ref.headerHeight, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rowWidth = _ref.rowWidth, rowHeight = _ref.rowHeight, scrollY = _ref.scrollY, tasks = _ref.tasks, selectedTask = _ref.selectedTask, setSelectedTask = _ref.setSelectedTask, onExpanderClick = _ref.onExpanderClick, locale = _ref.locale, ganttHeight = _ref.ganttHeight, taskListRef = _ref.taskListRef, horizontalContainerClass = _ref.horizontalContainerClass, TaskListHeader = _ref.TaskListHeader, TaskListTable = _ref.TaskListTable;\n    var horizontalContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (horizontalContainerRef.current) {\n            horizontalContainerRef.current.scrollTop = scrollY;\n        }\n    }, [\n        scrollY\n    ]);\n    var headerProps = {\n        headerHeight: headerHeight,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        rowWidth: rowWidth\n    };\n    var selectedTaskId = selectedTask ? selectedTask.id : \"\";\n    var tableProps = {\n        rowHeight: rowHeight,\n        rowWidth: rowWidth,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        tasks: tasks,\n        locale: locale,\n        selectedTaskId: selectedTaskId,\n        setSelectedTask: setSelectedTask,\n        onExpanderClick: onExpanderClick\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: taskListRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskListHeader, Object.assign({}, headerProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: horizontalContainerRef,\n        className: horizontalContainerClass,\n        style: ganttHeight ? {\n            height: ganttHeight\n        } : {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskListTable, Object.assign({}, tableProps))));\n};\nvar styles$4 = {\n    \"gridRow\": \"_2dZTy\",\n    \"gridRowLine\": \"_3rUKi\",\n    \"gridTick\": \"_RuwuK\"\n};\nvar GridBody = function GridBody(_ref) {\n    var tasks = _ref.tasks, dates = _ref.dates, rowHeight = _ref.rowHeight, svgWidth = _ref.svgWidth, columnWidth = _ref.columnWidth, todayColor = _ref.todayColor, rtl = _ref.rtl;\n    var y = 0;\n    var gridRows = [];\n    var rowLines = [\n        /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"line\", {\n            key: \"RowLineFirst\",\n            x: \"0\",\n            y1: 0,\n            x2: svgWidth,\n            y2: 0,\n            className: styles$4.gridRowLine\n        })\n    ];\n    for(var _iterator = _createForOfIteratorHelperLoose(tasks), _step; !(_step = _iterator()).done;){\n        var task = _step.value;\n        gridRows.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n            key: \"Row\" + task.id,\n            x: \"0\",\n            y: y,\n            width: svgWidth,\n            height: rowHeight,\n            className: styles$4.gridRow\n        }));\n        rowLines.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"line\", {\n            key: \"RowLine\" + task.id,\n            x: \"0\",\n            y1: y + rowHeight,\n            x2: svgWidth,\n            y2: y + rowHeight,\n            className: styles$4.gridRowLine\n        }));\n        y += rowHeight;\n    }\n    var now = new Date();\n    var tickX = 0;\n    var ticks = [];\n    var today = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", null);\n    for(var i = 0; i < dates.length; i++){\n        var date = dates[i];\n        ticks.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"line\", {\n            key: date.getTime(),\n            x1: tickX,\n            y1: 0,\n            x2: tickX,\n            y2: y,\n            className: styles$4.gridTick\n        }));\n        if (i + 1 !== dates.length && date.getTime() < now.getTime() && dates[i + 1].getTime() >= now.getTime() || i !== 0 && i + 1 === dates.length && date.getTime() < now.getTime() && addToDate(date, date.getTime() - dates[i - 1].getTime(), \"millisecond\").getTime() >= now.getTime()) {\n            today = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n                x: tickX,\n                y: 0,\n                width: columnWidth,\n                height: y,\n                fill: todayColor\n            });\n        }\n        if (rtl && i + 1 !== dates.length && date.getTime() >= now.getTime() && dates[i + 1].getTime() < now.getTime()) {\n            today = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n                x: tickX + columnWidth,\n                y: 0,\n                width: columnWidth,\n                height: y,\n                fill: todayColor\n            });\n        }\n        tickX += columnWidth;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"gridBody\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"rows\"\n    }, gridRows), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"rowLines\"\n    }, rowLines), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"ticks\"\n    }, ticks), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"today\"\n    }, today));\n};\nvar Grid = function Grid(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"grid\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GridBody, Object.assign({}, props)));\n};\nvar styles$5 = {\n    \"calendarBottomText\": \"_9w8d5\",\n    \"calendarTopTick\": \"_1rLuZ\",\n    \"calendarTopText\": \"_2q1Kt\",\n    \"calendarHeader\": \"_35nLX\"\n};\nvar TopPartOfCalendar = function TopPartOfCalendar(_ref) {\n    var value = _ref.value, x1Line = _ref.x1Line, y1Line = _ref.y1Line, y2Line = _ref.y2Line, xText = _ref.xText, yText = _ref.yText;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"calendarTop\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"line\", {\n        x1: x1Line,\n        y1: y1Line,\n        x2: x1Line,\n        y2: y2Line,\n        className: styles$5.calendarTopTick,\n        key: value + \"line\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n        key: value + \"text\",\n        y: yText,\n        x: xText,\n        className: styles$5.calendarTopText\n    }, value));\n};\nvar Calendar = function Calendar(_ref) {\n    var dateSetup = _ref.dateSetup, locale = _ref.locale, viewMode = _ref.viewMode, rtl = _ref.rtl, headerHeight = _ref.headerHeight, columnWidth = _ref.columnWidth, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize;\n    var getCalendarValuesForYear = function getCalendarValuesForYear() {\n        var topValues = [];\n        var bottomValues = [];\n        var topDefaultHeight = headerHeight * 0.5;\n        for(var i = 0; i < dateSetup.dates.length; i++){\n            var date = dateSetup.dates[i];\n            var bottomValue = date.getFullYear();\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: date.getFullYear(),\n                y: headerHeight * 0.8,\n                x: columnWidth * i + columnWidth * 0.5,\n                className: styles$5.calendarBottomText\n            }, bottomValue));\n            if (i === 0 || date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()) {\n                var topValue = date.getFullYear().toString();\n                var xText = void 0;\n                if (rtl) {\n                    xText = (6 + i + date.getFullYear() + 1) * columnWidth;\n                } else {\n                    xText = (6 + i - date.getFullYear()) * columnWidth;\n                }\n                topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                    key: topValue,\n                    value: topValue,\n                    x1Line: columnWidth * i,\n                    y1Line: 0,\n                    y2Line: headerHeight,\n                    xText: xText,\n                    yText: topDefaultHeight * 0.9\n                }));\n            }\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var getCalendarValuesForMonth = function getCalendarValuesForMonth() {\n        var topValues = [];\n        var bottomValues = [];\n        var topDefaultHeight = headerHeight * 0.5;\n        for(var i = 0; i < dateSetup.dates.length; i++){\n            var date = dateSetup.dates[i];\n            var bottomValue = getLocaleMonth(date, locale);\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: bottomValue + date.getFullYear(),\n                y: headerHeight * 0.8,\n                x: columnWidth * i + columnWidth * 0.5,\n                className: styles$5.calendarBottomText\n            }, bottomValue));\n            if (i === 0 || date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()) {\n                var topValue = date.getFullYear().toString();\n                var xText = void 0;\n                if (rtl) {\n                    xText = (6 + i + date.getMonth() + 1) * columnWidth;\n                } else {\n                    xText = (6 + i - date.getMonth()) * columnWidth;\n                }\n                topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                    key: topValue,\n                    value: topValue,\n                    x1Line: columnWidth * i,\n                    y1Line: 0,\n                    y2Line: topDefaultHeight,\n                    xText: xText,\n                    yText: topDefaultHeight * 0.9\n                }));\n            }\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var getCalendarValuesForWeek = function getCalendarValuesForWeek() {\n        var topValues = [];\n        var bottomValues = [];\n        var weeksCount = 1;\n        var topDefaultHeight = headerHeight * 0.5;\n        var dates = dateSetup.dates;\n        for(var i = dates.length - 1; i >= 0; i--){\n            var date = dates[i];\n            var topValue = \"\";\n            if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\n                topValue = getLocaleMonth(date, locale) + \", \" + date.getFullYear();\n            }\n            var bottomValue = \"W\" + getWeekNumberISO8601(date);\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: date.getTime(),\n                y: headerHeight * 0.8,\n                x: columnWidth * (i + +rtl),\n                className: styles$5.calendarBottomText\n            }, bottomValue));\n            if (topValue) {\n                if (i !== dates.length - 1) {\n                    topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                        key: topValue,\n                        value: topValue,\n                        x1Line: columnWidth * i + weeksCount * columnWidth,\n                        y1Line: 0,\n                        y2Line: topDefaultHeight,\n                        xText: columnWidth * i + columnWidth * weeksCount * 0.5,\n                        yText: topDefaultHeight * 0.9\n                    }));\n                }\n                weeksCount = 0;\n            }\n            weeksCount++;\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var getCalendarValuesForDay = function getCalendarValuesForDay() {\n        var topValues = [];\n        var bottomValues = [];\n        var topDefaultHeight = headerHeight * 0.5;\n        var dates = dateSetup.dates;\n        for(var i = 0; i < dates.length; i++){\n            var date = dates[i];\n            var bottomValue = getLocalDayOfWeek(date, locale, \"short\") + \", \" + date.getDate().toString();\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: date.getTime(),\n                y: headerHeight * 0.8,\n                x: columnWidth * i + columnWidth * 0.5,\n                className: styles$5.calendarBottomText\n            }, bottomValue));\n            if (i + 1 !== dates.length && date.getMonth() !== dates[i + 1].getMonth()) {\n                var topValue = getLocaleMonth(date, locale);\n                topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                    key: topValue + date.getFullYear(),\n                    value: topValue,\n                    x1Line: columnWidth * (i + 1),\n                    y1Line: 0,\n                    y2Line: topDefaultHeight,\n                    xText: columnWidth * (i + 1) - getDaysInMonth(date.getMonth(), date.getFullYear()) * columnWidth * 0.5,\n                    yText: topDefaultHeight * 0.9\n                }));\n            }\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var getCalendarValuesForPartOfDay = function getCalendarValuesForPartOfDay() {\n        var topValues = [];\n        var bottomValues = [];\n        var ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\n        var topDefaultHeight = headerHeight * 0.5;\n        var dates = dateSetup.dates;\n        for(var i = 0; i < dates.length; i++){\n            var date = dates[i];\n            var bottomValue = getCachedDateTimeFormat(locale, {\n                hour: \"numeric\"\n            }).format(date);\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: date.getTime(),\n                y: headerHeight * 0.8,\n                x: columnWidth * (i + +rtl),\n                className: styles$5.calendarBottomText,\n                fontFamily: fontFamily\n            }, bottomValue));\n            if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\n                var topValue = getLocalDayOfWeek(date, locale, \"short\") + \", \" + date.getDate() + \" \" + getLocaleMonth(date, locale);\n                topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                    key: topValue + date.getFullYear(),\n                    value: topValue,\n                    x1Line: columnWidth * i + ticks * columnWidth,\n                    y1Line: 0,\n                    y2Line: topDefaultHeight,\n                    xText: columnWidth * i + ticks * columnWidth * 0.5,\n                    yText: topDefaultHeight * 0.9\n                }));\n            }\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var getCalendarValuesForHour = function getCalendarValuesForHour() {\n        var topValues = [];\n        var bottomValues = [];\n        var topDefaultHeight = headerHeight * 0.5;\n        var dates = dateSetup.dates;\n        for(var i = 0; i < dates.length; i++){\n            var date = dates[i];\n            var bottomValue = getCachedDateTimeFormat(locale, {\n                hour: \"numeric\"\n            }).format(date);\n            bottomValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n                key: date.getTime(),\n                y: headerHeight * 0.8,\n                x: columnWidth * (i + +rtl),\n                className: styles$5.calendarBottomText,\n                fontFamily: fontFamily\n            }, bottomValue));\n            if (i !== 0 && date.getDate() !== dates[i - 1].getDate()) {\n                var displayDate = dates[i - 1];\n                var topValue = getLocalDayOfWeek(displayDate, locale, \"long\") + \", \" + displayDate.getDate() + \" \" + getLocaleMonth(displayDate, locale);\n                var topPosition = (date.getHours() - 24) / 2;\n                topValues.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TopPartOfCalendar, {\n                    key: topValue + displayDate.getFullYear(),\n                    value: topValue,\n                    x1Line: columnWidth * i,\n                    y1Line: 0,\n                    y2Line: topDefaultHeight,\n                    xText: columnWidth * (i + topPosition),\n                    yText: topDefaultHeight * 0.9\n                }));\n            }\n        }\n        return [\n            topValues,\n            bottomValues\n        ];\n    };\n    var topValues = [];\n    var bottomValues = [];\n    switch(dateSetup.viewMode){\n        case ViewMode.Year:\n            var _getCalendarValuesFor = getCalendarValuesForYear();\n            topValues = _getCalendarValuesFor[0];\n            bottomValues = _getCalendarValuesFor[1];\n            break;\n        case ViewMode.Month:\n            var _getCalendarValuesFor2 = getCalendarValuesForMonth();\n            topValues = _getCalendarValuesFor2[0];\n            bottomValues = _getCalendarValuesFor2[1];\n            break;\n        case ViewMode.Week:\n            var _getCalendarValuesFor3 = getCalendarValuesForWeek();\n            topValues = _getCalendarValuesFor3[0];\n            bottomValues = _getCalendarValuesFor3[1];\n            break;\n        case ViewMode.Day:\n            var _getCalendarValuesFor4 = getCalendarValuesForDay();\n            topValues = _getCalendarValuesFor4[0];\n            bottomValues = _getCalendarValuesFor4[1];\n            break;\n        case ViewMode.QuarterDay:\n        case ViewMode.HalfDay:\n            var _getCalendarValuesFor5 = getCalendarValuesForPartOfDay();\n            topValues = _getCalendarValuesFor5[0];\n            bottomValues = _getCalendarValuesFor5[1];\n            break;\n        case ViewMode.Hour:\n            var _getCalendarValuesFor6 = getCalendarValuesForHour();\n            topValues = _getCalendarValuesFor6[0];\n            bottomValues = _getCalendarValuesFor6[1];\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"calendar\",\n        fontSize: fontSize,\n        fontFamily: fontFamily\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        x: 0,\n        y: 0,\n        width: columnWidth * dateSetup.dates.length,\n        height: headerHeight,\n        className: styles$5.calendarHeader\n    }), bottomValues, \" \", topValues);\n};\n// A type of promise-like that resolves synchronously and supports only one observer\nconst _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\nconst _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\";\n// Asynchronously call a function and send errors to recovery continuation\nfunction _catch(body, recover) {\n    try {\n        var result = body();\n    } catch (e) {\n        return recover(e);\n    }\n    if (result && result.then) {\n        return result.then(void 0, recover);\n    }\n    return result;\n}\nvar Arrow = function Arrow(_ref) {\n    var taskFrom = _ref.taskFrom, taskTo = _ref.taskTo, rowHeight = _ref.rowHeight, taskHeight = _ref.taskHeight, arrowIndent = _ref.arrowIndent, rtl = _ref.rtl;\n    var path;\n    var trianglePoints;\n    if (rtl) {\n        var _drownPathAndTriangle = drownPathAndTriangleRTL(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent);\n        path = _drownPathAndTriangle[0];\n        trianglePoints = _drownPathAndTriangle[1];\n    } else {\n        var _drownPathAndTriangle2 = drownPathAndTriangle(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent);\n        path = _drownPathAndTriangle2[0];\n        trianglePoints = _drownPathAndTriangle2[1];\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"arrow\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        strokeWidth: \"1.5\",\n        d: path,\n        fill: \"none\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"polygon\", {\n        points: trianglePoints\n    }));\n};\nvar drownPathAndTriangle = function drownPathAndTriangle(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent) {\n    var indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\n    var taskToEndPosition = taskTo.y + taskHeight / 2;\n    var taskFromEndPosition = taskFrom.x2 + arrowIndent * 2;\n    var taskFromHorizontalOffsetValue = taskFromEndPosition < taskTo.x1 ? \"\" : \"H \" + (taskTo.x1 - arrowIndent);\n    var taskToHorizontalOffsetValue = taskFromEndPosition > taskTo.x1 ? arrowIndent : taskTo.x1 - taskFrom.x2 - arrowIndent;\n    var path = \"M \" + taskFrom.x2 + \" \" + (taskFrom.y + taskHeight / 2) + \" \\n  h \" + arrowIndent + \" \\n  v \" + indexCompare * rowHeight / 2 + \" \\n  \" + taskFromHorizontalOffsetValue + \"\\n  V \" + taskToEndPosition + \" \\n  h \" + taskToHorizontalOffsetValue;\n    var trianglePoints = taskTo.x1 + \",\" + taskToEndPosition + \" \\n  \" + (taskTo.x1 - 5) + \",\" + (taskToEndPosition - 5) + \" \\n  \" + (taskTo.x1 - 5) + \",\" + (taskToEndPosition + 5);\n    return [\n        path,\n        trianglePoints\n    ];\n};\nvar drownPathAndTriangleRTL = function drownPathAndTriangleRTL(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent) {\n    var indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\n    var taskToEndPosition = taskTo.y + taskHeight / 2;\n    var taskFromEndPosition = taskFrom.x1 - arrowIndent * 2;\n    var taskFromHorizontalOffsetValue = taskFromEndPosition > taskTo.x2 ? \"\" : \"H \" + (taskTo.x2 + arrowIndent);\n    var taskToHorizontalOffsetValue = taskFromEndPosition < taskTo.x2 ? -arrowIndent : taskTo.x2 - taskFrom.x1 + arrowIndent;\n    var path = \"M \" + taskFrom.x1 + \" \" + (taskFrom.y + taskHeight / 2) + \" \\n  h \" + -arrowIndent + \" \\n  v \" + indexCompare * rowHeight / 2 + \" \\n  \" + taskFromHorizontalOffsetValue + \"\\n  V \" + taskToEndPosition + \" \\n  h \" + taskToHorizontalOffsetValue;\n    var trianglePoints = taskTo.x2 + \",\" + taskToEndPosition + \" \\n  \" + (taskTo.x2 + 5) + \",\" + (taskToEndPosition + 5) + \" \\n  \" + (taskTo.x2 + 5) + \",\" + (taskToEndPosition - 5);\n    return [\n        path,\n        trianglePoints\n    ];\n};\nvar convertToBarTasks = function convertToBarTasks(tasks, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {\n    var barTasks = tasks.map(function(t, i) {\n        return convertToBarTask(t, i, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor);\n    });\n    barTasks = barTasks.map(function(task) {\n        var dependencies = task.dependencies || [];\n        var _loop = function _loop(j) {\n            var dependence = barTasks.findIndex(function(value) {\n                return value.id === dependencies[j];\n            });\n            if (dependence !== -1) barTasks[dependence].barChildren.push(task);\n        };\n        for(var j = 0; j < dependencies.length; j++){\n            _loop(j);\n        }\n        return task;\n    });\n    return barTasks;\n};\nvar convertToBarTask = function convertToBarTask(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {\n    var barTask;\n    switch(task.type){\n        case \"milestone\":\n            barTask = convertToMilestone(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, milestoneBackgroundColor, milestoneBackgroundSelectedColor);\n            break;\n        case \"project\":\n            barTask = convertToBar(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor);\n            break;\n        default:\n            barTask = convertToBar(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor);\n            break;\n    }\n    return barTask;\n};\nvar convertToBar = function convertToBar(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor) {\n    var x1;\n    var x2;\n    if (rtl) {\n        x2 = taskXCoordinateRTL(task.start, dates, columnWidth);\n        x1 = taskXCoordinateRTL(task.end, dates, columnWidth);\n    } else {\n        x1 = taskXCoordinate(task.start, dates, columnWidth);\n        x2 = taskXCoordinate(task.end, dates, columnWidth);\n    }\n    var typeInternal = task.type;\n    if (typeInternal === \"task\" && x2 - x1 < handleWidth * 2) {\n        typeInternal = \"smalltask\";\n        x2 = x1 + handleWidth * 2;\n    }\n    var _progressWithByParams = progressWithByParams(x1, x2, task.progress, rtl), progressWidth = _progressWithByParams[0], progressX = _progressWithByParams[1];\n    var y = taskYCoordinate(index, rowHeight, taskHeight);\n    var hideChildren = task.type === \"project\" ? task.hideChildren : undefined;\n    var styles = _extends({\n        backgroundColor: barBackgroundColor,\n        backgroundSelectedColor: barBackgroundSelectedColor,\n        progressColor: barProgressColor,\n        progressSelectedColor: barProgressSelectedColor\n    }, task.styles);\n    return _extends({}, task, {\n        typeInternal: typeInternal,\n        x1: x1,\n        x2: x2,\n        y: y,\n        index: index,\n        progressX: progressX,\n        progressWidth: progressWidth,\n        barCornerRadius: barCornerRadius,\n        handleWidth: handleWidth,\n        hideChildren: hideChildren,\n        height: taskHeight,\n        barChildren: [],\n        styles: styles\n    });\n};\nvar convertToMilestone = function convertToMilestone(task, index, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {\n    var x = taskXCoordinate(task.start, dates, columnWidth);\n    var y = taskYCoordinate(index, rowHeight, taskHeight);\n    var x1 = x - taskHeight * 0.5;\n    var x2 = x + taskHeight * 0.5;\n    var rotatedHeight = taskHeight / 1.414;\n    var styles = _extends({\n        backgroundColor: milestoneBackgroundColor,\n        backgroundSelectedColor: milestoneBackgroundSelectedColor,\n        progressColor: \"\",\n        progressSelectedColor: \"\"\n    }, task.styles);\n    return _extends({}, task, {\n        end: task.start,\n        x1: x1,\n        x2: x2,\n        y: y,\n        index: index,\n        progressX: 0,\n        progressWidth: 0,\n        barCornerRadius: barCornerRadius,\n        handleWidth: handleWidth,\n        typeInternal: task.type,\n        progress: 0,\n        height: rotatedHeight,\n        hideChildren: undefined,\n        barChildren: [],\n        styles: styles\n    });\n};\nvar taskXCoordinate = function taskXCoordinate(xDate, dates, columnWidth) {\n    var index = dates.findIndex(function(d) {\n        return d.getTime() >= xDate.getTime();\n    }) - 1;\n    var remainderMillis = xDate.getTime() - dates[index].getTime();\n    var percentOfInterval = remainderMillis / (dates[index + 1].getTime() - dates[index].getTime());\n    var x = index * columnWidth + percentOfInterval * columnWidth;\n    return x;\n};\nvar taskXCoordinateRTL = function taskXCoordinateRTL(xDate, dates, columnWidth) {\n    var x = taskXCoordinate(xDate, dates, columnWidth);\n    x += columnWidth;\n    return x;\n};\nvar taskYCoordinate = function taskYCoordinate(index, rowHeight, taskHeight) {\n    var y = index * rowHeight + (rowHeight - taskHeight) / 2;\n    return y;\n};\nvar progressWithByParams = function progressWithByParams(taskX1, taskX2, progress, rtl) {\n    var progressWidth = (taskX2 - taskX1) * progress * 0.01;\n    var progressX;\n    if (rtl) {\n        progressX = taskX2 - progressWidth;\n    } else {\n        progressX = taskX1;\n    }\n    return [\n        progressWidth,\n        progressX\n    ];\n};\nvar progressByX = function progressByX(x, task) {\n    if (x >= task.x2) return 100;\n    else if (x <= task.x1) return 0;\n    else {\n        var barWidth = task.x2 - task.x1;\n        var progressPercent = Math.round((x - task.x1) * 100 / barWidth);\n        return progressPercent;\n    }\n};\nvar progressByXRTL = function progressByXRTL(x, task) {\n    if (x >= task.x2) return 0;\n    else if (x <= task.x1) return 100;\n    else {\n        var barWidth = task.x2 - task.x1;\n        var progressPercent = Math.round((task.x2 - x) * 100 / barWidth);\n        return progressPercent;\n    }\n};\nvar getProgressPoint = function getProgressPoint(progressX, taskY, taskHeight) {\n    var point = [\n        progressX - 5,\n        taskY + taskHeight,\n        progressX + 5,\n        taskY + taskHeight,\n        progressX,\n        taskY + taskHeight - 8.66\n    ];\n    return point.join(\",\");\n};\nvar startByX = function startByX(x, xStep, task) {\n    if (x >= task.x2 - task.handleWidth * 2) {\n        x = task.x2 - task.handleWidth * 2;\n    }\n    var steps = Math.round((x - task.x1) / xStep);\n    var additionalXValue = steps * xStep;\n    var newX = task.x1 + additionalXValue;\n    return newX;\n};\nvar endByX = function endByX(x, xStep, task) {\n    if (x <= task.x1 + task.handleWidth * 2) {\n        x = task.x1 + task.handleWidth * 2;\n    }\n    var steps = Math.round((x - task.x2) / xStep);\n    var additionalXValue = steps * xStep;\n    var newX = task.x2 + additionalXValue;\n    return newX;\n};\nvar moveByX = function moveByX(x, xStep, task) {\n    var steps = Math.round((x - task.x1) / xStep);\n    var additionalXValue = steps * xStep;\n    var newX1 = task.x1 + additionalXValue;\n    var newX2 = newX1 + task.x2 - task.x1;\n    return [\n        newX1,\n        newX2\n    ];\n};\nvar dateByX = function dateByX(x, taskX, taskDate, xStep, timeStep) {\n    var newDate = new Date((x - taskX) / xStep * timeStep + taskDate.getTime());\n    newDate = new Date(newDate.getTime() + (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000);\n    return newDate;\n};\nvar handleTaskBySVGMouseEvent = function handleTaskBySVGMouseEvent(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl) {\n    var result;\n    switch(selectedTask.type){\n        case \"milestone\":\n            result = handleTaskBySVGMouseEventForMilestone(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta);\n            break;\n        default:\n            result = handleTaskBySVGMouseEventForBar(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl);\n            break;\n    }\n    return result;\n};\nvar handleTaskBySVGMouseEventForBar = function handleTaskBySVGMouseEventForBar(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl) {\n    var changedTask = _extends({}, selectedTask);\n    var isChanged = false;\n    switch(action){\n        case \"progress\":\n            if (rtl) {\n                changedTask.progress = progressByXRTL(svgX, selectedTask);\n            } else {\n                changedTask.progress = progressByX(svgX, selectedTask);\n            }\n            isChanged = changedTask.progress !== selectedTask.progress;\n            if (isChanged) {\n                var _progressWithByParams2 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), progressWidth = _progressWithByParams2[0], progressX = _progressWithByParams2[1];\n                changedTask.progressWidth = progressWidth;\n                changedTask.progressX = progressX;\n            }\n            break;\n        case \"start\":\n            {\n                var newX1 = startByX(svgX, xStep, selectedTask);\n                changedTask.x1 = newX1;\n                isChanged = changedTask.x1 !== selectedTask.x1;\n                if (isChanged) {\n                    if (rtl) {\n                        changedTask.end = dateByX(newX1, selectedTask.x1, selectedTask.end, xStep, timeStep);\n                    } else {\n                        changedTask.start = dateByX(newX1, selectedTask.x1, selectedTask.start, xStep, timeStep);\n                    }\n                    var _progressWithByParams3 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth = _progressWithByParams3[0], _progressX = _progressWithByParams3[1];\n                    changedTask.progressWidth = _progressWidth;\n                    changedTask.progressX = _progressX;\n                }\n                break;\n            }\n        case \"end\":\n            {\n                var newX2 = endByX(svgX, xStep, selectedTask);\n                changedTask.x2 = newX2;\n                isChanged = changedTask.x2 !== selectedTask.x2;\n                if (isChanged) {\n                    if (rtl) {\n                        changedTask.start = dateByX(newX2, selectedTask.x2, selectedTask.start, xStep, timeStep);\n                    } else {\n                        changedTask.end = dateByX(newX2, selectedTask.x2, selectedTask.end, xStep, timeStep);\n                    }\n                    var _progressWithByParams4 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth2 = _progressWithByParams4[0], _progressX2 = _progressWithByParams4[1];\n                    changedTask.progressWidth = _progressWidth2;\n                    changedTask.progressX = _progressX2;\n                }\n                break;\n            }\n        case \"move\":\n            {\n                var _moveByX = moveByX(svgX - initEventX1Delta, xStep, selectedTask), newMoveX1 = _moveByX[0], newMoveX2 = _moveByX[1];\n                isChanged = newMoveX1 !== selectedTask.x1;\n                if (isChanged) {\n                    changedTask.start = dateByX(newMoveX1, selectedTask.x1, selectedTask.start, xStep, timeStep);\n                    changedTask.end = dateByX(newMoveX2, selectedTask.x2, selectedTask.end, xStep, timeStep);\n                    changedTask.x1 = newMoveX1;\n                    changedTask.x2 = newMoveX2;\n                    var _progressWithByParams5 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth3 = _progressWithByParams5[0], _progressX3 = _progressWithByParams5[1];\n                    changedTask.progressWidth = _progressWidth3;\n                    changedTask.progressX = _progressX3;\n                }\n                break;\n            }\n    }\n    return {\n        isChanged: isChanged,\n        changedTask: changedTask\n    };\n};\nvar handleTaskBySVGMouseEventForMilestone = function handleTaskBySVGMouseEventForMilestone(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta) {\n    var changedTask = _extends({}, selectedTask);\n    var isChanged = false;\n    switch(action){\n        case \"move\":\n            {\n                var _moveByX2 = moveByX(svgX - initEventX1Delta, xStep, selectedTask), newMoveX1 = _moveByX2[0], newMoveX2 = _moveByX2[1];\n                isChanged = newMoveX1 !== selectedTask.x1;\n                if (isChanged) {\n                    changedTask.start = dateByX(newMoveX1, selectedTask.x1, selectedTask.start, xStep, timeStep);\n                    changedTask.end = changedTask.start;\n                    changedTask.x1 = newMoveX1;\n                    changedTask.x2 = newMoveX2;\n                }\n                break;\n            }\n    }\n    return {\n        isChanged: isChanged,\n        changedTask: changedTask\n    };\n};\nfunction isKeyboardEvent(event) {\n    return event.key !== undefined;\n}\nfunction removeHiddenTasks(tasks) {\n    var groupedTasks = tasks.filter(function(t) {\n        return t.hideChildren && t.type === \"project\";\n    });\n    if (groupedTasks.length > 0) {\n        var _loop = function _loop(i) {\n            var groupedTask = groupedTasks[i];\n            var children = getChildren(tasks, groupedTask);\n            tasks = tasks.filter(function(t) {\n                return children.indexOf(t) === -1;\n            });\n        };\n        for(var i = 0; groupedTasks.length > i; i++){\n            _loop(i);\n        }\n    }\n    return tasks;\n}\nfunction getChildren(taskList, task) {\n    var tasks = [];\n    if (task.type !== \"project\") {\n        tasks = taskList.filter(function(t) {\n            return t.dependencies && t.dependencies.indexOf(task.id) !== -1;\n        });\n    } else {\n        tasks = taskList.filter(function(t) {\n            return t.project && t.project === task.id;\n        });\n    }\n    var taskChildren = [];\n    tasks.forEach(function(t) {\n        taskChildren.push.apply(taskChildren, getChildren(taskList, t));\n    });\n    tasks = tasks.concat(tasks, taskChildren);\n    return tasks;\n}\nvar sortTasks = function sortTasks(taskA, taskB) {\n    var orderA = taskA.displayOrder || Number.MAX_VALUE;\n    var orderB = taskB.displayOrder || Number.MAX_VALUE;\n    if (orderA > orderB) {\n        return 1;\n    } else if (orderA < orderB) {\n        return -1;\n    } else {\n        return 0;\n    }\n};\nvar styles$6 = {\n    \"barWrapper\": \"_KxSXS\",\n    \"barHandle\": \"_3w_5u\",\n    \"barBackground\": \"_31ERP\"\n};\nvar BarDisplay = function BarDisplay(_ref) {\n    var x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, isSelected = _ref.isSelected, progressX = _ref.progressX, progressWidth = _ref.progressWidth, barCornerRadius = _ref.barCornerRadius, styles = _ref.styles, onMouseDown = _ref.onMouseDown;\n    var getProcessColor = function getProcessColor() {\n        return isSelected ? styles.progressSelectedColor : styles.progressColor;\n    };\n    var getBarColor = function getBarColor() {\n        return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        onMouseDown: onMouseDown\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        x: x,\n        width: width,\n        y: y,\n        height: height,\n        ry: barCornerRadius,\n        rx: barCornerRadius,\n        fill: getBarColor(),\n        className: styles$6.barBackground\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        x: progressX,\n        width: progressWidth,\n        y: y,\n        height: height,\n        ry: barCornerRadius,\n        rx: barCornerRadius,\n        fill: getProcessColor()\n    }));\n};\nvar BarDateHandle = function BarDateHandle(_ref) {\n    var x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, barCornerRadius = _ref.barCornerRadius, onMouseDown = _ref.onMouseDown;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        className: styles$6.barHandle,\n        ry: barCornerRadius,\n        rx: barCornerRadius,\n        onMouseDown: onMouseDown\n    });\n};\nvar BarProgressHandle = function BarProgressHandle(_ref) {\n    var progressPoint = _ref.progressPoint, onMouseDown = _ref.onMouseDown;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"polygon\", {\n        className: styles$6.barHandle,\n        points: progressPoint,\n        onMouseDown: onMouseDown\n    });\n};\nvar Bar = function Bar(_ref) {\n    var task = _ref.task, isProgressChangeable = _ref.isProgressChangeable, isDateChangeable = _ref.isDateChangeable, rtl = _ref.rtl, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;\n    var progressPoint = getProgressPoint(+!rtl * task.progressWidth + task.progressX, task.y, task.height);\n    var handleHeight = task.height - 2;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: styles$6.barWrapper,\n        tabIndex: 0\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarDisplay, {\n        x: task.x1,\n        y: task.y,\n        width: task.x2 - task.x1,\n        height: task.height,\n        progressX: task.progressX,\n        progressWidth: task.progressWidth,\n        barCornerRadius: task.barCornerRadius,\n        styles: task.styles,\n        isSelected: isSelected,\n        onMouseDown: function onMouseDown(e) {\n            isDateChangeable && onEventStart(\"move\", task, e);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"handleGroup\"\n    }, isDateChangeable && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarDateHandle, {\n        x: task.x1 + 1,\n        y: task.y + 1,\n        width: task.handleWidth,\n        height: handleHeight,\n        barCornerRadius: task.barCornerRadius,\n        onMouseDown: function onMouseDown(e) {\n            onEventStart(\"start\", task, e);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarDateHandle, {\n        x: task.x2 - task.handleWidth - 1,\n        y: task.y + 1,\n        width: task.handleWidth,\n        height: handleHeight,\n        barCornerRadius: task.barCornerRadius,\n        onMouseDown: function onMouseDown(e) {\n            onEventStart(\"end\", task, e);\n        }\n    })), isProgressChangeable && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarProgressHandle, {\n        progressPoint: progressPoint,\n        onMouseDown: function onMouseDown(e) {\n            onEventStart(\"progress\", task, e);\n        }\n    })));\n};\nvar BarSmall = function BarSmall(_ref) {\n    var task = _ref.task, isProgressChangeable = _ref.isProgressChangeable, isDateChangeable = _ref.isDateChangeable, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;\n    var progressPoint = getProgressPoint(task.progressWidth + task.x1, task.y, task.height);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: styles$6.barWrapper,\n        tabIndex: 0\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarDisplay, {\n        x: task.x1,\n        y: task.y,\n        width: task.x2 - task.x1,\n        height: task.height,\n        progressX: task.progressX,\n        progressWidth: task.progressWidth,\n        barCornerRadius: task.barCornerRadius,\n        styles: task.styles,\n        isSelected: isSelected,\n        onMouseDown: function onMouseDown(e) {\n            isDateChangeable && onEventStart(\"move\", task, e);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"handleGroup\"\n    }, isProgressChangeable && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarProgressHandle, {\n        progressPoint: progressPoint,\n        onMouseDown: function onMouseDown(e) {\n            onEventStart(\"progress\", task, e);\n        }\n    })));\n};\nvar styles$7 = {\n    \"milestoneWrapper\": \"_RRr13\",\n    \"milestoneBackground\": \"_2P2B1\"\n};\nvar Milestone = function Milestone(_ref) {\n    var task = _ref.task, isDateChangeable = _ref.isDateChangeable, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;\n    var transform = \"rotate(45 \" + (task.x1 + task.height * 0.356) + \" \\n    \" + (task.y + task.height * 0.85) + \")\";\n    var getBarColor = function getBarColor() {\n        return isSelected ? task.styles.backgroundSelectedColor : task.styles.backgroundColor;\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        tabIndex: 0,\n        className: styles$7.milestoneWrapper\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        fill: getBarColor(),\n        x: task.x1,\n        width: task.height,\n        y: task.y,\n        height: task.height,\n        rx: task.barCornerRadius,\n        ry: task.barCornerRadius,\n        transform: transform,\n        className: styles$7.milestoneBackground,\n        onMouseDown: function onMouseDown(e) {\n            isDateChangeable && onEventStart(\"move\", task, e);\n        }\n    }));\n};\nvar styles$8 = {\n    \"projectWrapper\": \"_1KJ6x\",\n    \"projectBackground\": \"_2RbVy\",\n    \"projectTop\": \"_2pZMF\"\n};\nvar Project = function Project(_ref) {\n    var task = _ref.task, isSelected = _ref.isSelected;\n    var barColor = isSelected ? task.styles.backgroundSelectedColor : task.styles.backgroundColor;\n    var processColor = isSelected ? task.styles.progressSelectedColor : task.styles.progressColor;\n    var projectWith = task.x2 - task.x1;\n    var projectLeftTriangle = [\n        task.x1,\n        task.y + task.height / 2 - 1,\n        task.x1,\n        task.y + task.height,\n        task.x1 + 15,\n        task.y + task.height / 2 - 1\n    ].join(\",\");\n    var projectRightTriangle = [\n        task.x2,\n        task.y + task.height / 2 - 1,\n        task.x2,\n        task.y + task.height,\n        task.x2 - 15,\n        task.y + task.height / 2 - 1\n    ].join(\",\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        tabIndex: 0,\n        className: styles$8.projectWrapper\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        fill: barColor,\n        x: task.x1,\n        width: projectWith,\n        y: task.y,\n        height: task.height,\n        rx: task.barCornerRadius,\n        ry: task.barCornerRadius,\n        className: styles$8.projectBackground\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        x: task.progressX,\n        width: task.progressWidth,\n        y: task.y,\n        height: task.height,\n        ry: task.barCornerRadius,\n        rx: task.barCornerRadius,\n        fill: processColor\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"rect\", {\n        fill: barColor,\n        x: task.x1,\n        width: projectWith,\n        y: task.y,\n        height: task.height / 2,\n        rx: task.barCornerRadius,\n        ry: task.barCornerRadius,\n        className: styles$8.projectTop\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"polygon\", {\n        className: styles$8.projectTop,\n        points: projectLeftTriangle,\n        fill: barColor\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"polygon\", {\n        className: styles$8.projectTop,\n        points: projectRightTriangle,\n        fill: barColor\n    }));\n};\nvar style = {\n    \"barLabel\": \"_3zRJQ\",\n    \"barLabelOutside\": \"_3KcaM\"\n};\nvar TaskItem = function TaskItem(props) {\n    var _props = _extends({}, props), task = _props.task, arrowIndent = _props.arrowIndent, isDelete = _props.isDelete, taskHeight = _props.taskHeight, isSelected = _props.isSelected, rtl = _props.rtl, onEventStart = _props.onEventStart;\n    var textRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null)), taskItem = _useState[0], setTaskItem = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), isTextInside = _useState2[0], setIsTextInside = _useState2[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        switch(task.typeInternal){\n            case \"milestone\":\n                setTaskItem(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Milestone, Object.assign({}, props)));\n                break;\n            case \"project\":\n                setTaskItem(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Project, Object.assign({}, props)));\n                break;\n            case \"smalltask\":\n                setTaskItem(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(BarSmall, Object.assign({}, props)));\n                break;\n            default:\n                setTaskItem(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Bar, Object.assign({}, props)));\n                break;\n        }\n    }, [\n        task,\n        isSelected\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (textRef.current) {\n            setIsTextInside(textRef.current.getBBox().width < task.x2 - task.x1);\n        }\n    }, [\n        textRef,\n        task\n    ]);\n    var getX = function getX() {\n        var width = task.x2 - task.x1;\n        var hasChild = task.barChildren.length > 0;\n        if (isTextInside) {\n            return task.x1 + width * 0.5;\n        }\n        if (rtl && textRef.current) {\n            return task.x1 - textRef.current.getBBox().width - arrowIndent * +hasChild - arrowIndent * 0.2;\n        } else {\n            return task.x1 + width + arrowIndent * +hasChild + arrowIndent * 0.2;\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        onKeyDown: function onKeyDown(e) {\n            switch(e.key){\n                case \"Delete\":\n                    {\n                        if (isDelete) onEventStart(\"delete\", task, e);\n                        break;\n                    }\n            }\n            e.stopPropagation();\n        },\n        onMouseEnter: function onMouseEnter(e) {\n            onEventStart(\"mouseenter\", task, e);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n            onEventStart(\"mouseleave\", task, e);\n        },\n        onDoubleClick: function onDoubleClick(e) {\n            onEventStart(\"dblclick\", task, e);\n        },\n        onClick: function onClick(e) {\n            onEventStart(\"click\", task, e);\n        },\n        onFocus: function onFocus() {\n            onEventStart(\"select\", task);\n        }\n    }, taskItem, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"text\", {\n        x: getX(),\n        y: task.y + taskHeight * 0.5,\n        className: isTextInside ? style.barLabel : style.barLabelOutside,\n        ref: textRef\n    }, task.name));\n};\nvar TaskGanttContent = function TaskGanttContent(_ref) {\n    var _svg$current;\n    var tasks = _ref.tasks, dates = _ref.dates, ganttEvent = _ref.ganttEvent, selectedTask = _ref.selectedTask, rowHeight = _ref.rowHeight, columnWidth = _ref.columnWidth, timeStep = _ref.timeStep, svg = _ref.svg, taskHeight = _ref.taskHeight, arrowColor = _ref.arrowColor, arrowIndent = _ref.arrowIndent, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rtl = _ref.rtl, setGanttEvent = _ref.setGanttEvent, setFailedTask = _ref.setFailedTask, setSelectedTask = _ref.setSelectedTask, onDateChange = _ref.onDateChange, onProgressChange = _ref.onProgressChange, onDoubleClick = _ref.onDoubleClick, onClick = _ref.onClick, onDelete = _ref.onDelete;\n    var point = svg === null || svg === void 0 ? void 0 : (_svg$current = svg.current) === null || _svg$current === void 0 ? void 0 : _svg$current.createSVGPoint();\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), xStep = _useState[0], setXStep = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), initEventX1Delta = _useState2[0], setInitEventX1Delta = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isMoving = _useState3[0], setIsMoving = _useState3[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var dateDelta = dates[1].getTime() - dates[0].getTime() - dates[1].getTimezoneOffset() * 60 * 1000 + dates[0].getTimezoneOffset() * 60 * 1000;\n        var newXStep = timeStep * columnWidth / dateDelta;\n        setXStep(newXStep);\n    }, [\n        columnWidth,\n        dates,\n        timeStep\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var handleMouseMove = function handleMouseMove(event) {\n            try {\n                var _svg$current$getScree;\n                if (!ganttEvent.changedTask || !point || !(svg !== null && svg !== void 0 && svg.current)) return Promise.resolve();\n                event.preventDefault();\n                point.x = event.clientX;\n                var cursor = point.matrixTransform(svg === null || svg === void 0 ? void 0 : (_svg$current$getScree = svg.current.getScreenCTM()) === null || _svg$current$getScree === void 0 ? void 0 : _svg$current$getScree.inverse());\n                var _handleTaskBySVGMouse = handleTaskBySVGMouseEvent(cursor.x, ganttEvent.action, ganttEvent.changedTask, xStep, timeStep, initEventX1Delta, rtl), isChanged = _handleTaskBySVGMouse.isChanged, changedTask = _handleTaskBySVGMouse.changedTask;\n                if (isChanged) {\n                    setGanttEvent({\n                        action: ganttEvent.action,\n                        changedTask: changedTask\n                    });\n                }\n                return Promise.resolve();\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        var handleMouseUp = function handleMouseUp(event) {\n            try {\n                var _svg$current$getScree2;\n                var _temp6 = function _temp6() {\n                    if (!operationSuccess) {\n                        setFailedTask(originalSelectedTask);\n                    }\n                };\n                var action = ganttEvent.action, originalSelectedTask = ganttEvent.originalSelectedTask, changedTask = ganttEvent.changedTask;\n                if (!changedTask || !point || !(svg !== null && svg !== void 0 && svg.current) || !originalSelectedTask) return Promise.resolve();\n                event.preventDefault();\n                point.x = event.clientX;\n                var cursor = point.matrixTransform(svg === null || svg === void 0 ? void 0 : (_svg$current$getScree2 = svg.current.getScreenCTM()) === null || _svg$current$getScree2 === void 0 ? void 0 : _svg$current$getScree2.inverse());\n                var _handleTaskBySVGMouse2 = handleTaskBySVGMouseEvent(cursor.x, action, changedTask, xStep, timeStep, initEventX1Delta, rtl), newChangedTask = _handleTaskBySVGMouse2.changedTask;\n                var isNotLikeOriginal = originalSelectedTask.start !== newChangedTask.start || originalSelectedTask.end !== newChangedTask.end || originalSelectedTask.progress !== newChangedTask.progress;\n                svg.current.removeEventListener(\"mousemove\", handleMouseMove);\n                svg.current.removeEventListener(\"mouseup\", handleMouseUp);\n                setGanttEvent({\n                    action: \"\"\n                });\n                setIsMoving(false);\n                var operationSuccess = true;\n                var _temp7 = function() {\n                    if ((action === \"move\" || action === \"end\" || action === \"start\") && onDateChange && isNotLikeOriginal) {\n                        var _temp8 = _catch(function() {\n                            return Promise.resolve(onDateChange(newChangedTask, newChangedTask.barChildren)).then(function(result) {\n                                if (result !== undefined) {\n                                    operationSuccess = result;\n                                }\n                            });\n                        }, function() {\n                            operationSuccess = false;\n                        });\n                        if (_temp8 && _temp8.then) return _temp8.then(function() {});\n                    } else {\n                        var _temp9 = function() {\n                            if (onProgressChange && isNotLikeOriginal) {\n                                var _temp10 = _catch(function() {\n                                    return Promise.resolve(onProgressChange(newChangedTask, newChangedTask.barChildren)).then(function(result) {\n                                        if (result !== undefined) {\n                                            operationSuccess = result;\n                                        }\n                                    });\n                                }, function() {\n                                    operationSuccess = false;\n                                });\n                                if (_temp10 && _temp10.then) return _temp10.then(function() {});\n                            }\n                        }();\n                        if (_temp9 && _temp9.then) return _temp9.then(function() {});\n                    }\n                }();\n                return Promise.resolve(_temp7 && _temp7.then ? _temp7.then(_temp6) : _temp6(_temp7));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        if (!isMoving && (ganttEvent.action === \"move\" || ganttEvent.action === \"end\" || ganttEvent.action === \"start\" || ganttEvent.action === \"progress\") && svg !== null && svg !== void 0 && svg.current) {\n            svg.current.addEventListener(\"mousemove\", handleMouseMove);\n            svg.current.addEventListener(\"mouseup\", handleMouseUp);\n            setIsMoving(true);\n        }\n    }, [\n        ganttEvent,\n        xStep,\n        initEventX1Delta,\n        onProgressChange,\n        timeStep,\n        onDateChange,\n        svg,\n        isMoving,\n        point,\n        rtl,\n        setFailedTask,\n        setGanttEvent\n    ]);\n    var handleBarEventStart = function handleBarEventStart(action, task, event) {\n        try {\n            return Promise.resolve(function() {\n                if (!event) {\n                    if (action === \"select\") {\n                        setSelectedTask(task.id);\n                    }\n                } else return function() {\n                    if (isKeyboardEvent(event)) {\n                        var _temp14 = function() {\n                            if (action === \"delete\") {\n                                var _temp15 = function() {\n                                    if (onDelete) {\n                                        var _temp16 = _catch(function() {\n                                            return Promise.resolve(onDelete(task)).then(function(result) {\n                                                if (result !== undefined && result) {\n                                                    setGanttEvent({\n                                                        action: action,\n                                                        changedTask: task\n                                                    });\n                                                }\n                                            });\n                                        }, function(error) {\n                                            console.error(\"Error on Delete. \" + error);\n                                        });\n                                        if (_temp16 && _temp16.then) return _temp16.then(function() {});\n                                    }\n                                }();\n                                if (_temp15 && _temp15.then) return _temp15.then(function() {});\n                            }\n                        }();\n                        if (_temp14 && _temp14.then) return _temp14.then(function() {});\n                    } else if (action === \"mouseenter\") {\n                        if (!ganttEvent.action) {\n                            setGanttEvent({\n                                action: action,\n                                changedTask: task,\n                                originalSelectedTask: task\n                            });\n                        }\n                    } else if (action === \"mouseleave\") {\n                        if (ganttEvent.action === \"mouseenter\") {\n                            setGanttEvent({\n                                action: \"\"\n                            });\n                        }\n                    } else if (action === \"dblclick\") {\n                        !!onDoubleClick && onDoubleClick(task);\n                    } else if (action === \"click\") {\n                        !!onClick && onClick(task);\n                    } else if (action === \"move\") {\n                        var _svg$current$getScree3;\n                        if (!(svg !== null && svg !== void 0 && svg.current) || !point) return;\n                        point.x = event.clientX;\n                        var cursor = point.matrixTransform((_svg$current$getScree3 = svg.current.getScreenCTM()) === null || _svg$current$getScree3 === void 0 ? void 0 : _svg$current$getScree3.inverse());\n                        setInitEventX1Delta(cursor.x - task.x1);\n                        setGanttEvent({\n                            action: action,\n                            changedTask: task,\n                            originalSelectedTask: task\n                        });\n                    } else {\n                        setGanttEvent({\n                            action: action,\n                            changedTask: task,\n                            originalSelectedTask: task\n                        });\n                    }\n                }();\n            }());\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"content\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"arrows\",\n        fill: arrowColor,\n        stroke: arrowColor\n    }, tasks.map(function(task) {\n        return task.barChildren.map(function(child) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Arrow, {\n                key: \"Arrow from \" + task.id + \" to \" + tasks[child.index].id,\n                taskFrom: task,\n                taskTo: tasks[child.index],\n                rowHeight: rowHeight,\n                taskHeight: taskHeight,\n                arrowIndent: arrowIndent,\n                rtl: rtl\n            });\n        });\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        className: \"bar\",\n        fontFamily: fontFamily,\n        fontSize: fontSize\n    }, tasks.map(function(task) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskItem, {\n            task: task,\n            arrowIndent: arrowIndent,\n            taskHeight: taskHeight,\n            isProgressChangeable: !!onProgressChange && !task.isDisabled,\n            isDateChangeable: !!onDateChange && !task.isDisabled,\n            isDelete: !task.isDisabled,\n            onEventStart: handleBarEventStart,\n            key: task.id,\n            isSelected: !!selectedTask && task.id === selectedTask.id,\n            rtl: rtl\n        });\n    })));\n};\nvar styles$9 = {\n    \"ganttVerticalContainer\": \"_CZjuD\",\n    \"horizontalContainer\": \"_2B2zv\",\n    \"wrapper\": \"_3eULf\"\n};\nvar TaskGantt = function TaskGantt(_ref) {\n    var gridProps = _ref.gridProps, calendarProps = _ref.calendarProps, barProps = _ref.barProps, ganttHeight = _ref.ganttHeight, scrollY = _ref.scrollY, scrollX = _ref.scrollX;\n    var ganttSVGRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var horizontalContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var verticalGanttContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var newBarProps = _extends({}, barProps, {\n        svg: ganttSVGRef\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (horizontalContainerRef.current) {\n            horizontalContainerRef.current.scrollTop = scrollY;\n        }\n    }, [\n        scrollY\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (verticalGanttContainerRef.current) {\n            verticalGanttContainerRef.current.scrollLeft = scrollX;\n        }\n    }, [\n        scrollX\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles$9.ganttVerticalContainer,\n        ref: verticalGanttContainerRef,\n        dir: \"ltr\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: gridProps.svgWidth,\n        height: calendarProps.headerHeight,\n        fontFamily: barProps.fontFamily\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Calendar, Object.assign({}, calendarProps))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: horizontalContainerRef,\n        className: styles$9.horizontalContainer,\n        style: ganttHeight ? {\n            height: ganttHeight,\n            width: gridProps.svgWidth\n        } : {\n            width: gridProps.svgWidth\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: gridProps.svgWidth,\n        height: barProps.rowHeight * barProps.tasks.length,\n        fontFamily: barProps.fontFamily,\n        ref: ganttSVGRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Grid, Object.assign({}, gridProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskGanttContent, Object.assign({}, newBarProps)))));\n};\nvar styles$a = {\n    \"scrollWrapper\": \"_2k9Ys\",\n    \"scroll\": \"_19jgW\"\n};\nvar HorizontalScroll = function HorizontalScroll(_ref) {\n    var scroll = _ref.scroll, svgWidth = _ref.svgWidth, taskListWidth = _ref.taskListWidth, rtl = _ref.rtl, onScroll = _ref.onScroll;\n    var scrollRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (scrollRef.current) {\n            scrollRef.current.scrollLeft = scroll;\n        }\n    }, [\n        scroll\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        dir: \"ltr\",\n        style: {\n            margin: rtl ? \"0px \" + taskListWidth + \"px 0px 0px\" : \"0px 0px 0px \" + taskListWidth + \"px\"\n        },\n        className: styles$a.scrollWrapper,\n        onScroll: onScroll,\n        ref: scrollRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            width: svgWidth\n        },\n        className: styles$a.scroll\n    }));\n};\nvar Gantt = function Gantt(_ref) {\n    var tasks = _ref.tasks, _ref$headerHeight = _ref.headerHeight, headerHeight = _ref$headerHeight === void 0 ? 50 : _ref$headerHeight, _ref$columnWidth = _ref.columnWidth, columnWidth = _ref$columnWidth === void 0 ? 60 : _ref$columnWidth, _ref$listCellWidth = _ref.listCellWidth, listCellWidth = _ref$listCellWidth === void 0 ? \"155px\" : _ref$listCellWidth, _ref$rowHeight = _ref.rowHeight, rowHeight = _ref$rowHeight === void 0 ? 50 : _ref$rowHeight, _ref$ganttHeight = _ref.ganttHeight, ganttHeight = _ref$ganttHeight === void 0 ? 0 : _ref$ganttHeight, _ref$viewMode = _ref.viewMode, viewMode = _ref$viewMode === void 0 ? ViewMode.Day : _ref$viewMode, _ref$preStepsCount = _ref.preStepsCount, preStepsCount = _ref$preStepsCount === void 0 ? 1 : _ref$preStepsCount, _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? \"en-GB\" : _ref$locale, _ref$barFill = _ref.barFill, barFill = _ref$barFill === void 0 ? 60 : _ref$barFill, _ref$barCornerRadius = _ref.barCornerRadius, barCornerRadius = _ref$barCornerRadius === void 0 ? 3 : _ref$barCornerRadius, _ref$barProgressColor = _ref.barProgressColor, barProgressColor = _ref$barProgressColor === void 0 ? \"#a3a3ff\" : _ref$barProgressColor, _ref$barProgressSelec = _ref.barProgressSelectedColor, barProgressSelectedColor = _ref$barProgressSelec === void 0 ? \"#8282f5\" : _ref$barProgressSelec, _ref$barBackgroundCol = _ref.barBackgroundColor, barBackgroundColor = _ref$barBackgroundCol === void 0 ? \"#b8c2cc\" : _ref$barBackgroundCol, _ref$barBackgroundSel = _ref.barBackgroundSelectedColor, barBackgroundSelectedColor = _ref$barBackgroundSel === void 0 ? \"#aeb8c2\" : _ref$barBackgroundSel, _ref$projectProgressC = _ref.projectProgressColor, projectProgressColor = _ref$projectProgressC === void 0 ? \"#7db59a\" : _ref$projectProgressC, _ref$projectProgressS = _ref.projectProgressSelectedColor, projectProgressSelectedColor = _ref$projectProgressS === void 0 ? \"#59a985\" : _ref$projectProgressS, _ref$projectBackgroun = _ref.projectBackgroundColor, projectBackgroundColor = _ref$projectBackgroun === void 0 ? \"#fac465\" : _ref$projectBackgroun, _ref$projectBackgroun2 = _ref.projectBackgroundSelectedColor, projectBackgroundSelectedColor = _ref$projectBackgroun2 === void 0 ? \"#f7bb53\" : _ref$projectBackgroun2, _ref$milestoneBackgro = _ref.milestoneBackgroundColor, milestoneBackgroundColor = _ref$milestoneBackgro === void 0 ? \"#f1c453\" : _ref$milestoneBackgro, _ref$milestoneBackgro2 = _ref.milestoneBackgroundSelectedColor, milestoneBackgroundSelectedColor = _ref$milestoneBackgro2 === void 0 ? \"#f29e4c\" : _ref$milestoneBackgro2, _ref$rtl = _ref.rtl, rtl = _ref$rtl === void 0 ? false : _ref$rtl, _ref$handleWidth = _ref.handleWidth, handleWidth = _ref$handleWidth === void 0 ? 8 : _ref$handleWidth, _ref$timeStep = _ref.timeStep, timeStep = _ref$timeStep === void 0 ? 300000 : _ref$timeStep, _ref$arrowColor = _ref.arrowColor, arrowColor = _ref$arrowColor === void 0 ? \"grey\" : _ref$arrowColor, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\" : _ref$fontFamily, _ref$fontSize = _ref.fontSize, fontSize = _ref$fontSize === void 0 ? \"14px\" : _ref$fontSize, _ref$arrowIndent = _ref.arrowIndent, arrowIndent = _ref$arrowIndent === void 0 ? 20 : _ref$arrowIndent, _ref$todayColor = _ref.todayColor, todayColor = _ref$todayColor === void 0 ? \"rgba(252, 248, 227, 0.5)\" : _ref$todayColor, viewDate = _ref.viewDate, _ref$TooltipContent = _ref.TooltipContent, TooltipContent = _ref$TooltipContent === void 0 ? StandardTooltipContent : _ref$TooltipContent, _ref$TaskListHeader = _ref.TaskListHeader, TaskListHeader = _ref$TaskListHeader === void 0 ? TaskListHeaderDefault : _ref$TaskListHeader, _ref$TaskListTable = _ref.TaskListTable, TaskListTable = _ref$TaskListTable === void 0 ? TaskListTableDefault : _ref$TaskListTable, onDateChange = _ref.onDateChange, onProgressChange = _ref.onProgressChange, onDoubleClick = _ref.onDoubleClick, onClick = _ref.onClick, onDelete = _ref.onDelete, onSelect = _ref.onSelect, onExpanderClick = _ref.onExpanderClick;\n    var wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var taskListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        var _ganttDateRange = ganttDateRange(tasks, viewMode, preStepsCount), startDate = _ganttDateRange[0], endDate = _ganttDateRange[1];\n        return {\n            viewMode: viewMode,\n            dates: seedDates(startDate, endDate, viewMode)\n        };\n    }), dateSetup = _useState[0], setDateSetup = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined), currentViewDate = _useState2[0], setCurrentViewDate = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), taskListWidth = _useState3[0], setTaskListWidth = _useState3[1];\n    var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), svgContainerWidth = _useState4[0], setSvgContainerWidth = _useState4[1];\n    var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(ganttHeight), svgContainerHeight = _useState5[0], setSvgContainerHeight = _useState5[1];\n    var _useState6 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), barTasks = _useState6[0], setBarTasks = _useState6[1];\n    var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        action: \"\"\n    }), ganttEvent = _useState7[0], setGanttEvent = _useState7[1];\n    var taskHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return rowHeight * barFill / 100;\n    }, [\n        rowHeight,\n        barFill\n    ]);\n    var _useState8 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), selectedTask = _useState8[0], setSelectedTask = _useState8[1];\n    var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), failedTask = _useState9[0], setFailedTask = _useState9[1];\n    var svgWidth = dateSetup.dates.length * columnWidth;\n    var ganttFullHeight = barTasks.length * rowHeight;\n    var _useState10 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), scrollY = _useState10[0], setScrollY = _useState10[1];\n    var _useState11 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1), scrollX = _useState11[0], setScrollX = _useState11[1];\n    var _useState12 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), ignoreScrollEvent = _useState12[0], setIgnoreScrollEvent = _useState12[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var filteredTasks;\n        if (onExpanderClick) {\n            filteredTasks = removeHiddenTasks(tasks);\n        } else {\n            filteredTasks = tasks;\n        }\n        filteredTasks = filteredTasks.sort(sortTasks);\n        var _ganttDateRange2 = ganttDateRange(filteredTasks, viewMode, preStepsCount), startDate = _ganttDateRange2[0], endDate = _ganttDateRange2[1];\n        var newDates = seedDates(startDate, endDate, viewMode);\n        if (rtl) {\n            newDates = newDates.reverse();\n            if (scrollX === -1) {\n                setScrollX(newDates.length * columnWidth);\n            }\n        }\n        setDateSetup({\n            dates: newDates,\n            viewMode: viewMode\n        });\n        setBarTasks(convertToBarTasks(filteredTasks, newDates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor));\n    }, [\n        tasks,\n        viewMode,\n        preStepsCount,\n        rowHeight,\n        barCornerRadius,\n        columnWidth,\n        taskHeight,\n        handleWidth,\n        barProgressColor,\n        barProgressSelectedColor,\n        barBackgroundColor,\n        barBackgroundSelectedColor,\n        projectProgressColor,\n        projectProgressSelectedColor,\n        projectBackgroundColor,\n        projectBackgroundSelectedColor,\n        milestoneBackgroundColor,\n        milestoneBackgroundSelectedColor,\n        rtl,\n        scrollX,\n        onExpanderClick\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (viewMode === dateSetup.viewMode && (viewDate && !currentViewDate || viewDate && (currentViewDate === null || currentViewDate === void 0 ? void 0 : currentViewDate.valueOf()) !== viewDate.valueOf())) {\n            var dates = dateSetup.dates;\n            var index = dates.findIndex(function(d, i) {\n                return viewDate.valueOf() >= d.valueOf() && i + 1 !== dates.length && viewDate.valueOf() < dates[i + 1].valueOf();\n            });\n            if (index === -1) {\n                return;\n            }\n            setCurrentViewDate(viewDate);\n            setScrollX(columnWidth * index);\n        }\n    }, [\n        viewDate,\n        columnWidth,\n        dateSetup.dates,\n        dateSetup.viewMode,\n        viewMode,\n        currentViewDate,\n        setCurrentViewDate\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var changedTask = ganttEvent.changedTask, action = ganttEvent.action;\n        if (changedTask) {\n            if (action === \"delete\") {\n                setGanttEvent({\n                    action: \"\"\n                });\n                setBarTasks(barTasks.filter(function(t) {\n                    return t.id !== changedTask.id;\n                }));\n            } else if (action === \"move\" || action === \"end\" || action === \"start\" || action === \"progress\") {\n                var prevStateTask = barTasks.find(function(t) {\n                    return t.id === changedTask.id;\n                });\n                if (prevStateTask && (prevStateTask.start.getTime() !== changedTask.start.getTime() || prevStateTask.end.getTime() !== changedTask.end.getTime() || prevStateTask.progress !== changedTask.progress)) {\n                    var newTaskList = barTasks.map(function(t) {\n                        return t.id === changedTask.id ? changedTask : t;\n                    });\n                    setBarTasks(newTaskList);\n                }\n            }\n        }\n    }, [\n        ganttEvent,\n        barTasks\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (failedTask) {\n            setBarTasks(barTasks.map(function(t) {\n                return t.id !== failedTask.id ? t : failedTask;\n            }));\n            setFailedTask(null);\n        }\n    }, [\n        failedTask,\n        barTasks\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!listCellWidth) {\n            setTaskListWidth(0);\n        }\n        if (taskListRef.current) {\n            setTaskListWidth(taskListRef.current.offsetWidth);\n        }\n    }, [\n        taskListRef,\n        listCellWidth\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (wrapperRef.current) {\n            setSvgContainerWidth(wrapperRef.current.offsetWidth - taskListWidth);\n        }\n    }, [\n        wrapperRef,\n        taskListWidth\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (ganttHeight) {\n            setSvgContainerHeight(ganttHeight + headerHeight);\n        } else {\n            setSvgContainerHeight(tasks.length * rowHeight + headerHeight);\n        }\n    }, [\n        ganttHeight,\n        tasks,\n        headerHeight,\n        rowHeight\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _wrapperRef$current;\n        var handleWheel = function handleWheel(event) {\n            if (event.shiftKey || event.deltaX) {\n                var scrollMove = event.deltaX ? event.deltaX : event.deltaY;\n                var newScrollX = scrollX + scrollMove;\n                if (newScrollX < 0) {\n                    newScrollX = 0;\n                } else if (newScrollX > svgWidth) {\n                    newScrollX = svgWidth;\n                }\n                setScrollX(newScrollX);\n                event.preventDefault();\n            } else if (ganttHeight) {\n                var newScrollY = scrollY + event.deltaY;\n                if (newScrollY < 0) {\n                    newScrollY = 0;\n                } else if (newScrollY > ganttFullHeight - ganttHeight) {\n                    newScrollY = ganttFullHeight - ganttHeight;\n                }\n                if (newScrollY !== scrollY) {\n                    setScrollY(newScrollY);\n                    event.preventDefault();\n                }\n            }\n            setIgnoreScrollEvent(true);\n        };\n        (_wrapperRef$current = wrapperRef.current) === null || _wrapperRef$current === void 0 ? void 0 : _wrapperRef$current.addEventListener(\"wheel\", handleWheel, {\n            passive: false\n        });\n        return function() {\n            var _wrapperRef$current2;\n            (_wrapperRef$current2 = wrapperRef.current) === null || _wrapperRef$current2 === void 0 ? void 0 : _wrapperRef$current2.removeEventListener(\"wheel\", handleWheel);\n        };\n    }, [\n        wrapperRef,\n        scrollY,\n        scrollX,\n        ganttHeight,\n        svgWidth,\n        rtl,\n        ganttFullHeight\n    ]);\n    var handleScrollY = function handleScrollY(event) {\n        if (scrollY !== event.currentTarget.scrollTop && !ignoreScrollEvent) {\n            setScrollY(event.currentTarget.scrollTop);\n            setIgnoreScrollEvent(true);\n        } else {\n            setIgnoreScrollEvent(false);\n        }\n    };\n    var handleScrollX = function handleScrollX(event) {\n        if (scrollX !== event.currentTarget.scrollLeft && !ignoreScrollEvent) {\n            setScrollX(event.currentTarget.scrollLeft);\n            setIgnoreScrollEvent(true);\n        } else {\n            setIgnoreScrollEvent(false);\n        }\n    };\n    var handleKeyDown = function handleKeyDown(event) {\n        event.preventDefault();\n        var newScrollY = scrollY;\n        var newScrollX = scrollX;\n        var isX = true;\n        switch(event.key){\n            case \"Down\":\n            case \"ArrowDown\":\n                newScrollY += rowHeight;\n                isX = false;\n                break;\n            case \"Up\":\n            case \"ArrowUp\":\n                newScrollY -= rowHeight;\n                isX = false;\n                break;\n            case \"Left\":\n            case \"ArrowLeft\":\n                newScrollX -= columnWidth;\n                break;\n            case \"Right\":\n            case \"ArrowRight\":\n                newScrollX += columnWidth;\n                break;\n        }\n        if (isX) {\n            if (newScrollX < 0) {\n                newScrollX = 0;\n            } else if (newScrollX > svgWidth) {\n                newScrollX = svgWidth;\n            }\n            setScrollX(newScrollX);\n        } else {\n            if (newScrollY < 0) {\n                newScrollY = 0;\n            } else if (newScrollY > ganttFullHeight - ganttHeight) {\n                newScrollY = ganttFullHeight - ganttHeight;\n            }\n            setScrollY(newScrollY);\n        }\n        setIgnoreScrollEvent(true);\n    };\n    var handleSelectedTask = function handleSelectedTask(taskId) {\n        var newSelectedTask = barTasks.find(function(t) {\n            return t.id === taskId;\n        });\n        var oldSelectedTask = barTasks.find(function(t) {\n            return !!selectedTask && t.id === selectedTask.id;\n        });\n        if (onSelect) {\n            if (oldSelectedTask) {\n                onSelect(oldSelectedTask, false);\n            }\n            if (newSelectedTask) {\n                onSelect(newSelectedTask, true);\n            }\n        }\n        setSelectedTask(newSelectedTask);\n    };\n    var handleExpanderClick = function handleExpanderClick(task) {\n        if (onExpanderClick && task.hideChildren !== undefined) {\n            onExpanderClick(_extends({}, task, {\n                hideChildren: !task.hideChildren\n            }));\n        }\n    };\n    var gridProps = {\n        columnWidth: columnWidth,\n        svgWidth: svgWidth,\n        tasks: tasks,\n        rowHeight: rowHeight,\n        dates: dateSetup.dates,\n        todayColor: todayColor,\n        rtl: rtl\n    };\n    var calendarProps = {\n        dateSetup: dateSetup,\n        locale: locale,\n        viewMode: viewMode,\n        headerHeight: headerHeight,\n        columnWidth: columnWidth,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        rtl: rtl\n    };\n    var barProps = {\n        tasks: barTasks,\n        dates: dateSetup.dates,\n        ganttEvent: ganttEvent,\n        selectedTask: selectedTask,\n        rowHeight: rowHeight,\n        taskHeight: taskHeight,\n        columnWidth: columnWidth,\n        arrowColor: arrowColor,\n        timeStep: timeStep,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        arrowIndent: arrowIndent,\n        svgWidth: svgWidth,\n        rtl: rtl,\n        setGanttEvent: setGanttEvent,\n        setFailedTask: setFailedTask,\n        setSelectedTask: handleSelectedTask,\n        onDateChange: onDateChange,\n        onProgressChange: onProgressChange,\n        onDoubleClick: onDoubleClick,\n        onClick: onClick,\n        onDelete: onDelete\n    };\n    var tableProps = {\n        rowHeight: rowHeight,\n        rowWidth: listCellWidth,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        tasks: barTasks,\n        locale: locale,\n        headerHeight: headerHeight,\n        scrollY: scrollY,\n        ganttHeight: ganttHeight,\n        horizontalContainerClass: styles$9.horizontalContainer,\n        selectedTask: selectedTask,\n        taskListRef: taskListRef,\n        setSelectedTask: handleSelectedTask,\n        onExpanderClick: handleExpanderClick,\n        TaskListHeader: TaskListHeader,\n        TaskListTable: TaskListTable\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles$9.wrapper,\n        onKeyDown: handleKeyDown,\n        tabIndex: 0,\n        ref: wrapperRef\n    }, listCellWidth && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskList, Object.assign({}, tableProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TaskGantt, {\n        gridProps: gridProps,\n        calendarProps: calendarProps,\n        barProps: barProps,\n        ganttHeight: ganttHeight,\n        scrollY: scrollY,\n        scrollX: scrollX\n    }), ganttEvent.changedTask && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tooltip, {\n        arrowIndent: arrowIndent,\n        rowHeight: rowHeight,\n        svgContainerHeight: svgContainerHeight,\n        svgContainerWidth: svgContainerWidth,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        scrollX: scrollX,\n        scrollY: scrollY,\n        task: ganttEvent.changedTask,\n        headerHeight: headerHeight,\n        taskListWidth: taskListWidth,\n        TooltipContent: TooltipContent,\n        rtl: rtl,\n        svgWidth: svgWidth\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(VerticalScroll, {\n        ganttFullHeight: ganttFullHeight,\n        ganttHeight: ganttHeight,\n        headerHeight: headerHeight,\n        scroll: scrollY,\n        onScroll: handleScrollY,\n        rtl: rtl\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HorizontalScroll, {\n        svgWidth: svgWidth,\n        taskListWidth: taskListWidth,\n        scroll: scrollX,\n        rtl: rtl,\n        onScroll: handleScrollX\n    }));\n};\n //# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2FudHQtdGFzay1yZWFjdC9kaXN0L2luZGV4Lm1vZGVybi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9FO0FBRXBFLFNBQVNLO0lBQ1BBLFdBQVdDLE9BQU9DLE1BQU0sSUFBSSxTQUFVQyxNQUFNO1FBQzFDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7WUFDekMsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBRXpCLElBQUssSUFBSUksT0FBT0QsT0FBUTtnQkFDdEIsSUFBSU4sT0FBT1EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osUUFBUUMsTUFBTTtvQkFDckRMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7Z0JBQzNCO1lBQ0Y7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7SUFFQSxPQUFPSCxTQUFTWSxLQUFLLENBQUMsSUFBSSxFQUFFUDtBQUM5QjtBQUVBLFNBQVNRLDRCQUE0QkMsQ0FBQyxFQUFFQyxNQUFNO0lBQzVDLElBQUksQ0FBQ0QsR0FBRztJQUNSLElBQUksT0FBT0EsTUFBTSxVQUFVLE9BQU9FLGtCQUFrQkYsR0FBR0M7SUFDdkQsSUFBSUUsSUFBSWhCLE9BQU9RLFNBQVMsQ0FBQ1MsUUFBUSxDQUFDUCxJQUFJLENBQUNHLEdBQUdLLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDcEQsSUFBSUYsTUFBTSxZQUFZSCxFQUFFTSxXQUFXLEVBQUVILElBQUlILEVBQUVNLFdBQVcsQ0FBQ0MsSUFBSTtJQUMzRCxJQUFJSixNQUFNLFNBQVNBLE1BQU0sT0FBTyxPQUFPSyxNQUFNQyxJQUFJLENBQUNUO0lBQ2xELElBQUlHLE1BQU0sZUFBZSwyQ0FBMkNPLElBQUksQ0FBQ1AsSUFBSSxPQUFPRCxrQkFBa0JGLEdBQUdDO0FBQzNHO0FBRUEsU0FBU0Msa0JBQWtCUyxHQUFHLEVBQUVDLEdBQUc7SUFDakMsSUFBSUEsT0FBTyxRQUFR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T0MsTUFBTSxDQUFDLENBQUMsR0FBR3lOLDRCQUFjaE8sMERBQW1CLENBQUM4Z0IsV0FBVztRQUMvR0MsV0FBV0E7UUFDWEMsZUFBZUE7UUFDZkMsVUFBVUE7UUFDVmxVLGFBQWFBO1FBQ2J2QyxTQUFTQTtRQUNURCxTQUFTQTtJQUNYLElBQUlrVCxXQUFXOUYsV0FBVyxrQkFBSTNYLDBEQUFtQixDQUFDbUssU0FBUztRQUN6RE0sYUFBYUE7UUFDYnZCLFdBQVdBO1FBQ1htQixvQkFBb0JBO1FBQ3BCQyxtQkFBbUJBO1FBQ25CeEMsWUFBWUE7UUFDWkMsVUFBVUE7UUFDVndDLFNBQVNBO1FBQ1RDLFNBQVNBO1FBQ1R0RixNQUFNdVksV0FBVzlGLFdBQVc7UUFDNUI5UCxjQUFjQTtRQUNkNkMsZUFBZUE7UUFDZkMsZ0JBQWdCQTtRQUNoQlAsS0FBS0E7UUFDTCtELFVBQVVBO0lBQ1osa0JBQUluTywwREFBbUIsQ0FBQzZNLGdCQUFnQjtRQUN0Q0csaUJBQWlCQTtRQUNqQkQsYUFBYUE7UUFDYmxGLGNBQWNBO1FBQ2RpRixRQUFRdEM7UUFDUnlDLFVBQVUwWjtRQUNWdmMsS0FBS0E7SUFDUCxtQkFBS3BLLDBEQUFtQixDQUFDMmhCLGtCQUFrQjtRQUN6Q3hULFVBQVVBO1FBQ1Z6RCxlQUFlQTtRQUNmb0MsUUFBUXZDO1FBQ1JILEtBQUtBO1FBQ0w2QyxVQUFVNFo7SUFDWjtBQUNGO0FBRTJCLENBQzNCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZC10by1qaXJhLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dhbnR0LXRhc2stcmVhY3QvZGlzdC9pbmRleC5tb2Rlcm4uanM/ZjMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciBWaWV3TW9kZTtcblxuKGZ1bmN0aW9uIChWaWV3TW9kZSkge1xuICBWaWV3TW9kZVtcIkhvdXJcIl0gPSBcIkhvdXJcIjtcbiAgVmlld01vZGVbXCJRdWFydGVyRGF5XCJdID0gXCJRdWFydGVyIERheVwiO1xuICBWaWV3TW9kZVtcIkhhbGZEYXlcIl0gPSBcIkhhbGYgRGF5XCI7XG4gIFZpZXdNb2RlW1wiRGF5XCJdID0gXCJEYXlcIjtcbiAgVmlld01vZGVbXCJXZWVrXCJdID0gXCJXZWVrXCI7XG4gIFZpZXdNb2RlW1wiTW9udGhcIl0gPSBcIk1vbnRoXCI7XG4gIFZpZXdNb2RlW1wiWWVhclwiXSA9IFwiWWVhclwiO1xufSkoVmlld01vZGUgfHwgKFZpZXdNb2RlID0ge30pKTtcblxudmFyIGludGxEVENhY2hlID0ge307XG52YXIgZ2V0Q2FjaGVkRGF0ZVRpbWVGb3JtYXQgPSBmdW5jdGlvbiBnZXRDYWNoZWREYXRlVGltZUZvcm1hdChsb2NTdHJpbmcsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuXG4gIHZhciBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7XG4gIHZhciBkdGYgPSBpbnRsRFRDYWNoZVtrZXldO1xuXG4gIGlmICghZHRmKSB7XG4gICAgZHRmID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsRFRDYWNoZVtrZXldID0gZHRmO1xuICB9XG5cbiAgcmV0dXJuIGR0Zjtcbn07XG52YXIgYWRkVG9EYXRlID0gZnVuY3Rpb24gYWRkVG9EYXRlKGRhdGUsIHF1YW50aXR5LCBzY2FsZSkge1xuICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSArIChzY2FsZSA9PT0gXCJ5ZWFyXCIgPyBxdWFudGl0eSA6IDApLCBkYXRlLmdldE1vbnRoKCkgKyAoc2NhbGUgPT09IFwibW9udGhcIiA/IHF1YW50aXR5IDogMCksIGRhdGUuZ2V0RGF0ZSgpICsgKHNjYWxlID09PSBcImRheVwiID8gcXVhbnRpdHkgOiAwKSwgZGF0ZS5nZXRIb3VycygpICsgKHNjYWxlID09PSBcImhvdXJcIiA/IHF1YW50aXR5IDogMCksIGRhdGUuZ2V0TWludXRlcygpICsgKHNjYWxlID09PSBcIm1pbnV0ZVwiID8gcXVhbnRpdHkgOiAwKSwgZGF0ZS5nZXRTZWNvbmRzKCkgKyAoc2NhbGUgPT09IFwic2Vjb25kXCIgPyBxdWFudGl0eSA6IDApLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpICsgKHNjYWxlID09PSBcIm1pbGxpc2Vjb25kXCIgPyBxdWFudGl0eSA6IDApKTtcbiAgcmV0dXJuIG5ld0RhdGU7XG59O1xudmFyIHN0YXJ0T2ZEYXRlID0gZnVuY3Rpb24gc3RhcnRPZkRhdGUoZGF0ZSwgc2NhbGUpIHtcbiAgdmFyIHNjb3JlcyA9IFtcIm1pbGxpc2Vjb25kXCIsIFwic2Vjb25kXCIsIFwibWludXRlXCIsIFwiaG91clwiLCBcImRheVwiLCBcIm1vbnRoXCIsIFwieWVhclwiXTtcblxuICB2YXIgc2hvdWxkUmVzZXQgPSBmdW5jdGlvbiBzaG91bGRSZXNldChfc2NhbGUpIHtcbiAgICB2YXIgbWF4U2NvcmUgPSBzY29yZXMuaW5kZXhPZihzY2FsZSk7XG4gICAgcmV0dXJuIHNjb3Jlcy5pbmRleE9mKF9zY2FsZSkgPD0gbWF4U2NvcmU7XG4gIH07XG5cbiAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIHNob3VsZFJlc2V0KFwieWVhclwiKSA/IDAgOiBkYXRlLmdldE1vbnRoKCksIHNob3VsZFJlc2V0KFwibW9udGhcIikgPyAxIDogZGF0ZS5nZXREYXRlKCksIHNob3VsZFJlc2V0KFwiZGF5XCIpID8gMCA6IGRhdGUuZ2V0SG91cnMoKSwgc2hvdWxkUmVzZXQoXCJob3VyXCIpID8gMCA6IGRhdGUuZ2V0TWludXRlcygpLCBzaG91bGRSZXNldChcIm1pbnV0ZVwiKSA/IDAgOiBkYXRlLmdldFNlY29uZHMoKSwgc2hvdWxkUmVzZXQoXCJzZWNvbmRcIikgPyAwIDogZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG4gIHJldHVybiBuZXdEYXRlO1xufTtcbnZhciBnYW50dERhdGVSYW5nZSA9IGZ1bmN0aW9uIGdhbnR0RGF0ZVJhbmdlKHRhc2tzLCB2aWV3TW9kZSwgcHJlU3RlcHNDb3VudCkge1xuICB2YXIgbmV3U3RhcnREYXRlID0gdGFza3NbMF0uc3RhcnQ7XG4gIHZhciBuZXdFbmREYXRlID0gdGFza3NbMF0uc3RhcnQ7XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh0YXNrcyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIHRhc2sgPSBfc3RlcC52YWx1ZTtcblxuICAgIGlmICh0YXNrLnN0YXJ0IDwgbmV3U3RhcnREYXRlKSB7XG4gICAgICBuZXdTdGFydERhdGUgPSB0YXNrLnN0YXJ0O1xuICAgIH1cblxuICAgIGlmICh0YXNrLmVuZCA+IG5ld0VuZERhdGUpIHtcbiAgICAgIG5ld0VuZERhdGUgPSB0YXNrLmVuZDtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKHZpZXdNb2RlKSB7XG4gICAgY2FzZSBWaWV3TW9kZS5ZZWFyOlxuICAgICAgbmV3U3RhcnREYXRlID0gYWRkVG9EYXRlKG5ld1N0YXJ0RGF0ZSwgLTEsIFwieWVhclwiKTtcbiAgICAgIG5ld1N0YXJ0RGF0ZSA9IHN0YXJ0T2ZEYXRlKG5ld1N0YXJ0RGF0ZSwgXCJ5ZWFyXCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IGFkZFRvRGF0ZShuZXdFbmREYXRlLCAxLCBcInllYXJcIik7XG4gICAgICBuZXdFbmREYXRlID0gc3RhcnRPZkRhdGUobmV3RW5kRGF0ZSwgXCJ5ZWFyXCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFZpZXdNb2RlLk1vbnRoOlxuICAgICAgbmV3U3RhcnREYXRlID0gYWRkVG9EYXRlKG5ld1N0YXJ0RGF0ZSwgLTEgKiBwcmVTdGVwc0NvdW50LCBcIm1vbnRoXCIpO1xuICAgICAgbmV3U3RhcnREYXRlID0gc3RhcnRPZkRhdGUobmV3U3RhcnREYXRlLCBcIm1vbnRoXCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IGFkZFRvRGF0ZShuZXdFbmREYXRlLCAxLCBcInllYXJcIik7XG4gICAgICBuZXdFbmREYXRlID0gc3RhcnRPZkRhdGUobmV3RW5kRGF0ZSwgXCJ5ZWFyXCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFZpZXdNb2RlLldlZWs6XG4gICAgICBuZXdTdGFydERhdGUgPSBzdGFydE9mRGF0ZShuZXdTdGFydERhdGUsIFwiZGF5XCIpO1xuICAgICAgbmV3U3RhcnREYXRlID0gYWRkVG9EYXRlKGdldE1vbmRheShuZXdTdGFydERhdGUpLCAtNyAqIHByZVN0ZXBzQ291bnQsIFwiZGF5XCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IHN0YXJ0T2ZEYXRlKG5ld0VuZERhdGUsIFwiZGF5XCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IGFkZFRvRGF0ZShuZXdFbmREYXRlLCAxLjUsIFwibW9udGhcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgVmlld01vZGUuRGF5OlxuICAgICAgbmV3U3RhcnREYXRlID0gc3RhcnRPZkRhdGUobmV3U3RhcnREYXRlLCBcImRheVwiKTtcbiAgICAgIG5ld1N0YXJ0RGF0ZSA9IGFkZFRvRGF0ZShuZXdTdGFydERhdGUsIC0xICogcHJlU3RlcHNDb3VudCwgXCJkYXlcIik7XG4gICAgICBuZXdFbmREYXRlID0gc3RhcnRPZkRhdGUobmV3RW5kRGF0ZSwgXCJkYXlcIik7XG4gICAgICBuZXdFbmREYXRlID0gYWRkVG9EYXRlKG5ld0VuZERhdGUsIDE5LCBcImRheVwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBWaWV3TW9kZS5RdWFydGVyRGF5OlxuICAgICAgbmV3U3RhcnREYXRlID0gc3RhcnRPZkRhdGUobmV3U3RhcnREYXRlLCBcImRheVwiKTtcbiAgICAgIG5ld1N0YXJ0RGF0ZSA9IGFkZFRvRGF0ZShuZXdTdGFydERhdGUsIC0xICogcHJlU3RlcHNDb3VudCwgXCJkYXlcIik7XG4gICAgICBuZXdFbmREYXRlID0gc3RhcnRPZkRhdGUobmV3RW5kRGF0ZSwgXCJkYXlcIik7XG4gICAgICBuZXdFbmREYXRlID0gYWRkVG9EYXRlKG5ld0VuZERhdGUsIDY2LCBcImhvdXJcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgVmlld01vZGUuSGFsZkRheTpcbiAgICAgIG5ld1N0YXJ0RGF0ZSA9IHN0YXJ0T2ZEYXRlKG5ld1N0YXJ0RGF0ZSwgXCJkYXlcIik7XG4gICAgICBuZXdTdGFydERhdGUgPSBhZGRUb0RhdGUobmV3U3RhcnREYXRlLCAtMSAqIHByZVN0ZXBzQ291bnQsIFwiZGF5XCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IHN0YXJ0T2ZEYXRlKG5ld0VuZERhdGUsIFwiZGF5XCIpO1xuICAgICAgbmV3RW5kRGF0ZSA9IGFkZFRvRGF0ZShuZXdFbmREYXRlLCAxMDgsIFwiaG91clwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBWaWV3TW9kZS5Ib3VyOlxuICAgICAgbmV3U3RhcnREYXRlID0gc3RhcnRPZkRhdGUobmV3U3RhcnREYXRlLCBcImhvdXJcIik7XG4gICAgICBuZXdTdGFydERhdGUgPSBhZGRUb0RhdGUobmV3U3RhcnREYXRlLCAtMSAqIHByZVN0ZXBzQ291bnQsIFwiaG91clwiKTtcbiAgICAgIG5ld0VuZERhdGUgPSBzdGFydE9mRGF0ZShuZXdFbmREYXRlLCBcImRheVwiKTtcbiAgICAgIG5ld0VuZERhdGUgPSBhZGRUb0RhdGUobmV3RW5kRGF0ZSwgMSwgXCJkYXlcIik7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBbbmV3U3RhcnREYXRlLCBuZXdFbmREYXRlXTtcbn07XG52YXIgc2VlZERhdGVzID0gZnVuY3Rpb24gc2VlZERhdGVzKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgdmlld01vZGUpIHtcbiAgdmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlKTtcbiAgdmFyIGRhdGVzID0gW2N1cnJlbnREYXRlXTtcblxuICB3aGlsZSAoY3VycmVudERhdGUgPCBlbmREYXRlKSB7XG4gICAgc3dpdGNoICh2aWV3TW9kZSkge1xuICAgICAgY2FzZSBWaWV3TW9kZS5ZZWFyOlxuICAgICAgICBjdXJyZW50RGF0ZSA9IGFkZFRvRGF0ZShjdXJyZW50RGF0ZSwgMSwgXCJ5ZWFyXCIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBWaWV3TW9kZS5Nb250aDpcbiAgICAgICAgY3VycmVudERhdGUgPSBhZGRUb0RhdGUoY3VycmVudERhdGUsIDEsIFwibW9udGhcIik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFZpZXdNb2RlLldlZWs6XG4gICAgICAgIGN1cnJlbnREYXRlID0gYWRkVG9EYXRlKGN1cnJlbnREYXRlLCA3LCBcImRheVwiKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgVmlld01vZGUuRGF5OlxuICAgICAgICBjdXJyZW50RGF0ZSA9IGFkZFRvRGF0ZShjdXJyZW50RGF0ZSwgMSwgXCJkYXlcIik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFZpZXdNb2RlLkhhbGZEYXk6XG4gICAgICAgIGN1cnJlbnREYXRlID0gYWRkVG9EYXRlKGN1cnJlbnREYXRlLCAxMiwgXCJob3VyXCIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBWaWV3TW9kZS5RdWFydGVyRGF5OlxuICAgICAgICBjdXJyZW50RGF0ZSA9IGFkZFRvRGF0ZShjdXJyZW50RGF0ZSwgNiwgXCJob3VyXCIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBWaWV3TW9kZS5Ib3VyOlxuICAgICAgICBjdXJyZW50RGF0ZSA9IGFkZFRvRGF0ZShjdXJyZW50RGF0ZSwgMSwgXCJob3VyXCIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkYXRlcy5wdXNoKGN1cnJlbnREYXRlKTtcbiAgfVxuXG4gIHJldHVybiBkYXRlcztcbn07XG52YXIgZ2V0TG9jYWxlTW9udGggPSBmdW5jdGlvbiBnZXRMb2NhbGVNb250aChkYXRlLCBsb2NhbGUpIHtcbiAgdmFyIGJvdHRvbVZhbHVlID0gZ2V0Q2FjaGVkRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgbW9udGg6IFwibG9uZ1wiXG4gIH0pLmZvcm1hdChkYXRlKTtcbiAgYm90dG9tVmFsdWUgPSBib3R0b21WYWx1ZS5yZXBsYWNlKGJvdHRvbVZhbHVlWzBdLCBib3R0b21WYWx1ZVswXS50b0xvY2FsZVVwcGVyQ2FzZSgpKTtcbiAgcmV0dXJuIGJvdHRvbVZhbHVlO1xufTtcbnZhciBnZXRMb2NhbERheU9mV2VlayA9IGZ1bmN0aW9uIGdldExvY2FsRGF5T2ZXZWVrKGRhdGUsIGxvY2FsZSwgZm9ybWF0KSB7XG4gIHZhciBib3R0b21WYWx1ZSA9IGdldENhY2hlZERhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgIHdlZWtkYXk6IGZvcm1hdFxuICB9KS5mb3JtYXQoZGF0ZSk7XG4gIGJvdHRvbVZhbHVlID0gYm90dG9tVmFsdWUucmVwbGFjZShib3R0b21WYWx1ZVswXSwgYm90dG9tVmFsdWVbMF0udG9Mb2NhbGVVcHBlckNhc2UoKSk7XG4gIHJldHVybiBib3R0b21WYWx1ZTtcbn07XG5cbnZhciBnZXRNb25kYXkgPSBmdW5jdGlvbiBnZXRNb25kYXkoZGF0ZSkge1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgdmFyIGRpZmYgPSBkYXRlLmdldERhdGUoKSAtIGRheSArIChkYXkgPT09IDAgPyAtNiA6IDEpO1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS5zZXREYXRlKGRpZmYpKTtcbn07XG5cbnZhciBnZXRXZWVrTnVtYmVySVNPODYwMSA9IGZ1bmN0aW9uIGdldFdlZWtOdW1iZXJJU084NjAxKGRhdGUpIHtcbiAgdmFyIHRtcERhdGUgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG4gIHZhciBkYXlOdW1iZXIgPSAodG1wRGF0ZS5nZXREYXkoKSArIDYpICUgNztcbiAgdG1wRGF0ZS5zZXREYXRlKHRtcERhdGUuZ2V0RGF0ZSgpIC0gZGF5TnVtYmVyICsgMyk7XG4gIHZhciBmaXJzdFRodXJzZGF5ID0gdG1wRGF0ZS52YWx1ZU9mKCk7XG4gIHRtcERhdGUuc2V0TW9udGgoMCwgMSk7XG5cbiAgaWYgKHRtcERhdGUuZ2V0RGF5KCkgIT09IDQpIHtcbiAgICB0bXBEYXRlLnNldE1vbnRoKDAsIDEgKyAoNCAtIHRtcERhdGUuZ2V0RGF5KCkgKyA3KSAlIDcpO1xuICB9XG5cbiAgdmFyIHdlZWtOdW1iZXIgPSAoMSArIE1hdGguY2VpbCgoZmlyc3RUaHVyc2RheSAtIHRtcERhdGUudmFsdWVPZigpKSAvIDYwNDgwMDAwMCkpLnRvU3RyaW5nKCk7XG5cbiAgaWYgKHdlZWtOdW1iZXIubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIFwiMFwiICsgd2Vla051bWJlcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2Vla051bWJlcjtcbiAgfVxufTtcbnZhciBnZXREYXlzSW5Nb250aCA9IGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIDApLmdldERhdGUoKTtcbn07XG5cbnZhciBzdHlsZXMgPSB7XCJnYW50dFRhYmxlXCI6XCJfM195Z0VcIixcImdhbnR0VGFibGVfSGVhZGVyXCI6XCJfMW5CT3RcIixcImdhbnR0VGFibGVfSGVhZGVyU2VwYXJhdG9yXCI6XCJfMmVaelFcIixcImdhbnR0VGFibGVfSGVhZGVySXRlbVwiOlwiX1d1UTBmXCJ9O1xuXG52YXIgVGFza0xpc3RIZWFkZXJEZWZhdWx0ID0gZnVuY3Rpb24gVGFza0xpc3RIZWFkZXJEZWZhdWx0KF9yZWYpIHtcbiAgdmFyIGhlYWRlckhlaWdodCA9IF9yZWYuaGVhZGVySGVpZ2h0LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIHJvd1dpZHRoID0gX3JlZi5yb3dXaWR0aDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmdhbnR0VGFibGUsXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogZm9udFNpemVcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmdhbnR0VGFibGVfSGVhZGVyLFxuICAgIHN0eWxlOiB7XG4gICAgICBoZWlnaHQ6IGhlYWRlckhlaWdodCAtIDJcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmdhbnR0VGFibGVfSGVhZGVySXRlbSxcbiAgICBzdHlsZToge1xuICAgICAgbWluV2lkdGg6IHJvd1dpZHRoXG4gICAgfVxuICB9LCBcIlxceEEwTmFtZVwiKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMuZ2FudHRUYWJsZV9IZWFkZXJTZXBhcmF0b3IsXG4gICAgc3R5bGU6IHtcbiAgICAgIGhlaWdodDogaGVhZGVySGVpZ2h0ICogMC41LFxuICAgICAgbWFyZ2luVG9wOiBoZWFkZXJIZWlnaHQgKiAwLjJcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcy5nYW50dFRhYmxlX0hlYWRlckl0ZW0sXG4gICAgc3R5bGU6IHtcbiAgICAgIG1pbldpZHRoOiByb3dXaWR0aFxuICAgIH1cbiAgfSwgXCJcXHhBMEZyb21cIiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmdhbnR0VGFibGVfSGVhZGVyU2VwYXJhdG9yLFxuICAgIHN0eWxlOiB7XG4gICAgICBoZWlnaHQ6IGhlYWRlckhlaWdodCAqIDAuNSxcbiAgICAgIG1hcmdpblRvcDogaGVhZGVySGVpZ2h0ICogMC4yNVxuICAgIH1cbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmdhbnR0VGFibGVfSGVhZGVySXRlbSxcbiAgICBzdHlsZToge1xuICAgICAgbWluV2lkdGg6IHJvd1dpZHRoXG4gICAgfVxuICB9LCBcIlxceEEwVG9cIikpKTtcbn07XG5cbnZhciBzdHlsZXMkMSA9IHtcInRhc2tMaXN0V3JhcHBlclwiOlwiXzNaYlFUXCIsXCJ0YXNrTGlzdFRhYmxlUm93XCI6XCJfMzRTUzBcIixcInRhc2tMaXN0Q2VsbFwiOlwiXzNsTGszXCIsXCJ0YXNrTGlzdE5hbWVXcmFwcGVyXCI6XCJfbkkxWHdcIixcInRhc2tMaXN0RXhwYW5kZXJcIjpcIl8yUWpFNlwiLFwidGFza0xpc3RFbXB0eUV4cGFuZGVyXCI6XCJfMlRmRWlcIn07XG5cbnZhciBsb2NhbGVEYXRlU3RyaW5nQ2FjaGUgPSB7fTtcblxudmFyIHRvTG9jYWxlRGF0ZVN0cmluZ0ZhY3RvcnkgPSBmdW5jdGlvbiB0b0xvY2FsZURhdGVTdHJpbmdGYWN0b3J5KGxvY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRhdGUsIGRhdGVUaW1lT3B0aW9ucykge1xuICAgIHZhciBrZXkgPSBkYXRlLnRvU3RyaW5nKCk7XG4gICAgdmFyIGxkcyA9IGxvY2FsZURhdGVTdHJpbmdDYWNoZVtrZXldO1xuXG4gICAgaWYgKCFsZHMpIHtcbiAgICAgIGxkcyA9IGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKGxvY2FsZSwgZGF0ZVRpbWVPcHRpb25zKTtcbiAgICAgIGxvY2FsZURhdGVTdHJpbmdDYWNoZVtrZXldID0gbGRzO1xuICAgIH1cblxuICAgIHJldHVybiBsZHM7XG4gIH07XG59O1xuXG52YXIgZGF0ZVRpbWVPcHRpb25zID0ge1xuICB3ZWVrZGF5OiBcInNob3J0XCIsXG4gIHllYXI6IFwibnVtZXJpY1wiLFxuICBtb250aDogXCJsb25nXCIsXG4gIGRheTogXCJudW1lcmljXCJcbn07XG52YXIgVGFza0xpc3RUYWJsZURlZmF1bHQgPSBmdW5jdGlvbiBUYXNrTGlzdFRhYmxlRGVmYXVsdChfcmVmKSB7XG4gIHZhciByb3dIZWlnaHQgPSBfcmVmLnJvd0hlaWdodCxcbiAgICAgIHJvd1dpZHRoID0gX3JlZi5yb3dXaWR0aCxcbiAgICAgIHRhc2tzID0gX3JlZi50YXNrcyxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgIG9uRXhwYW5kZXJDbGljayA9IF9yZWYub25FeHBhbmRlckNsaWNrO1xuICB2YXIgdG9Mb2NhbGVEYXRlU3RyaW5nID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRvTG9jYWxlRGF0ZVN0cmluZ0ZhY3RvcnkobG9jYWxlKTtcbiAgfSwgW2xvY2FsZV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkMS50YXNrTGlzdFdyYXBwZXIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogZm9udFNpemVcbiAgICB9XG4gIH0sIHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgIHZhciBleHBhbmRlclN5bWJvbCA9IFwiXCI7XG5cbiAgICBpZiAodC5oaWRlQ2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICBleHBhbmRlclN5bWJvbCA9IFwi4pa8XCI7XG4gICAgfSBlbHNlIGlmICh0LmhpZGVDaGlsZHJlbiA9PT0gdHJ1ZSkge1xuICAgICAgZXhwYW5kZXJTeW1ib2wgPSBcIuKWtlwiO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDEudGFza0xpc3RUYWJsZVJvdyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGhlaWdodDogcm93SGVpZ2h0XG4gICAgICB9LFxuICAgICAga2V5OiB0LmlkICsgXCJyb3dcIlxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkMS50YXNrTGlzdENlbGwsXG4gICAgICBzdHlsZToge1xuICAgICAgICBtaW5XaWR0aDogcm93V2lkdGgsXG4gICAgICAgIG1heFdpZHRoOiByb3dXaWR0aFxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB0Lm5hbWVcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDEudGFza0xpc3ROYW1lV3JhcHBlclxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBleHBhbmRlclN5bWJvbCA/IHN0eWxlcyQxLnRhc2tMaXN0RXhwYW5kZXIgOiBzdHlsZXMkMS50YXNrTGlzdEVtcHR5RXhwYW5kZXIsXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICByZXR1cm4gb25FeHBhbmRlckNsaWNrKHQpO1xuICAgICAgfVxuICAgIH0sIGV4cGFuZGVyU3ltYm9sKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCB0Lm5hbWUpKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkMS50YXNrTGlzdENlbGwsXG4gICAgICBzdHlsZToge1xuICAgICAgICBtaW5XaWR0aDogcm93V2lkdGgsXG4gICAgICAgIG1heFdpZHRoOiByb3dXaWR0aFxuICAgICAgfVxuICAgIH0sIFwiXFx4QTBcIiwgdG9Mb2NhbGVEYXRlU3RyaW5nKHQuc3RhcnQsIGRhdGVUaW1lT3B0aW9ucykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDEudGFza0xpc3RDZWxsLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbWluV2lkdGg6IHJvd1dpZHRoLFxuICAgICAgICBtYXhXaWR0aDogcm93V2lkdGhcbiAgICAgIH1cbiAgICB9LCBcIlxceEEwXCIsIHRvTG9jYWxlRGF0ZVN0cmluZyh0LmVuZCwgZGF0ZVRpbWVPcHRpb25zKSkpO1xuICB9KSk7XG59O1xuXG52YXIgc3R5bGVzJDIgPSB7XCJ0b29sdGlwRGVmYXVsdENvbnRhaW5lclwiOlwiXzNUNDJlXCIsXCJ0b29sdGlwRGVmYXVsdENvbnRhaW5lclBhcmFncmFwaFwiOlwiXzI5TlRnXCIsXCJ0b29sdGlwRGV0YWlsc0NvbnRhaW5lclwiOlwiXzI1UC1LXCIsXCJ0b29sdGlwRGV0YWlsc0NvbnRhaW5lckhpZGRlblwiOlwiXzNnVkFxXCJ9O1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIFRvb2x0aXAoX3JlZikge1xuICB2YXIgdGFzayA9IF9yZWYudGFzayxcbiAgICAgIHJvd0hlaWdodCA9IF9yZWYucm93SGVpZ2h0LFxuICAgICAgcnRsID0gX3JlZi5ydGwsXG4gICAgICBzdmdDb250YWluZXJIZWlnaHQgPSBfcmVmLnN2Z0NvbnRhaW5lckhlaWdodCxcbiAgICAgIHN2Z0NvbnRhaW5lcldpZHRoID0gX3JlZi5zdmdDb250YWluZXJXaWR0aCxcbiAgICAgIHNjcm9sbFggPSBfcmVmLnNjcm9sbFgsXG4gICAgICBzY3JvbGxZID0gX3JlZi5zY3JvbGxZLFxuICAgICAgYXJyb3dJbmRlbnQgPSBfcmVmLmFycm93SW5kZW50LFxuICAgICAgZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGhlYWRlckhlaWdodCA9IF9yZWYuaGVhZGVySGVpZ2h0LFxuICAgICAgdGFza0xpc3RXaWR0aCA9IF9yZWYudGFza0xpc3RXaWR0aCxcbiAgICAgIFRvb2x0aXBDb250ZW50ID0gX3JlZi5Ub29sdGlwQ29udGVudDtcbiAgdmFyIHRvb2x0aXBSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKDApLFxuICAgICAgcmVsYXRlZFkgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRSZWxhdGVkWSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZVN0YXRlMiA9IHVzZVN0YXRlKDApLFxuICAgICAgcmVsYXRlZFggPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0UmVsYXRlZFggPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRvb2x0aXBSZWYuY3VycmVudCkge1xuICAgICAgdmFyIHRvb2x0aXBIZWlnaHQgPSB0b29sdGlwUmVmLmN1cnJlbnQub2Zmc2V0SGVpZ2h0ICogMS4xO1xuICAgICAgdmFyIHRvb2x0aXBXaWR0aCA9IHRvb2x0aXBSZWYuY3VycmVudC5vZmZzZXRXaWR0aCAqIDEuMTtcbiAgICAgIHZhciBuZXdSZWxhdGVkWSA9IHRhc2suaW5kZXggKiByb3dIZWlnaHQgLSBzY3JvbGxZICsgaGVhZGVySGVpZ2h0O1xuICAgICAgdmFyIG5ld1JlbGF0ZWRYO1xuXG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIG5ld1JlbGF0ZWRYID0gdGFzay54MSAtIGFycm93SW5kZW50ICogMS41IC0gdG9vbHRpcFdpZHRoIC0gc2Nyb2xsWDtcblxuICAgICAgICBpZiAobmV3UmVsYXRlZFggPCAwKSB7XG4gICAgICAgICAgbmV3UmVsYXRlZFggPSB0YXNrLngyICsgYXJyb3dJbmRlbnQgKiAxLjUgLSBzY3JvbGxYO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvb2x0aXBMZWZ0bW9zdFBvaW50ID0gdG9vbHRpcFdpZHRoICsgbmV3UmVsYXRlZFg7XG5cbiAgICAgICAgaWYgKHRvb2x0aXBMZWZ0bW9zdFBvaW50ID4gc3ZnQ29udGFpbmVyV2lkdGgpIHtcbiAgICAgICAgICBuZXdSZWxhdGVkWCA9IHN2Z0NvbnRhaW5lcldpZHRoIC0gdG9vbHRpcFdpZHRoO1xuICAgICAgICAgIG5ld1JlbGF0ZWRZICs9IHJvd0hlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3UmVsYXRlZFggPSB0YXNrLngyICsgYXJyb3dJbmRlbnQgKiAxLjUgKyB0YXNrTGlzdFdpZHRoIC0gc2Nyb2xsWDtcblxuICAgICAgICB2YXIgX3Rvb2x0aXBMZWZ0bW9zdFBvaW50ID0gdG9vbHRpcFdpZHRoICsgbmV3UmVsYXRlZFg7XG5cbiAgICAgICAgdmFyIGZ1bGxDaGFydFdpZHRoID0gdGFza0xpc3RXaWR0aCArIHN2Z0NvbnRhaW5lcldpZHRoO1xuXG4gICAgICAgIGlmIChfdG9vbHRpcExlZnRtb3N0UG9pbnQgPiBmdWxsQ2hhcnRXaWR0aCkge1xuICAgICAgICAgIG5ld1JlbGF0ZWRYID0gdGFzay54MSArIHRhc2tMaXN0V2lkdGggLSBhcnJvd0luZGVudCAqIDEuNSAtIHNjcm9sbFggLSB0b29sdGlwV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3UmVsYXRlZFggPCB0YXNrTGlzdFdpZHRoKSB7XG4gICAgICAgICAgbmV3UmVsYXRlZFggPSBzdmdDb250YWluZXJXaWR0aCArIHRhc2tMaXN0V2lkdGggLSB0b29sdGlwV2lkdGg7XG4gICAgICAgICAgbmV3UmVsYXRlZFkgKz0gcm93SGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0b29sdGlwTG93ZXJQb2ludCA9IHRvb2x0aXBIZWlnaHQgKyBuZXdSZWxhdGVkWSAtIHNjcm9sbFk7XG5cbiAgICAgIGlmICh0b29sdGlwTG93ZXJQb2ludCA+IHN2Z0NvbnRhaW5lckhlaWdodCAtIHNjcm9sbFkpIHtcbiAgICAgICAgbmV3UmVsYXRlZFkgPSBzdmdDb250YWluZXJIZWlnaHQgLSB0b29sdGlwSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBzZXRSZWxhdGVkWShuZXdSZWxhdGVkWSk7XG4gICAgICBzZXRSZWxhdGVkWChuZXdSZWxhdGVkWCk7XG4gICAgfVxuICB9LCBbdG9vbHRpcFJlZiwgdGFzaywgYXJyb3dJbmRlbnQsIHNjcm9sbFgsIHNjcm9sbFksIGhlYWRlckhlaWdodCwgdGFza0xpc3RXaWR0aCwgcm93SGVpZ2h0LCBzdmdDb250YWluZXJIZWlnaHQsIHN2Z0NvbnRhaW5lcldpZHRoLCBydGxdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogdG9vbHRpcFJlZixcbiAgICBjbGFzc05hbWU6IHJlbGF0ZWRYID8gc3R5bGVzJDIudG9vbHRpcERldGFpbHNDb250YWluZXIgOiBzdHlsZXMkMi50b29sdGlwRGV0YWlsc0NvbnRhaW5lckhpZGRlbixcbiAgICBzdHlsZToge1xuICAgICAgbGVmdDogcmVsYXRlZFgsXG4gICAgICB0b3A6IHJlbGF0ZWRZXG4gICAgfVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFRvb2x0aXBDb250ZW50LCB7XG4gICAgdGFzazogdGFzayxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseVxuICB9KSk7XG59O1xudmFyIFN0YW5kYXJkVG9vbHRpcENvbnRlbnQgPSBmdW5jdGlvbiBTdGFuZGFyZFRvb2x0aXBDb250ZW50KF9yZWYyKSB7XG4gIHZhciB0YXNrID0gX3JlZjIudGFzayxcbiAgICAgIGZvbnRTaXplID0gX3JlZjIuZm9udFNpemUsXG4gICAgICBmb250RmFtaWx5ID0gX3JlZjIuZm9udEZhbWlseTtcbiAgdmFyIHN0eWxlID0ge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5XG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQyLnRvb2x0aXBEZWZhdWx0Q29udGFpbmVyLFxuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYlwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTaXplOiBmb250U2l6ZSArIDZcbiAgICB9XG4gIH0sIHRhc2submFtZSArIFwiOiBcIiArIHRhc2suc3RhcnQuZ2V0RGF0ZSgpICsgXCItXCIgKyAodGFzay5zdGFydC5nZXRNb250aCgpICsgMSkgKyBcIi1cIiArIHRhc2suc3RhcnQuZ2V0RnVsbFllYXIoKSArIFwiIC0gXCIgKyB0YXNrLmVuZC5nZXREYXRlKCkgKyBcIi1cIiArICh0YXNrLmVuZC5nZXRNb250aCgpICsgMSkgKyBcIi1cIiArIHRhc2suZW5kLmdldEZ1bGxZZWFyKCkpLCB0YXNrLmVuZC5nZXRUaW1lKCkgLSB0YXNrLnN0YXJ0LmdldFRpbWUoKSAhPT0gMCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkMi50b29sdGlwRGVmYXVsdENvbnRhaW5lclBhcmFncmFwaFxuICB9LCBcIkR1cmF0aW9uOiBcIiArIH5+KCh0YXNrLmVuZC5nZXRUaW1lKCkgLSB0YXNrLnN0YXJ0LmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpICsgXCIgZGF5KHMpXCIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkMi50b29sdGlwRGVmYXVsdENvbnRhaW5lclBhcmFncmFwaFxuICB9LCAhIXRhc2sucHJvZ3Jlc3MgJiYgXCJQcm9ncmVzczogXCIgKyB0YXNrLnByb2dyZXNzICsgXCIgJVwiKSk7XG59O1xuXG52YXIgc3R5bGVzJDMgPSB7XCJzY3JvbGxcIjpcIl8xZVQtdFwifTtcblxudmFyIFZlcnRpY2FsU2Nyb2xsID0gZnVuY3Rpb24gVmVydGljYWxTY3JvbGwoX3JlZikge1xuICB2YXIgc2Nyb2xsID0gX3JlZi5zY3JvbGwsXG4gICAgICBnYW50dEhlaWdodCA9IF9yZWYuZ2FudHRIZWlnaHQsXG4gICAgICBnYW50dEZ1bGxIZWlnaHQgPSBfcmVmLmdhbnR0RnVsbEhlaWdodCxcbiAgICAgIGhlYWRlckhlaWdodCA9IF9yZWYuaGVhZGVySGVpZ2h0LFxuICAgICAgcnRsID0gX3JlZi5ydGwsXG4gICAgICBvblNjcm9sbCA9IF9yZWYub25TY3JvbGw7XG4gIHZhciBzY3JvbGxSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbFJlZi5jdXJyZW50KSB7XG4gICAgICBzY3JvbGxSZWYuY3VycmVudC5zY3JvbGxUb3AgPSBzY3JvbGw7XG4gICAgfVxuICB9LCBbc2Nyb2xsXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgaGVpZ2h0OiBnYW50dEhlaWdodCxcbiAgICAgIG1hcmdpblRvcDogaGVhZGVySGVpZ2h0LFxuICAgICAgbWFyZ2luTGVmdDogcnRsID8gXCJcIiA6IFwiLTFyZW1cIlxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkMy5zY3JvbGwsXG4gICAgb25TY3JvbGw6IG9uU2Nyb2xsLFxuICAgIHJlZjogc2Nyb2xsUmVmXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBoZWlnaHQ6IGdhbnR0RnVsbEhlaWdodCxcbiAgICAgIHdpZHRoOiAxXG4gICAgfVxuICB9KSk7XG59O1xuXG52YXIgVGFza0xpc3QgPSBmdW5jdGlvbiBUYXNrTGlzdChfcmVmKSB7XG4gIHZhciBoZWFkZXJIZWlnaHQgPSBfcmVmLmhlYWRlckhlaWdodCxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICByb3dXaWR0aCA9IF9yZWYucm93V2lkdGgsXG4gICAgICByb3dIZWlnaHQgPSBfcmVmLnJvd0hlaWdodCxcbiAgICAgIHNjcm9sbFkgPSBfcmVmLnNjcm9sbFksXG4gICAgICB0YXNrcyA9IF9yZWYudGFza3MsXG4gICAgICBzZWxlY3RlZFRhc2sgPSBfcmVmLnNlbGVjdGVkVGFzayxcbiAgICAgIHNldFNlbGVjdGVkVGFzayA9IF9yZWYuc2V0U2VsZWN0ZWRUYXNrLFxuICAgICAgb25FeHBhbmRlckNsaWNrID0gX3JlZi5vbkV4cGFuZGVyQ2xpY2ssXG4gICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgIGdhbnR0SGVpZ2h0ID0gX3JlZi5nYW50dEhlaWdodCxcbiAgICAgIHRhc2tMaXN0UmVmID0gX3JlZi50YXNrTGlzdFJlZixcbiAgICAgIGhvcml6b250YWxDb250YWluZXJDbGFzcyA9IF9yZWYuaG9yaXpvbnRhbENvbnRhaW5lckNsYXNzLFxuICAgICAgVGFza0xpc3RIZWFkZXIgPSBfcmVmLlRhc2tMaXN0SGVhZGVyLFxuICAgICAgVGFza0xpc3RUYWJsZSA9IF9yZWYuVGFza0xpc3RUYWJsZTtcbiAgdmFyIGhvcml6b250YWxDb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGhvcml6b250YWxDb250YWluZXJSZWYuY3VycmVudCkge1xuICAgICAgaG9yaXpvbnRhbENvbnRhaW5lclJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IHNjcm9sbFk7XG4gICAgfVxuICB9LCBbc2Nyb2xsWV0pO1xuICB2YXIgaGVhZGVyUHJvcHMgPSB7XG4gICAgaGVhZGVySGVpZ2h0OiBoZWFkZXJIZWlnaHQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgcm93V2lkdGg6IHJvd1dpZHRoXG4gIH07XG4gIHZhciBzZWxlY3RlZFRhc2tJZCA9IHNlbGVjdGVkVGFzayA/IHNlbGVjdGVkVGFzay5pZCA6IFwiXCI7XG4gIHZhciB0YWJsZVByb3BzID0ge1xuICAgIHJvd0hlaWdodDogcm93SGVpZ2h0LFxuICAgIHJvd1dpZHRoOiByb3dXaWR0aCxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICB0YXNrczogdGFza3MsXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgc2VsZWN0ZWRUYXNrSWQ6IHNlbGVjdGVkVGFza0lkLFxuICAgIHNldFNlbGVjdGVkVGFzazogc2V0U2VsZWN0ZWRUYXNrLFxuICAgIG9uRXhwYW5kZXJDbGljazogb25FeHBhbmRlckNsaWNrXG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IHRhc2tMaXN0UmVmXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFza0xpc3RIZWFkZXIsIE9iamVjdC5hc3NpZ24oe30sIGhlYWRlclByb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogaG9yaXpvbnRhbENvbnRhaW5lclJlZixcbiAgICBjbGFzc05hbWU6IGhvcml6b250YWxDb250YWluZXJDbGFzcyxcbiAgICBzdHlsZTogZ2FudHRIZWlnaHQgPyB7XG4gICAgICBoZWlnaHQ6IGdhbnR0SGVpZ2h0XG4gICAgfSA6IHt9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFza0xpc3RUYWJsZSwgT2JqZWN0LmFzc2lnbih7fSwgdGFibGVQcm9wcykpKSk7XG59O1xuXG52YXIgc3R5bGVzJDQgPSB7XCJncmlkUm93XCI6XCJfMmRaVHlcIixcImdyaWRSb3dMaW5lXCI6XCJfM3JVS2lcIixcImdyaWRUaWNrXCI6XCJfUnV3dUtcIn07XG5cbnZhciBHcmlkQm9keSA9IGZ1bmN0aW9uIEdyaWRCb2R5KF9yZWYpIHtcbiAgdmFyIHRhc2tzID0gX3JlZi50YXNrcyxcbiAgICAgIGRhdGVzID0gX3JlZi5kYXRlcyxcbiAgICAgIHJvd0hlaWdodCA9IF9yZWYucm93SGVpZ2h0LFxuICAgICAgc3ZnV2lkdGggPSBfcmVmLnN2Z1dpZHRoLFxuICAgICAgY29sdW1uV2lkdGggPSBfcmVmLmNvbHVtbldpZHRoLFxuICAgICAgdG9kYXlDb2xvciA9IF9yZWYudG9kYXlDb2xvcixcbiAgICAgIHJ0bCA9IF9yZWYucnRsO1xuICB2YXIgeSA9IDA7XG4gIHZhciBncmlkUm93cyA9IFtdO1xuICB2YXIgcm93TGluZXMgPSBbUmVhY3QuY3JlYXRlRWxlbWVudChcImxpbmVcIiwge1xuICAgIGtleTogXCJSb3dMaW5lRmlyc3RcIixcbiAgICB4OiBcIjBcIixcbiAgICB5MTogMCxcbiAgICB4Mjogc3ZnV2lkdGgsXG4gICAgeTI6IDAsXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkNC5ncmlkUm93TGluZVxuICB9KV07XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh0YXNrcyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIHRhc2sgPSBfc3RlcC52YWx1ZTtcbiAgICBncmlkUm93cy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIHtcbiAgICAgIGtleTogXCJSb3dcIiArIHRhc2suaWQsXG4gICAgICB4OiBcIjBcIixcbiAgICAgIHk6IHksXG4gICAgICB3aWR0aDogc3ZnV2lkdGgsXG4gICAgICBoZWlnaHQ6IHJvd0hlaWdodCxcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDQuZ3JpZFJvd1xuICAgIH0pKTtcbiAgICByb3dMaW5lcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaW5lXCIsIHtcbiAgICAgIGtleTogXCJSb3dMaW5lXCIgKyB0YXNrLmlkLFxuICAgICAgeDogXCIwXCIsXG4gICAgICB5MTogeSArIHJvd0hlaWdodCxcbiAgICAgIHgyOiBzdmdXaWR0aCxcbiAgICAgIHkyOiB5ICsgcm93SGVpZ2h0LFxuICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkNC5ncmlkUm93TGluZVxuICAgIH0pKTtcbiAgICB5ICs9IHJvd0hlaWdodDtcbiAgfVxuXG4gIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGlja1ggPSAwO1xuICB2YXIgdGlja3MgPSBbXTtcbiAgdmFyIHRvZGF5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwgbnVsbCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkYXRlID0gZGF0ZXNbaV07XG4gICAgdGlja3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGluZVwiLCB7XG4gICAgICBrZXk6IGRhdGUuZ2V0VGltZSgpLFxuICAgICAgeDE6IHRpY2tYLFxuICAgICAgeTE6IDAsXG4gICAgICB4MjogdGlja1gsXG4gICAgICB5MjogeSxcbiAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDQuZ3JpZFRpY2tcbiAgICB9KSk7XG5cbiAgICBpZiAoaSArIDEgIT09IGRhdGVzLmxlbmd0aCAmJiBkYXRlLmdldFRpbWUoKSA8IG5vdy5nZXRUaW1lKCkgJiYgZGF0ZXNbaSArIDFdLmdldFRpbWUoKSA+PSBub3cuZ2V0VGltZSgpIHx8IGkgIT09IDAgJiYgaSArIDEgPT09IGRhdGVzLmxlbmd0aCAmJiBkYXRlLmdldFRpbWUoKSA8IG5vdy5nZXRUaW1lKCkgJiYgYWRkVG9EYXRlKGRhdGUsIGRhdGUuZ2V0VGltZSgpIC0gZGF0ZXNbaSAtIDFdLmdldFRpbWUoKSwgXCJtaWxsaXNlY29uZFwiKS5nZXRUaW1lKCkgPj0gbm93LmdldFRpbWUoKSkge1xuICAgICAgdG9kYXkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCB7XG4gICAgICAgIHg6IHRpY2tYLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogY29sdW1uV2lkdGgsXG4gICAgICAgIGhlaWdodDogeSxcbiAgICAgICAgZmlsbDogdG9kYXlDb2xvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJ0bCAmJiBpICsgMSAhPT0gZGF0ZXMubGVuZ3RoICYmIGRhdGUuZ2V0VGltZSgpID49IG5vdy5nZXRUaW1lKCkgJiYgZGF0ZXNbaSArIDFdLmdldFRpbWUoKSA8IG5vdy5nZXRUaW1lKCkpIHtcbiAgICAgIHRvZGF5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgICAgICB4OiB0aWNrWCArIGNvbHVtbldpZHRoLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogY29sdW1uV2lkdGgsXG4gICAgICAgIGhlaWdodDogeSxcbiAgICAgICAgZmlsbDogdG9kYXlDb2xvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGlja1ggKz0gY29sdW1uV2lkdGg7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJncmlkQm9keVwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwicm93c1wiXG4gIH0sIGdyaWRSb3dzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyb3dMaW5lc1wiXG4gIH0sIHJvd0xpbmVzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ0aWNrc1wiXG4gIH0sIHRpY2tzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ0b2RheVwiXG4gIH0sIHRvZGF5KSk7XG59O1xuXG52YXIgR3JpZCA9IGZ1bmN0aW9uIEdyaWQocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiZ3JpZFwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZEJvZHksIE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSkpO1xufTtcblxudmFyIHN0eWxlcyQ1ID0ge1wiY2FsZW5kYXJCb3R0b21UZXh0XCI6XCJfOXc4ZDVcIixcImNhbGVuZGFyVG9wVGlja1wiOlwiXzFyTHVaXCIsXCJjYWxlbmRhclRvcFRleHRcIjpcIl8ycTFLdFwiLFwiY2FsZW5kYXJIZWFkZXJcIjpcIl8zNW5MWFwifTtcblxudmFyIFRvcFBhcnRPZkNhbGVuZGFyID0gZnVuY3Rpb24gVG9wUGFydE9mQ2FsZW5kYXIoX3JlZikge1xuICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgeDFMaW5lID0gX3JlZi54MUxpbmUsXG4gICAgICB5MUxpbmUgPSBfcmVmLnkxTGluZSxcbiAgICAgIHkyTGluZSA9IF9yZWYueTJMaW5lLFxuICAgICAgeFRleHQgPSBfcmVmLnhUZXh0LFxuICAgICAgeVRleHQgPSBfcmVmLnlUZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJjYWxlbmRhclRvcFwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaW5lXCIsIHtcbiAgICB4MTogeDFMaW5lLFxuICAgIHkxOiB5MUxpbmUsXG4gICAgeDI6IHgxTGluZSxcbiAgICB5MjogeTJMaW5lLFxuICAgIGNsYXNzTmFtZTogc3R5bGVzJDUuY2FsZW5kYXJUb3BUaWNrLFxuICAgIGtleTogdmFsdWUgKyBcImxpbmVcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgIGtleTogdmFsdWUgKyBcInRleHRcIixcbiAgICB5OiB5VGV4dCxcbiAgICB4OiB4VGV4dCxcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQ1LmNhbGVuZGFyVG9wVGV4dFxuICB9LCB2YWx1ZSkpO1xufTtcblxudmFyIENhbGVuZGFyID0gZnVuY3Rpb24gQ2FsZW5kYXIoX3JlZikge1xuICB2YXIgZGF0ZVNldHVwID0gX3JlZi5kYXRlU2V0dXAsXG4gICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgIHZpZXdNb2RlID0gX3JlZi52aWV3TW9kZSxcbiAgICAgIHJ0bCA9IF9yZWYucnRsLFxuICAgICAgaGVhZGVySGVpZ2h0ID0gX3JlZi5oZWFkZXJIZWlnaHQsXG4gICAgICBjb2x1bW5XaWR0aCA9IF9yZWYuY29sdW1uV2lkdGgsXG4gICAgICBmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udFNpemUgPSBfcmVmLmZvbnRTaXplO1xuXG4gIHZhciBnZXRDYWxlbmRhclZhbHVlc0ZvclllYXIgPSBmdW5jdGlvbiBnZXRDYWxlbmRhclZhbHVlc0ZvclllYXIoKSB7XG4gICAgdmFyIHRvcFZhbHVlcyA9IFtdO1xuICAgIHZhciBib3R0b21WYWx1ZXMgPSBbXTtcbiAgICB2YXIgdG9wRGVmYXVsdEhlaWdodCA9IGhlYWRlckhlaWdodCAqIDAuNTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0ZVNldHVwLmRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGF0ZSA9IGRhdGVTZXR1cC5kYXRlc1tpXTtcbiAgICAgIHZhciBib3R0b21WYWx1ZSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIGJvdHRvbVZhbHVlcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0XCIsIHtcbiAgICAgICAga2V5OiBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgIHk6IGhlYWRlckhlaWdodCAqIDAuOCxcbiAgICAgICAgeDogY29sdW1uV2lkdGggKiBpICsgY29sdW1uV2lkdGggKiAwLjUsXG4gICAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDUuY2FsZW5kYXJCb3R0b21UZXh0XG4gICAgICB9LCBib3R0b21WYWx1ZSkpO1xuXG4gICAgICBpZiAoaSA9PT0gMCB8fCBkYXRlLmdldEZ1bGxZZWFyKCkgIT09IGRhdGVTZXR1cC5kYXRlc1tpIC0gMV0uZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICB2YXIgdG9wVmFsdWUgPSBkYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIHhUZXh0ID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICB4VGV4dCA9ICg2ICsgaSArIGRhdGUuZ2V0RnVsbFllYXIoKSArIDEpICogY29sdW1uV2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeFRleHQgPSAoNiArIGkgLSBkYXRlLmdldEZ1bGxZZWFyKCkpICogY29sdW1uV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0b3BWYWx1ZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFRvcFBhcnRPZkNhbGVuZGFyLCB7XG4gICAgICAgICAga2V5OiB0b3BWYWx1ZSxcbiAgICAgICAgICB2YWx1ZTogdG9wVmFsdWUsXG4gICAgICAgICAgeDFMaW5lOiBjb2x1bW5XaWR0aCAqIGksXG4gICAgICAgICAgeTFMaW5lOiAwLFxuICAgICAgICAgIHkyTGluZTogaGVhZGVySGVpZ2h0LFxuICAgICAgICAgIHhUZXh0OiB4VGV4dCxcbiAgICAgICAgICB5VGV4dDogdG9wRGVmYXVsdEhlaWdodCAqIDAuOVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFt0b3BWYWx1ZXMsIGJvdHRvbVZhbHVlc107XG4gIH07XG5cbiAgdmFyIGdldENhbGVuZGFyVmFsdWVzRm9yTW9udGggPSBmdW5jdGlvbiBnZXRDYWxlbmRhclZhbHVlc0Zvck1vbnRoKCkge1xuICAgIHZhciB0b3BWYWx1ZXMgPSBbXTtcbiAgICB2YXIgYm90dG9tVmFsdWVzID0gW107XG4gICAgdmFyIHRvcERlZmF1bHRIZWlnaHQgPSBoZWFkZXJIZWlnaHQgKiAwLjU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGVTZXR1cC5kYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRhdGUgPSBkYXRlU2V0dXAuZGF0ZXNbaV07XG4gICAgICB2YXIgYm90dG9tVmFsdWUgPSBnZXRMb2NhbGVNb250aChkYXRlLCBsb2NhbGUpO1xuICAgICAgYm90dG9tVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgICAgICBrZXk6IGJvdHRvbVZhbHVlICsgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICB5OiBoZWFkZXJIZWlnaHQgKiAwLjgsXG4gICAgICAgIHg6IGNvbHVtbldpZHRoICogaSArIGNvbHVtbldpZHRoICogMC41LFxuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyQ1LmNhbGVuZGFyQm90dG9tVGV4dFxuICAgICAgfSwgYm90dG9tVmFsdWUpKTtcblxuICAgICAgaWYgKGkgPT09IDAgfHwgZGF0ZS5nZXRGdWxsWWVhcigpICE9PSBkYXRlU2V0dXAuZGF0ZXNbaSAtIDFdLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgICAgdmFyIHRvcFZhbHVlID0gZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciB4VGV4dCA9IHZvaWQgMDtcblxuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgeFRleHQgPSAoNiArIGkgKyBkYXRlLmdldE1vbnRoKCkgKyAxKSAqIGNvbHVtbldpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhUZXh0ID0gKDYgKyBpIC0gZGF0ZS5nZXRNb250aCgpKSAqIGNvbHVtbldpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9wVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChUb3BQYXJ0T2ZDYWxlbmRhciwge1xuICAgICAgICAgIGtleTogdG9wVmFsdWUsXG4gICAgICAgICAgdmFsdWU6IHRvcFZhbHVlLFxuICAgICAgICAgIHgxTGluZTogY29sdW1uV2lkdGggKiBpLFxuICAgICAgICAgIHkxTGluZTogMCxcbiAgICAgICAgICB5MkxpbmU6IHRvcERlZmF1bHRIZWlnaHQsXG4gICAgICAgICAgeFRleHQ6IHhUZXh0LFxuICAgICAgICAgIHlUZXh0OiB0b3BEZWZhdWx0SGVpZ2h0ICogMC45XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW3RvcFZhbHVlcywgYm90dG9tVmFsdWVzXTtcbiAgfTtcblxuICB2YXIgZ2V0Q2FsZW5kYXJWYWx1ZXNGb3JXZWVrID0gZnVuY3Rpb24gZ2V0Q2FsZW5kYXJWYWx1ZXNGb3JXZWVrKCkge1xuICAgIHZhciB0b3BWYWx1ZXMgPSBbXTtcbiAgICB2YXIgYm90dG9tVmFsdWVzID0gW107XG4gICAgdmFyIHdlZWtzQ291bnQgPSAxO1xuICAgIHZhciB0b3BEZWZhdWx0SGVpZ2h0ID0gaGVhZGVySGVpZ2h0ICogMC41O1xuICAgIHZhciBkYXRlcyA9IGRhdGVTZXR1cC5kYXRlcztcblxuICAgIGZvciAodmFyIGkgPSBkYXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGRhdGUgPSBkYXRlc1tpXTtcbiAgICAgIHZhciB0b3BWYWx1ZSA9IFwiXCI7XG5cbiAgICAgIGlmIChpID09PSAwIHx8IGRhdGUuZ2V0TW9udGgoKSAhPT0gZGF0ZXNbaSAtIDFdLmdldE1vbnRoKCkpIHtcbiAgICAgICAgdG9wVmFsdWUgPSBnZXRMb2NhbGVNb250aChkYXRlLCBsb2NhbGUpICsgXCIsIFwiICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYm90dG9tVmFsdWUgPSBcIldcIiArIGdldFdlZWtOdW1iZXJJU084NjAxKGRhdGUpO1xuICAgICAgYm90dG9tVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgICAgICBrZXk6IGRhdGUuZ2V0VGltZSgpLFxuICAgICAgICB5OiBoZWFkZXJIZWlnaHQgKiAwLjgsXG4gICAgICAgIHg6IGNvbHVtbldpZHRoICogKGkgKyArcnRsKSxcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkNS5jYWxlbmRhckJvdHRvbVRleHRcbiAgICAgIH0sIGJvdHRvbVZhbHVlKSk7XG5cbiAgICAgIGlmICh0b3BWYWx1ZSkge1xuICAgICAgICBpZiAoaSAhPT0gZGF0ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHRvcFZhbHVlcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9wUGFydE9mQ2FsZW5kYXIsIHtcbiAgICAgICAgICAgIGtleTogdG9wVmFsdWUsXG4gICAgICAgICAgICB2YWx1ZTogdG9wVmFsdWUsXG4gICAgICAgICAgICB4MUxpbmU6IGNvbHVtbldpZHRoICogaSArIHdlZWtzQ291bnQgKiBjb2x1bW5XaWR0aCxcbiAgICAgICAgICAgIHkxTGluZTogMCxcbiAgICAgICAgICAgIHkyTGluZTogdG9wRGVmYXVsdEhlaWdodCxcbiAgICAgICAgICAgIHhUZXh0OiBjb2x1bW5XaWR0aCAqIGkgKyBjb2x1bW5XaWR0aCAqIHdlZWtzQ291bnQgKiAwLjUsXG4gICAgICAgICAgICB5VGV4dDogdG9wRGVmYXVsdEhlaWdodCAqIDAuOVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdlZWtzQ291bnQgPSAwO1xuICAgICAgfVxuXG4gICAgICB3ZWVrc0NvdW50Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIFt0b3BWYWx1ZXMsIGJvdHRvbVZhbHVlc107XG4gIH07XG5cbiAgdmFyIGdldENhbGVuZGFyVmFsdWVzRm9yRGF5ID0gZnVuY3Rpb24gZ2V0Q2FsZW5kYXJWYWx1ZXNGb3JEYXkoKSB7XG4gICAgdmFyIHRvcFZhbHVlcyA9IFtdO1xuICAgIHZhciBib3R0b21WYWx1ZXMgPSBbXTtcbiAgICB2YXIgdG9wRGVmYXVsdEhlaWdodCA9IGhlYWRlckhlaWdodCAqIDAuNTtcbiAgICB2YXIgZGF0ZXMgPSBkYXRlU2V0dXAuZGF0ZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGF0ZSA9IGRhdGVzW2ldO1xuICAgICAgdmFyIGJvdHRvbVZhbHVlID0gZ2V0TG9jYWxEYXlPZldlZWsoZGF0ZSwgbG9jYWxlLCBcInNob3J0XCIpICsgXCIsIFwiICsgZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKTtcbiAgICAgIGJvdHRvbVZhbHVlcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0XCIsIHtcbiAgICAgICAga2V5OiBkYXRlLmdldFRpbWUoKSxcbiAgICAgICAgeTogaGVhZGVySGVpZ2h0ICogMC44LFxuICAgICAgICB4OiBjb2x1bW5XaWR0aCAqIGkgKyBjb2x1bW5XaWR0aCAqIDAuNSxcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkNS5jYWxlbmRhckJvdHRvbVRleHRcbiAgICAgIH0sIGJvdHRvbVZhbHVlKSk7XG5cbiAgICAgIGlmIChpICsgMSAhPT0gZGF0ZXMubGVuZ3RoICYmIGRhdGUuZ2V0TW9udGgoKSAhPT0gZGF0ZXNbaSArIDFdLmdldE1vbnRoKCkpIHtcbiAgICAgICAgdmFyIHRvcFZhbHVlID0gZ2V0TG9jYWxlTW9udGgoZGF0ZSwgbG9jYWxlKTtcbiAgICAgICAgdG9wVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChUb3BQYXJ0T2ZDYWxlbmRhciwge1xuICAgICAgICAgIGtleTogdG9wVmFsdWUgKyBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgdmFsdWU6IHRvcFZhbHVlLFxuICAgICAgICAgIHgxTGluZTogY29sdW1uV2lkdGggKiAoaSArIDEpLFxuICAgICAgICAgIHkxTGluZTogMCxcbiAgICAgICAgICB5MkxpbmU6IHRvcERlZmF1bHRIZWlnaHQsXG4gICAgICAgICAgeFRleHQ6IGNvbHVtbldpZHRoICogKGkgKyAxKSAtIGdldERheXNJbk1vbnRoKGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXRGdWxsWWVhcigpKSAqIGNvbHVtbldpZHRoICogMC41LFxuICAgICAgICAgIHlUZXh0OiB0b3BEZWZhdWx0SGVpZ2h0ICogMC45XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW3RvcFZhbHVlcywgYm90dG9tVmFsdWVzXTtcbiAgfTtcblxuICB2YXIgZ2V0Q2FsZW5kYXJWYWx1ZXNGb3JQYXJ0T2ZEYXkgPSBmdW5jdGlvbiBnZXRDYWxlbmRhclZhbHVlc0ZvclBhcnRPZkRheSgpIHtcbiAgICB2YXIgdG9wVmFsdWVzID0gW107XG4gICAgdmFyIGJvdHRvbVZhbHVlcyA9IFtdO1xuICAgIHZhciB0aWNrcyA9IHZpZXdNb2RlID09PSBWaWV3TW9kZS5IYWxmRGF5ID8gMiA6IDQ7XG4gICAgdmFyIHRvcERlZmF1bHRIZWlnaHQgPSBoZWFkZXJIZWlnaHQgKiAwLjU7XG4gICAgdmFyIGRhdGVzID0gZGF0ZVNldHVwLmRhdGVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRhdGUgPSBkYXRlc1tpXTtcbiAgICAgIHZhciBib3R0b21WYWx1ZSA9IGdldENhY2hlZERhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgICAgICBob3VyOiBcIm51bWVyaWNcIlxuICAgICAgfSkuZm9ybWF0KGRhdGUpO1xuICAgICAgYm90dG9tVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgICAgICBrZXk6IGRhdGUuZ2V0VGltZSgpLFxuICAgICAgICB5OiBoZWFkZXJIZWlnaHQgKiAwLjgsXG4gICAgICAgIHg6IGNvbHVtbldpZHRoICogKGkgKyArcnRsKSxcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkNS5jYWxlbmRhckJvdHRvbVRleHQsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHlcbiAgICAgIH0sIGJvdHRvbVZhbHVlKSk7XG5cbiAgICAgIGlmIChpID09PSAwIHx8IGRhdGUuZ2V0RGF0ZSgpICE9PSBkYXRlc1tpIC0gMV0uZ2V0RGF0ZSgpKSB7XG4gICAgICAgIHZhciB0b3BWYWx1ZSA9IGdldExvY2FsRGF5T2ZXZWVrKGRhdGUsIGxvY2FsZSwgXCJzaG9ydFwiKSArIFwiLCBcIiArIGRhdGUuZ2V0RGF0ZSgpICsgXCIgXCIgKyBnZXRMb2NhbGVNb250aChkYXRlLCBsb2NhbGUpO1xuICAgICAgICB0b3BWYWx1ZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFRvcFBhcnRPZkNhbGVuZGFyLCB7XG4gICAgICAgICAga2V5OiB0b3BWYWx1ZSArIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICB2YWx1ZTogdG9wVmFsdWUsXG4gICAgICAgICAgeDFMaW5lOiBjb2x1bW5XaWR0aCAqIGkgKyB0aWNrcyAqIGNvbHVtbldpZHRoLFxuICAgICAgICAgIHkxTGluZTogMCxcbiAgICAgICAgICB5MkxpbmU6IHRvcERlZmF1bHRIZWlnaHQsXG4gICAgICAgICAgeFRleHQ6IGNvbHVtbldpZHRoICogaSArIHRpY2tzICogY29sdW1uV2lkdGggKiAwLjUsXG4gICAgICAgICAgeVRleHQ6IHRvcERlZmF1bHRIZWlnaHQgKiAwLjlcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbdG9wVmFsdWVzLCBib3R0b21WYWx1ZXNdO1xuICB9O1xuXG4gIHZhciBnZXRDYWxlbmRhclZhbHVlc0ZvckhvdXIgPSBmdW5jdGlvbiBnZXRDYWxlbmRhclZhbHVlc0ZvckhvdXIoKSB7XG4gICAgdmFyIHRvcFZhbHVlcyA9IFtdO1xuICAgIHZhciBib3R0b21WYWx1ZXMgPSBbXTtcbiAgICB2YXIgdG9wRGVmYXVsdEhlaWdodCA9IGhlYWRlckhlaWdodCAqIDAuNTtcbiAgICB2YXIgZGF0ZXMgPSBkYXRlU2V0dXAuZGF0ZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGF0ZSA9IGRhdGVzW2ldO1xuICAgICAgdmFyIGJvdHRvbVZhbHVlID0gZ2V0Q2FjaGVkRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgICAgIGhvdXI6IFwibnVtZXJpY1wiXG4gICAgICB9KS5mb3JtYXQoZGF0ZSk7XG4gICAgICBib3R0b21WYWx1ZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dFwiLCB7XG4gICAgICAgIGtleTogZGF0ZS5nZXRUaW1lKCksXG4gICAgICAgIHk6IGhlYWRlckhlaWdodCAqIDAuOCxcbiAgICAgICAgeDogY29sdW1uV2lkdGggKiAoaSArICtydGwpLFxuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyQ1LmNhbGVuZGFyQm90dG9tVGV4dCxcbiAgICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseVxuICAgICAgfSwgYm90dG9tVmFsdWUpKTtcblxuICAgICAgaWYgKGkgIT09IDAgJiYgZGF0ZS5nZXREYXRlKCkgIT09IGRhdGVzW2kgLSAxXS5nZXREYXRlKCkpIHtcbiAgICAgICAgdmFyIGRpc3BsYXlEYXRlID0gZGF0ZXNbaSAtIDFdO1xuICAgICAgICB2YXIgdG9wVmFsdWUgPSBnZXRMb2NhbERheU9mV2VlayhkaXNwbGF5RGF0ZSwgbG9jYWxlLCBcImxvbmdcIikgKyBcIiwgXCIgKyBkaXNwbGF5RGF0ZS5nZXREYXRlKCkgKyBcIiBcIiArIGdldExvY2FsZU1vbnRoKGRpc3BsYXlEYXRlLCBsb2NhbGUpO1xuICAgICAgICB2YXIgdG9wUG9zaXRpb24gPSAoZGF0ZS5nZXRIb3VycygpIC0gMjQpIC8gMjtcbiAgICAgICAgdG9wVmFsdWVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChUb3BQYXJ0T2ZDYWxlbmRhciwge1xuICAgICAgICAgIGtleTogdG9wVmFsdWUgKyBkaXNwbGF5RGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgIHZhbHVlOiB0b3BWYWx1ZSxcbiAgICAgICAgICB4MUxpbmU6IGNvbHVtbldpZHRoICogaSxcbiAgICAgICAgICB5MUxpbmU6IDAsXG4gICAgICAgICAgeTJMaW5lOiB0b3BEZWZhdWx0SGVpZ2h0LFxuICAgICAgICAgIHhUZXh0OiBjb2x1bW5XaWR0aCAqIChpICsgdG9wUG9zaXRpb24pLFxuICAgICAgICAgIHlUZXh0OiB0b3BEZWZhdWx0SGVpZ2h0ICogMC45XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW3RvcFZhbHVlcywgYm90dG9tVmFsdWVzXTtcbiAgfTtcblxuICB2YXIgdG9wVmFsdWVzID0gW107XG4gIHZhciBib3R0b21WYWx1ZXMgPSBbXTtcblxuICBzd2l0Y2ggKGRhdGVTZXR1cC52aWV3TW9kZSkge1xuICAgIGNhc2UgVmlld01vZGUuWWVhcjpcbiAgICAgIHZhciBfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3IgPSBnZXRDYWxlbmRhclZhbHVlc0ZvclllYXIoKTtcblxuICAgICAgdG9wVmFsdWVzID0gX2dldENhbGVuZGFyVmFsdWVzRm9yWzBdO1xuICAgICAgYm90dG9tVmFsdWVzID0gX2dldENhbGVuZGFyVmFsdWVzRm9yWzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFZpZXdNb2RlLk1vbnRoOlxuICAgICAgdmFyIF9nZXRDYWxlbmRhclZhbHVlc0ZvcjIgPSBnZXRDYWxlbmRhclZhbHVlc0Zvck1vbnRoKCk7XG5cbiAgICAgIHRvcFZhbHVlcyA9IF9nZXRDYWxlbmRhclZhbHVlc0ZvcjJbMF07XG4gICAgICBib3R0b21WYWx1ZXMgPSBfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3IyWzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFZpZXdNb2RlLldlZWs6XG4gICAgICB2YXIgX2dldENhbGVuZGFyVmFsdWVzRm9yMyA9IGdldENhbGVuZGFyVmFsdWVzRm9yV2VlaygpO1xuXG4gICAgICB0b3BWYWx1ZXMgPSBfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3IzWzBdO1xuICAgICAgYm90dG9tVmFsdWVzID0gX2dldENhbGVuZGFyVmFsdWVzRm9yM1sxXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBWaWV3TW9kZS5EYXk6XG4gICAgICB2YXIgX2dldENhbGVuZGFyVmFsdWVzRm9yNCA9IGdldENhbGVuZGFyVmFsdWVzRm9yRGF5KCk7XG5cbiAgICAgIHRvcFZhbHVlcyA9IF9nZXRDYWxlbmRhclZhbHVlc0ZvcjRbMF07XG4gICAgICBib3R0b21WYWx1ZXMgPSBfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3I0WzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFZpZXdNb2RlLlF1YXJ0ZXJEYXk6XG4gICAgY2FzZSBWaWV3TW9kZS5IYWxmRGF5OlxuICAgICAgdmFyIF9nZXRDYWxlbmRhclZhbHVlc0ZvcjUgPSBnZXRDYWxlbmRhclZhbHVlc0ZvclBhcnRPZkRheSgpO1xuXG4gICAgICB0b3BWYWx1ZXMgPSBfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3I1WzBdO1xuICAgICAgYm90dG9tVmFsdWVzID0gX2dldENhbGVuZGFyVmFsdWVzRm9yNVsxXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBWaWV3TW9kZS5Ib3VyOlxuICAgICAgdmFyIF9nZXRDYWxlbmRhclZhbHVlc0ZvcjYgPSBnZXRDYWxlbmRhclZhbHVlc0ZvckhvdXIoKTtcblxuICAgICAgdG9wVmFsdWVzID0gX2dldENhbGVuZGFyVmFsdWVzRm9yNlswXTtcbiAgICAgIGJvdHRvbVZhbHVlcyA9IF9nZXRDYWxlbmRhclZhbHVlc0ZvcjZbMV07XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJjYWxlbmRhclwiLFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgd2lkdGg6IGNvbHVtbldpZHRoICogZGF0ZVNldHVwLmRhdGVzLmxlbmd0aCxcbiAgICBoZWlnaHQ6IGhlYWRlckhlaWdodCxcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQ1LmNhbGVuZGFySGVhZGVyXG4gIH0pLCBib3R0b21WYWx1ZXMsIFwiIFwiLCB0b3BWYWx1ZXMpO1xufTtcblxuLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG5cbmNvbnN0IF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkpIDogXCJAQGl0ZXJhdG9yXCI7XG5cbmNvbnN0IF9hc3luY0l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSkgOiBcIkBAYXN5bmNJdGVyYXRvclwiO1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvblxuZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIEFycm93ID0gZnVuY3Rpb24gQXJyb3coX3JlZikge1xuICB2YXIgdGFza0Zyb20gPSBfcmVmLnRhc2tGcm9tLFxuICAgICAgdGFza1RvID0gX3JlZi50YXNrVG8sXG4gICAgICByb3dIZWlnaHQgPSBfcmVmLnJvd0hlaWdodCxcbiAgICAgIHRhc2tIZWlnaHQgPSBfcmVmLnRhc2tIZWlnaHQsXG4gICAgICBhcnJvd0luZGVudCA9IF9yZWYuYXJyb3dJbmRlbnQsXG4gICAgICBydGwgPSBfcmVmLnJ0bDtcbiAgdmFyIHBhdGg7XG4gIHZhciB0cmlhbmdsZVBvaW50cztcblxuICBpZiAocnRsKSB7XG4gICAgdmFyIF9kcm93blBhdGhBbmRUcmlhbmdsZSA9IGRyb3duUGF0aEFuZFRyaWFuZ2xlUlRMKHRhc2tGcm9tLCB0YXNrVG8sIHJvd0hlaWdodCwgdGFza0hlaWdodCwgYXJyb3dJbmRlbnQpO1xuXG4gICAgcGF0aCA9IF9kcm93blBhdGhBbmRUcmlhbmdsZVswXTtcbiAgICB0cmlhbmdsZVBvaW50cyA9IF9kcm93blBhdGhBbmRUcmlhbmdsZVsxXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2Ryb3duUGF0aEFuZFRyaWFuZ2xlMiA9IGRyb3duUGF0aEFuZFRyaWFuZ2xlKHRhc2tGcm9tLCB0YXNrVG8sIHJvd0hlaWdodCwgdGFza0hlaWdodCwgYXJyb3dJbmRlbnQpO1xuXG4gICAgcGF0aCA9IF9kcm93blBhdGhBbmRUcmlhbmdsZTJbMF07XG4gICAgdHJpYW5nbGVQb2ludHMgPSBfZHJvd25QYXRoQW5kVHJpYW5nbGUyWzFdO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYXJyb3dcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgc3Ryb2tlV2lkdGg6IFwiMS41XCIsXG4gICAgZDogcGF0aCxcbiAgICBmaWxsOiBcIm5vbmVcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBvbHlnb25cIiwge1xuICAgIHBvaW50czogdHJpYW5nbGVQb2ludHNcbiAgfSkpO1xufTtcblxudmFyIGRyb3duUGF0aEFuZFRyaWFuZ2xlID0gZnVuY3Rpb24gZHJvd25QYXRoQW5kVHJpYW5nbGUodGFza0Zyb20sIHRhc2tUbywgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBhcnJvd0luZGVudCkge1xuICB2YXIgaW5kZXhDb21wYXJlID0gdGFza0Zyb20uaW5kZXggPiB0YXNrVG8uaW5kZXggPyAtMSA6IDE7XG4gIHZhciB0YXNrVG9FbmRQb3NpdGlvbiA9IHRhc2tUby55ICsgdGFza0hlaWdodCAvIDI7XG4gIHZhciB0YXNrRnJvbUVuZFBvc2l0aW9uID0gdGFza0Zyb20ueDIgKyBhcnJvd0luZGVudCAqIDI7XG4gIHZhciB0YXNrRnJvbUhvcml6b250YWxPZmZzZXRWYWx1ZSA9IHRhc2tGcm9tRW5kUG9zaXRpb24gPCB0YXNrVG8ueDEgPyBcIlwiIDogXCJIIFwiICsgKHRhc2tUby54MSAtIGFycm93SW5kZW50KTtcbiAgdmFyIHRhc2tUb0hvcml6b250YWxPZmZzZXRWYWx1ZSA9IHRhc2tGcm9tRW5kUG9zaXRpb24gPiB0YXNrVG8ueDEgPyBhcnJvd0luZGVudCA6IHRhc2tUby54MSAtIHRhc2tGcm9tLngyIC0gYXJyb3dJbmRlbnQ7XG4gIHZhciBwYXRoID0gXCJNIFwiICsgdGFza0Zyb20ueDIgKyBcIiBcIiArICh0YXNrRnJvbS55ICsgdGFza0hlaWdodCAvIDIpICsgXCIgXFxuICBoIFwiICsgYXJyb3dJbmRlbnQgKyBcIiBcXG4gIHYgXCIgKyBpbmRleENvbXBhcmUgKiByb3dIZWlnaHQgLyAyICsgXCIgXFxuICBcIiArIHRhc2tGcm9tSG9yaXpvbnRhbE9mZnNldFZhbHVlICsgXCJcXG4gIFYgXCIgKyB0YXNrVG9FbmRQb3NpdGlvbiArIFwiIFxcbiAgaCBcIiArIHRhc2tUb0hvcml6b250YWxPZmZzZXRWYWx1ZTtcbiAgdmFyIHRyaWFuZ2xlUG9pbnRzID0gdGFza1RvLngxICsgXCIsXCIgKyB0YXNrVG9FbmRQb3NpdGlvbiArIFwiIFxcbiAgXCIgKyAodGFza1RvLngxIC0gNSkgKyBcIixcIiArICh0YXNrVG9FbmRQb3NpdGlvbiAtIDUpICsgXCIgXFxuICBcIiArICh0YXNrVG8ueDEgLSA1KSArIFwiLFwiICsgKHRhc2tUb0VuZFBvc2l0aW9uICsgNSk7XG4gIHJldHVybiBbcGF0aCwgdHJpYW5nbGVQb2ludHNdO1xufTtcblxudmFyIGRyb3duUGF0aEFuZFRyaWFuZ2xlUlRMID0gZnVuY3Rpb24gZHJvd25QYXRoQW5kVHJpYW5nbGVSVEwodGFza0Zyb20sIHRhc2tUbywgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBhcnJvd0luZGVudCkge1xuICB2YXIgaW5kZXhDb21wYXJlID0gdGFza0Zyb20uaW5kZXggPiB0YXNrVG8uaW5kZXggPyAtMSA6IDE7XG4gIHZhciB0YXNrVG9FbmRQb3NpdGlvbiA9IHRhc2tUby55ICsgdGFza0hlaWdodCAvIDI7XG4gIHZhciB0YXNrRnJvbUVuZFBvc2l0aW9uID0gdGFza0Zyb20ueDEgLSBhcnJvd0luZGVudCAqIDI7XG4gIHZhciB0YXNrRnJvbUhvcml6b250YWxPZmZzZXRWYWx1ZSA9IHRhc2tGcm9tRW5kUG9zaXRpb24gPiB0YXNrVG8ueDIgPyBcIlwiIDogXCJIIFwiICsgKHRhc2tUby54MiArIGFycm93SW5kZW50KTtcbiAgdmFyIHRhc2tUb0hvcml6b250YWxPZmZzZXRWYWx1ZSA9IHRhc2tGcm9tRW5kUG9zaXRpb24gPCB0YXNrVG8ueDIgPyAtYXJyb3dJbmRlbnQgOiB0YXNrVG8ueDIgLSB0YXNrRnJvbS54MSArIGFycm93SW5kZW50O1xuICB2YXIgcGF0aCA9IFwiTSBcIiArIHRhc2tGcm9tLngxICsgXCIgXCIgKyAodGFza0Zyb20ueSArIHRhc2tIZWlnaHQgLyAyKSArIFwiIFxcbiAgaCBcIiArIC1hcnJvd0luZGVudCArIFwiIFxcbiAgdiBcIiArIGluZGV4Q29tcGFyZSAqIHJvd0hlaWdodCAvIDIgKyBcIiBcXG4gIFwiICsgdGFza0Zyb21Ib3Jpem9udGFsT2Zmc2V0VmFsdWUgKyBcIlxcbiAgViBcIiArIHRhc2tUb0VuZFBvc2l0aW9uICsgXCIgXFxuICBoIFwiICsgdGFza1RvSG9yaXpvbnRhbE9mZnNldFZhbHVlO1xuICB2YXIgdHJpYW5nbGVQb2ludHMgPSB0YXNrVG8ueDIgKyBcIixcIiArIHRhc2tUb0VuZFBvc2l0aW9uICsgXCIgXFxuICBcIiArICh0YXNrVG8ueDIgKyA1KSArIFwiLFwiICsgKHRhc2tUb0VuZFBvc2l0aW9uICsgNSkgKyBcIiBcXG4gIFwiICsgKHRhc2tUby54MiArIDUpICsgXCIsXCIgKyAodGFza1RvRW5kUG9zaXRpb24gLSA1KTtcbiAgcmV0dXJuIFtwYXRoLCB0cmlhbmdsZVBvaW50c107XG59O1xuXG52YXIgY29udmVydFRvQmFyVGFza3MgPSBmdW5jdGlvbiBjb252ZXJ0VG9CYXJUYXNrcyh0YXNrcywgZGF0ZXMsIGNvbHVtbldpZHRoLCByb3dIZWlnaHQsIHRhc2tIZWlnaHQsIGJhckNvcm5lclJhZGl1cywgaGFuZGxlV2lkdGgsIHJ0bCwgYmFyUHJvZ3Jlc3NDb2xvciwgYmFyUHJvZ3Jlc3NTZWxlY3RlZENvbG9yLCBiYXJCYWNrZ3JvdW5kQ29sb3IsIGJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yLCBwcm9qZWN0UHJvZ3Jlc3NDb2xvciwgcHJvamVjdFByb2dyZXNzU2VsZWN0ZWRDb2xvciwgcHJvamVjdEJhY2tncm91bmRDb2xvciwgcHJvamVjdEJhY2tncm91bmRTZWxlY3RlZENvbG9yLCBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsIG1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yKSB7XG4gIHZhciBiYXJUYXNrcyA9IHRhc2tzLm1hcChmdW5jdGlvbiAodCwgaSkge1xuICAgIHJldHVybiBjb252ZXJ0VG9CYXJUYXNrKHQsIGksIGRhdGVzLCBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGhhbmRsZVdpZHRoLCBydGwsIGJhclByb2dyZXNzQ29sb3IsIGJhclByb2dyZXNzU2VsZWN0ZWRDb2xvciwgYmFyQmFja2dyb3VuZENvbG9yLCBiYXJCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciwgcHJvamVjdFByb2dyZXNzQ29sb3IsIHByb2plY3RQcm9ncmVzc1NlbGVjdGVkQ29sb3IsIHByb2plY3RCYWNrZ3JvdW5kQ29sb3IsIHByb2plY3RCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciwgbWlsZXN0b25lQmFja2dyb3VuZENvbG9yLCBtaWxlc3RvbmVCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvcik7XG4gIH0pO1xuICBiYXJUYXNrcyA9IGJhclRhc2tzLm1hcChmdW5jdGlvbiAodGFzaykge1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSB0YXNrLmRlcGVuZGVuY2llcyB8fCBbXTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGopIHtcbiAgICAgIHZhciBkZXBlbmRlbmNlID0gYmFyVGFza3MuZmluZEluZGV4KGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuaWQgPT09IGRlcGVuZGVuY2llc1tqXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGRlcGVuZGVuY2UgIT09IC0xKSBiYXJUYXNrc1tkZXBlbmRlbmNlXS5iYXJDaGlsZHJlbi5wdXNoKHRhc2spO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuICAgICAgX2xvb3Aoaik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhc2s7XG4gIH0pO1xuICByZXR1cm4gYmFyVGFza3M7XG59O1xuXG52YXIgY29udmVydFRvQmFyVGFzayA9IGZ1bmN0aW9uIGNvbnZlcnRUb0JhclRhc2sodGFzaywgaW5kZXgsIGRhdGVzLCBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGhhbmRsZVdpZHRoLCBydGwsIGJhclByb2dyZXNzQ29sb3IsIGJhclByb2dyZXNzU2VsZWN0ZWRDb2xvciwgYmFyQmFja2dyb3VuZENvbG9yLCBiYXJCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciwgcHJvamVjdFByb2dyZXNzQ29sb3IsIHByb2plY3RQcm9ncmVzc1NlbGVjdGVkQ29sb3IsIHByb2plY3RCYWNrZ3JvdW5kQ29sb3IsIHByb2plY3RCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciwgbWlsZXN0b25lQmFja2dyb3VuZENvbG9yLCBtaWxlc3RvbmVCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvcikge1xuICB2YXIgYmFyVGFzaztcblxuICBzd2l0Y2ggKHRhc2sudHlwZSkge1xuICAgIGNhc2UgXCJtaWxlc3RvbmVcIjpcbiAgICAgIGJhclRhc2sgPSBjb252ZXJ0VG9NaWxlc3RvbmUodGFzaywgaW5kZXgsIGRhdGVzLCBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGhhbmRsZVdpZHRoLCBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsIG1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInByb2plY3RcIjpcbiAgICAgIGJhclRhc2sgPSBjb252ZXJ0VG9CYXIodGFzaywgaW5kZXgsIGRhdGVzLCBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGhhbmRsZVdpZHRoLCBydGwsIHByb2plY3RQcm9ncmVzc0NvbG9yLCBwcm9qZWN0UHJvZ3Jlc3NTZWxlY3RlZENvbG9yLCBwcm9qZWN0QmFja2dyb3VuZENvbG9yLCBwcm9qZWN0QmFja2dyb3VuZFNlbGVjdGVkQ29sb3IpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYmFyVGFzayA9IGNvbnZlcnRUb0Jhcih0YXNrLCBpbmRleCwgZGF0ZXMsIGNvbHVtbldpZHRoLCByb3dIZWlnaHQsIHRhc2tIZWlnaHQsIGJhckNvcm5lclJhZGl1cywgaGFuZGxlV2lkdGgsIHJ0bCwgYmFyUHJvZ3Jlc3NDb2xvciwgYmFyUHJvZ3Jlc3NTZWxlY3RlZENvbG9yLCBiYXJCYWNrZ3JvdW5kQ29sb3IsIGJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGJhclRhc2s7XG59O1xuXG52YXIgY29udmVydFRvQmFyID0gZnVuY3Rpb24gY29udmVydFRvQmFyKHRhc2ssIGluZGV4LCBkYXRlcywgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgdGFza0hlaWdodCwgYmFyQ29ybmVyUmFkaXVzLCBoYW5kbGVXaWR0aCwgcnRsLCBiYXJQcm9ncmVzc0NvbG9yLCBiYXJQcm9ncmVzc1NlbGVjdGVkQ29sb3IsIGJhckJhY2tncm91bmRDb2xvciwgYmFyQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IpIHtcbiAgdmFyIHgxO1xuICB2YXIgeDI7XG5cbiAgaWYgKHJ0bCkge1xuICAgIHgyID0gdGFza1hDb29yZGluYXRlUlRMKHRhc2suc3RhcnQsIGRhdGVzLCBjb2x1bW5XaWR0aCk7XG4gICAgeDEgPSB0YXNrWENvb3JkaW5hdGVSVEwodGFzay5lbmQsIGRhdGVzLCBjb2x1bW5XaWR0aCk7XG4gIH0gZWxzZSB7XG4gICAgeDEgPSB0YXNrWENvb3JkaW5hdGUodGFzay5zdGFydCwgZGF0ZXMsIGNvbHVtbldpZHRoKTtcbiAgICB4MiA9IHRhc2tYQ29vcmRpbmF0ZSh0YXNrLmVuZCwgZGF0ZXMsIGNvbHVtbldpZHRoKTtcbiAgfVxuXG4gIHZhciB0eXBlSW50ZXJuYWwgPSB0YXNrLnR5cGU7XG5cbiAgaWYgKHR5cGVJbnRlcm5hbCA9PT0gXCJ0YXNrXCIgJiYgeDIgLSB4MSA8IGhhbmRsZVdpZHRoICogMikge1xuICAgIHR5cGVJbnRlcm5hbCA9IFwic21hbGx0YXNrXCI7XG4gICAgeDIgPSB4MSArIGhhbmRsZVdpZHRoICogMjtcbiAgfVxuXG4gIHZhciBfcHJvZ3Jlc3NXaXRoQnlQYXJhbXMgPSBwcm9ncmVzc1dpdGhCeVBhcmFtcyh4MSwgeDIsIHRhc2sucHJvZ3Jlc3MsIHJ0bCksXG4gICAgICBwcm9ncmVzc1dpZHRoID0gX3Byb2dyZXNzV2l0aEJ5UGFyYW1zWzBdLFxuICAgICAgcHJvZ3Jlc3NYID0gX3Byb2dyZXNzV2l0aEJ5UGFyYW1zWzFdO1xuXG4gIHZhciB5ID0gdGFza1lDb29yZGluYXRlKGluZGV4LCByb3dIZWlnaHQsIHRhc2tIZWlnaHQpO1xuICB2YXIgaGlkZUNoaWxkcmVuID0gdGFzay50eXBlID09PSBcInByb2plY3RcIiA/IHRhc2suaGlkZUNoaWxkcmVuIDogdW5kZWZpbmVkO1xuXG4gIHZhciBzdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiBiYXJCYWNrZ3JvdW5kQ29sb3IsXG4gICAgYmFja2dyb3VuZFNlbGVjdGVkQ29sb3I6IGJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yLFxuICAgIHByb2dyZXNzQ29sb3I6IGJhclByb2dyZXNzQ29sb3IsXG4gICAgcHJvZ3Jlc3NTZWxlY3RlZENvbG9yOiBiYXJQcm9ncmVzc1NlbGVjdGVkQ29sb3JcbiAgfSwgdGFzay5zdHlsZXMpO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgdGFzaywge1xuICAgIHR5cGVJbnRlcm5hbDogdHlwZUludGVybmFsLFxuICAgIHgxOiB4MSxcbiAgICB4MjogeDIsXG4gICAgeTogeSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgcHJvZ3Jlc3NYOiBwcm9ncmVzc1gsXG4gICAgcHJvZ3Jlc3NXaWR0aDogcHJvZ3Jlc3NXaWR0aCxcbiAgICBiYXJDb3JuZXJSYWRpdXM6IGJhckNvcm5lclJhZGl1cyxcbiAgICBoYW5kbGVXaWR0aDogaGFuZGxlV2lkdGgsXG4gICAgaGlkZUNoaWxkcmVuOiBoaWRlQ2hpbGRyZW4sXG4gICAgaGVpZ2h0OiB0YXNrSGVpZ2h0LFxuICAgIGJhckNoaWxkcmVuOiBbXSxcbiAgICBzdHlsZXM6IHN0eWxlc1xuICB9KTtcbn07XG5cbnZhciBjb252ZXJ0VG9NaWxlc3RvbmUgPSBmdW5jdGlvbiBjb252ZXJ0VG9NaWxlc3RvbmUodGFzaywgaW5kZXgsIGRhdGVzLCBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGhhbmRsZVdpZHRoLCBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsIG1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yKSB7XG4gIHZhciB4ID0gdGFza1hDb29yZGluYXRlKHRhc2suc3RhcnQsIGRhdGVzLCBjb2x1bW5XaWR0aCk7XG4gIHZhciB5ID0gdGFza1lDb29yZGluYXRlKGluZGV4LCByb3dIZWlnaHQsIHRhc2tIZWlnaHQpO1xuICB2YXIgeDEgPSB4IC0gdGFza0hlaWdodCAqIDAuNTtcbiAgdmFyIHgyID0geCArIHRhc2tIZWlnaHQgKiAwLjU7XG4gIHZhciByb3RhdGVkSGVpZ2h0ID0gdGFza0hlaWdodCAvIDEuNDE0O1xuXG4gIHZhciBzdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsXG4gICAgYmFja2dyb3VuZFNlbGVjdGVkQ29sb3I6IG1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yLFxuICAgIHByb2dyZXNzQ29sb3I6IFwiXCIsXG4gICAgcHJvZ3Jlc3NTZWxlY3RlZENvbG9yOiBcIlwiXG4gIH0sIHRhc2suc3R5bGVzKTtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIHRhc2ssIHtcbiAgICBlbmQ6IHRhc2suc3RhcnQsXG4gICAgeDE6IHgxLFxuICAgIHgyOiB4MixcbiAgICB5OiB5LFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBwcm9ncmVzc1g6IDAsXG4gICAgcHJvZ3Jlc3NXaWR0aDogMCxcbiAgICBiYXJDb3JuZXJSYWRpdXM6IGJhckNvcm5lclJhZGl1cyxcbiAgICBoYW5kbGVXaWR0aDogaGFuZGxlV2lkdGgsXG4gICAgdHlwZUludGVybmFsOiB0YXNrLnR5cGUsXG4gICAgcHJvZ3Jlc3M6IDAsXG4gICAgaGVpZ2h0OiByb3RhdGVkSGVpZ2h0LFxuICAgIGhpZGVDaGlsZHJlbjogdW5kZWZpbmVkLFxuICAgIGJhckNoaWxkcmVuOiBbXSxcbiAgICBzdHlsZXM6IHN0eWxlc1xuICB9KTtcbn07XG5cbnZhciB0YXNrWENvb3JkaW5hdGUgPSBmdW5jdGlvbiB0YXNrWENvb3JkaW5hdGUoeERhdGUsIGRhdGVzLCBjb2x1bW5XaWR0aCkge1xuICB2YXIgaW5kZXggPSBkYXRlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGQpIHtcbiAgICByZXR1cm4gZC5nZXRUaW1lKCkgPj0geERhdGUuZ2V0VGltZSgpO1xuICB9KSAtIDE7XG4gIHZhciByZW1haW5kZXJNaWxsaXMgPSB4RGF0ZS5nZXRUaW1lKCkgLSBkYXRlc1tpbmRleF0uZ2V0VGltZSgpO1xuICB2YXIgcGVyY2VudE9mSW50ZXJ2YWwgPSByZW1haW5kZXJNaWxsaXMgLyAoZGF0ZXNbaW5kZXggKyAxXS5nZXRUaW1lKCkgLSBkYXRlc1tpbmRleF0uZ2V0VGltZSgpKTtcbiAgdmFyIHggPSBpbmRleCAqIGNvbHVtbldpZHRoICsgcGVyY2VudE9mSW50ZXJ2YWwgKiBjb2x1bW5XaWR0aDtcbiAgcmV0dXJuIHg7XG59O1xuXG52YXIgdGFza1hDb29yZGluYXRlUlRMID0gZnVuY3Rpb24gdGFza1hDb29yZGluYXRlUlRMKHhEYXRlLCBkYXRlcywgY29sdW1uV2lkdGgpIHtcbiAgdmFyIHggPSB0YXNrWENvb3JkaW5hdGUoeERhdGUsIGRhdGVzLCBjb2x1bW5XaWR0aCk7XG4gIHggKz0gY29sdW1uV2lkdGg7XG4gIHJldHVybiB4O1xufTtcblxudmFyIHRhc2tZQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uIHRhc2tZQ29vcmRpbmF0ZShpbmRleCwgcm93SGVpZ2h0LCB0YXNrSGVpZ2h0KSB7XG4gIHZhciB5ID0gaW5kZXggKiByb3dIZWlnaHQgKyAocm93SGVpZ2h0IC0gdGFza0hlaWdodCkgLyAyO1xuICByZXR1cm4geTtcbn07XG5cbnZhciBwcm9ncmVzc1dpdGhCeVBhcmFtcyA9IGZ1bmN0aW9uIHByb2dyZXNzV2l0aEJ5UGFyYW1zKHRhc2tYMSwgdGFza1gyLCBwcm9ncmVzcywgcnRsKSB7XG4gIHZhciBwcm9ncmVzc1dpZHRoID0gKHRhc2tYMiAtIHRhc2tYMSkgKiBwcm9ncmVzcyAqIDAuMDE7XG4gIHZhciBwcm9ncmVzc1g7XG5cbiAgaWYgKHJ0bCkge1xuICAgIHByb2dyZXNzWCA9IHRhc2tYMiAtIHByb2dyZXNzV2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3NYID0gdGFza1gxO1xuICB9XG5cbiAgcmV0dXJuIFtwcm9ncmVzc1dpZHRoLCBwcm9ncmVzc1hdO1xufTtcblxudmFyIHByb2dyZXNzQnlYID0gZnVuY3Rpb24gcHJvZ3Jlc3NCeVgoeCwgdGFzaykge1xuICBpZiAoeCA+PSB0YXNrLngyKSByZXR1cm4gMTAwO2Vsc2UgaWYgKHggPD0gdGFzay54MSkgcmV0dXJuIDA7ZWxzZSB7XG4gICAgdmFyIGJhcldpZHRoID0gdGFzay54MiAtIHRhc2sueDE7XG4gICAgdmFyIHByb2dyZXNzUGVyY2VudCA9IE1hdGgucm91bmQoKHggLSB0YXNrLngxKSAqIDEwMCAvIGJhcldpZHRoKTtcbiAgICByZXR1cm4gcHJvZ3Jlc3NQZXJjZW50O1xuICB9XG59O1xuXG52YXIgcHJvZ3Jlc3NCeVhSVEwgPSBmdW5jdGlvbiBwcm9ncmVzc0J5WFJUTCh4LCB0YXNrKSB7XG4gIGlmICh4ID49IHRhc2sueDIpIHJldHVybiAwO2Vsc2UgaWYgKHggPD0gdGFzay54MSkgcmV0dXJuIDEwMDtlbHNlIHtcbiAgICB2YXIgYmFyV2lkdGggPSB0YXNrLngyIC0gdGFzay54MTtcbiAgICB2YXIgcHJvZ3Jlc3NQZXJjZW50ID0gTWF0aC5yb3VuZCgodGFzay54MiAtIHgpICogMTAwIC8gYmFyV2lkdGgpO1xuICAgIHJldHVybiBwcm9ncmVzc1BlcmNlbnQ7XG4gIH1cbn07XG5cbnZhciBnZXRQcm9ncmVzc1BvaW50ID0gZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NQb2ludChwcm9ncmVzc1gsIHRhc2tZLCB0YXNrSGVpZ2h0KSB7XG4gIHZhciBwb2ludCA9IFtwcm9ncmVzc1ggLSA1LCB0YXNrWSArIHRhc2tIZWlnaHQsIHByb2dyZXNzWCArIDUsIHRhc2tZICsgdGFza0hlaWdodCwgcHJvZ3Jlc3NYLCB0YXNrWSArIHRhc2tIZWlnaHQgLSA4LjY2XTtcbiAgcmV0dXJuIHBvaW50LmpvaW4oXCIsXCIpO1xufTtcblxudmFyIHN0YXJ0QnlYID0gZnVuY3Rpb24gc3RhcnRCeVgoeCwgeFN0ZXAsIHRhc2spIHtcbiAgaWYgKHggPj0gdGFzay54MiAtIHRhc2suaGFuZGxlV2lkdGggKiAyKSB7XG4gICAgeCA9IHRhc2sueDIgLSB0YXNrLmhhbmRsZVdpZHRoICogMjtcbiAgfVxuXG4gIHZhciBzdGVwcyA9IE1hdGgucm91bmQoKHggLSB0YXNrLngxKSAvIHhTdGVwKTtcbiAgdmFyIGFkZGl0aW9uYWxYVmFsdWUgPSBzdGVwcyAqIHhTdGVwO1xuICB2YXIgbmV3WCA9IHRhc2sueDEgKyBhZGRpdGlvbmFsWFZhbHVlO1xuICByZXR1cm4gbmV3WDtcbn07XG5cbnZhciBlbmRCeVggPSBmdW5jdGlvbiBlbmRCeVgoeCwgeFN0ZXAsIHRhc2spIHtcbiAgaWYgKHggPD0gdGFzay54MSArIHRhc2suaGFuZGxlV2lkdGggKiAyKSB7XG4gICAgeCA9IHRhc2sueDEgKyB0YXNrLmhhbmRsZVdpZHRoICogMjtcbiAgfVxuXG4gIHZhciBzdGVwcyA9IE1hdGgucm91bmQoKHggLSB0YXNrLngyKSAvIHhTdGVwKTtcbiAgdmFyIGFkZGl0aW9uYWxYVmFsdWUgPSBzdGVwcyAqIHhTdGVwO1xuICB2YXIgbmV3WCA9IHRhc2sueDIgKyBhZGRpdGlvbmFsWFZhbHVlO1xuICByZXR1cm4gbmV3WDtcbn07XG5cbnZhciBtb3ZlQnlYID0gZnVuY3Rpb24gbW92ZUJ5WCh4LCB4U3RlcCwgdGFzaykge1xuICB2YXIgc3RlcHMgPSBNYXRoLnJvdW5kKCh4IC0gdGFzay54MSkgLyB4U3RlcCk7XG4gIHZhciBhZGRpdGlvbmFsWFZhbHVlID0gc3RlcHMgKiB4U3RlcDtcbiAgdmFyIG5ld1gxID0gdGFzay54MSArIGFkZGl0aW9uYWxYVmFsdWU7XG4gIHZhciBuZXdYMiA9IG5ld1gxICsgdGFzay54MiAtIHRhc2sueDE7XG4gIHJldHVybiBbbmV3WDEsIG5ld1gyXTtcbn07XG5cbnZhciBkYXRlQnlYID0gZnVuY3Rpb24gZGF0ZUJ5WCh4LCB0YXNrWCwgdGFza0RhdGUsIHhTdGVwLCB0aW1lU3RlcCkge1xuICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKCh4IC0gdGFza1gpIC8geFN0ZXAgKiB0aW1lU3RlcCArIHRhc2tEYXRlLmdldFRpbWUoKSk7XG4gIG5ld0RhdGUgPSBuZXcgRGF0ZShuZXdEYXRlLmdldFRpbWUoKSArIChuZXdEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSB0YXNrRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwKTtcbiAgcmV0dXJuIG5ld0RhdGU7XG59O1xuXG52YXIgaGFuZGxlVGFza0J5U1ZHTW91c2VFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnQoc3ZnWCwgYWN0aW9uLCBzZWxlY3RlZFRhc2ssIHhTdGVwLCB0aW1lU3RlcCwgaW5pdEV2ZW50WDFEZWx0YSwgcnRsKSB7XG4gIHZhciByZXN1bHQ7XG5cbiAgc3dpdGNoIChzZWxlY3RlZFRhc2sudHlwZSkge1xuICAgIGNhc2UgXCJtaWxlc3RvbmVcIjpcbiAgICAgIHJlc3VsdCA9IGhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnRGb3JNaWxlc3RvbmUoc3ZnWCwgYWN0aW9uLCBzZWxlY3RlZFRhc2ssIHhTdGVwLCB0aW1lU3RlcCwgaW5pdEV2ZW50WDFEZWx0YSk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXN1bHQgPSBoYW5kbGVUYXNrQnlTVkdNb3VzZUV2ZW50Rm9yQmFyKHN2Z1gsIGFjdGlvbiwgc2VsZWN0ZWRUYXNrLCB4U3RlcCwgdGltZVN0ZXAsIGluaXRFdmVudFgxRGVsdGEsIHJ0bCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgaGFuZGxlVGFza0J5U1ZHTW91c2VFdmVudEZvckJhciA9IGZ1bmN0aW9uIGhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnRGb3JCYXIoc3ZnWCwgYWN0aW9uLCBzZWxlY3RlZFRhc2ssIHhTdGVwLCB0aW1lU3RlcCwgaW5pdEV2ZW50WDFEZWx0YSwgcnRsKSB7XG4gIHZhciBjaGFuZ2VkVGFzayA9IF9leHRlbmRzKHt9LCBzZWxlY3RlZFRhc2spO1xuXG4gIHZhciBpc0NoYW5nZWQgPSBmYWxzZTtcblxuICBzd2l0Y2ggKGFjdGlvbikge1xuICAgIGNhc2UgXCJwcm9ncmVzc1wiOlxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBjaGFuZ2VkVGFzay5wcm9ncmVzcyA9IHByb2dyZXNzQnlYUlRMKHN2Z1gsIHNlbGVjdGVkVGFzayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFuZ2VkVGFzay5wcm9ncmVzcyA9IHByb2dyZXNzQnlYKHN2Z1gsIHNlbGVjdGVkVGFzayk7XG4gICAgICB9XG5cbiAgICAgIGlzQ2hhbmdlZCA9IGNoYW5nZWRUYXNrLnByb2dyZXNzICE9PSBzZWxlY3RlZFRhc2sucHJvZ3Jlc3M7XG5cbiAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgdmFyIF9wcm9ncmVzc1dpdGhCeVBhcmFtczIgPSBwcm9ncmVzc1dpdGhCeVBhcmFtcyhjaGFuZ2VkVGFzay54MSwgY2hhbmdlZFRhc2sueDIsIGNoYW5nZWRUYXNrLnByb2dyZXNzLCBydGwpLFxuICAgICAgICAgICAgcHJvZ3Jlc3NXaWR0aCA9IF9wcm9ncmVzc1dpdGhCeVBhcmFtczJbMF0sXG4gICAgICAgICAgICBwcm9ncmVzc1ggPSBfcHJvZ3Jlc3NXaXRoQnlQYXJhbXMyWzFdO1xuXG4gICAgICAgIGNoYW5nZWRUYXNrLnByb2dyZXNzV2lkdGggPSBwcm9ncmVzc1dpZHRoO1xuICAgICAgICBjaGFuZ2VkVGFzay5wcm9ncmVzc1ggPSBwcm9ncmVzc1g7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInN0YXJ0XCI6XG4gICAgICB7XG4gICAgICAgIHZhciBuZXdYMSA9IHN0YXJ0QnlYKHN2Z1gsIHhTdGVwLCBzZWxlY3RlZFRhc2spO1xuICAgICAgICBjaGFuZ2VkVGFzay54MSA9IG5ld1gxO1xuICAgICAgICBpc0NoYW5nZWQgPSBjaGFuZ2VkVGFzay54MSAhPT0gc2VsZWN0ZWRUYXNrLngxO1xuXG4gICAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgICBjaGFuZ2VkVGFzay5lbmQgPSBkYXRlQnlYKG5ld1gxLCBzZWxlY3RlZFRhc2sueDEsIHNlbGVjdGVkVGFzay5lbmQsIHhTdGVwLCB0aW1lU3RlcCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZWRUYXNrLnN0YXJ0ID0gZGF0ZUJ5WChuZXdYMSwgc2VsZWN0ZWRUYXNrLngxLCBzZWxlY3RlZFRhc2suc3RhcnQsIHhTdGVwLCB0aW1lU3RlcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9wcm9ncmVzc1dpdGhCeVBhcmFtczMgPSBwcm9ncmVzc1dpdGhCeVBhcmFtcyhjaGFuZ2VkVGFzay54MSwgY2hhbmdlZFRhc2sueDIsIGNoYW5nZWRUYXNrLnByb2dyZXNzLCBydGwpLFxuICAgICAgICAgICAgICBfcHJvZ3Jlc3NXaWR0aCA9IF9wcm9ncmVzc1dpdGhCeVBhcmFtczNbMF0sXG4gICAgICAgICAgICAgIF9wcm9ncmVzc1ggPSBfcHJvZ3Jlc3NXaXRoQnlQYXJhbXMzWzFdO1xuXG4gICAgICAgICAgY2hhbmdlZFRhc2sucHJvZ3Jlc3NXaWR0aCA9IF9wcm9ncmVzc1dpZHRoO1xuICAgICAgICAgIGNoYW5nZWRUYXNrLnByb2dyZXNzWCA9IF9wcm9ncmVzc1g7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgIHtcbiAgICAgICAgdmFyIG5ld1gyID0gZW5kQnlYKHN2Z1gsIHhTdGVwLCBzZWxlY3RlZFRhc2spO1xuICAgICAgICBjaGFuZ2VkVGFzay54MiA9IG5ld1gyO1xuICAgICAgICBpc0NoYW5nZWQgPSBjaGFuZ2VkVGFzay54MiAhPT0gc2VsZWN0ZWRUYXNrLngyO1xuXG4gICAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgICBjaGFuZ2VkVGFzay5zdGFydCA9IGRhdGVCeVgobmV3WDIsIHNlbGVjdGVkVGFzay54Miwgc2VsZWN0ZWRUYXNrLnN0YXJ0LCB4U3RlcCwgdGltZVN0ZXApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFuZ2VkVGFzay5lbmQgPSBkYXRlQnlYKG5ld1gyLCBzZWxlY3RlZFRhc2sueDIsIHNlbGVjdGVkVGFzay5lbmQsIHhTdGVwLCB0aW1lU3RlcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9wcm9ncmVzc1dpdGhCeVBhcmFtczQgPSBwcm9ncmVzc1dpdGhCeVBhcmFtcyhjaGFuZ2VkVGFzay54MSwgY2hhbmdlZFRhc2sueDIsIGNoYW5nZWRUYXNrLnByb2dyZXNzLCBydGwpLFxuICAgICAgICAgICAgICBfcHJvZ3Jlc3NXaWR0aDIgPSBfcHJvZ3Jlc3NXaXRoQnlQYXJhbXM0WzBdLFxuICAgICAgICAgICAgICBfcHJvZ3Jlc3NYMiA9IF9wcm9ncmVzc1dpdGhCeVBhcmFtczRbMV07XG5cbiAgICAgICAgICBjaGFuZ2VkVGFzay5wcm9ncmVzc1dpZHRoID0gX3Byb2dyZXNzV2lkdGgyO1xuICAgICAgICAgIGNoYW5nZWRUYXNrLnByb2dyZXNzWCA9IF9wcm9ncmVzc1gyO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlIFwibW92ZVwiOlxuICAgICAge1xuICAgICAgICB2YXIgX21vdmVCeVggPSBtb3ZlQnlYKHN2Z1ggLSBpbml0RXZlbnRYMURlbHRhLCB4U3RlcCwgc2VsZWN0ZWRUYXNrKSxcbiAgICAgICAgICAgIG5ld01vdmVYMSA9IF9tb3ZlQnlYWzBdLFxuICAgICAgICAgICAgbmV3TW92ZVgyID0gX21vdmVCeVhbMV07XG5cbiAgICAgICAgaXNDaGFuZ2VkID0gbmV3TW92ZVgxICE9PSBzZWxlY3RlZFRhc2sueDE7XG5cbiAgICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICAgIGNoYW5nZWRUYXNrLnN0YXJ0ID0gZGF0ZUJ5WChuZXdNb3ZlWDEsIHNlbGVjdGVkVGFzay54MSwgc2VsZWN0ZWRUYXNrLnN0YXJ0LCB4U3RlcCwgdGltZVN0ZXApO1xuICAgICAgICAgIGNoYW5nZWRUYXNrLmVuZCA9IGRhdGVCeVgobmV3TW92ZVgyLCBzZWxlY3RlZFRhc2sueDIsIHNlbGVjdGVkVGFzay5lbmQsIHhTdGVwLCB0aW1lU3RlcCk7XG4gICAgICAgICAgY2hhbmdlZFRhc2sueDEgPSBuZXdNb3ZlWDE7XG4gICAgICAgICAgY2hhbmdlZFRhc2sueDIgPSBuZXdNb3ZlWDI7XG5cbiAgICAgICAgICB2YXIgX3Byb2dyZXNzV2l0aEJ5UGFyYW1zNSA9IHByb2dyZXNzV2l0aEJ5UGFyYW1zKGNoYW5nZWRUYXNrLngxLCBjaGFuZ2VkVGFzay54MiwgY2hhbmdlZFRhc2sucHJvZ3Jlc3MsIHJ0bCksXG4gICAgICAgICAgICAgIF9wcm9ncmVzc1dpZHRoMyA9IF9wcm9ncmVzc1dpdGhCeVBhcmFtczVbMF0sXG4gICAgICAgICAgICAgIF9wcm9ncmVzc1gzID0gX3Byb2dyZXNzV2l0aEJ5UGFyYW1zNVsxXTtcblxuICAgICAgICAgIGNoYW5nZWRUYXNrLnByb2dyZXNzV2lkdGggPSBfcHJvZ3Jlc3NXaWR0aDM7XG4gICAgICAgICAgY2hhbmdlZFRhc2sucHJvZ3Jlc3NYID0gX3Byb2dyZXNzWDM7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNDaGFuZ2VkOiBpc0NoYW5nZWQsXG4gICAgY2hhbmdlZFRhc2s6IGNoYW5nZWRUYXNrXG4gIH07XG59O1xuXG52YXIgaGFuZGxlVGFza0J5U1ZHTW91c2VFdmVudEZvck1pbGVzdG9uZSA9IGZ1bmN0aW9uIGhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnRGb3JNaWxlc3RvbmUoc3ZnWCwgYWN0aW9uLCBzZWxlY3RlZFRhc2ssIHhTdGVwLCB0aW1lU3RlcCwgaW5pdEV2ZW50WDFEZWx0YSkge1xuICB2YXIgY2hhbmdlZFRhc2sgPSBfZXh0ZW5kcyh7fSwgc2VsZWN0ZWRUYXNrKTtcblxuICB2YXIgaXNDaGFuZ2VkID0gZmFsc2U7XG5cbiAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICBjYXNlIFwibW92ZVwiOlxuICAgICAge1xuICAgICAgICB2YXIgX21vdmVCeVgyID0gbW92ZUJ5WChzdmdYIC0gaW5pdEV2ZW50WDFEZWx0YSwgeFN0ZXAsIHNlbGVjdGVkVGFzayksXG4gICAgICAgICAgICBuZXdNb3ZlWDEgPSBfbW92ZUJ5WDJbMF0sXG4gICAgICAgICAgICBuZXdNb3ZlWDIgPSBfbW92ZUJ5WDJbMV07XG5cbiAgICAgICAgaXNDaGFuZ2VkID0gbmV3TW92ZVgxICE9PSBzZWxlY3RlZFRhc2sueDE7XG5cbiAgICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICAgIGNoYW5nZWRUYXNrLnN0YXJ0ID0gZGF0ZUJ5WChuZXdNb3ZlWDEsIHNlbGVjdGVkVGFzay54MSwgc2VsZWN0ZWRUYXNrLnN0YXJ0LCB4U3RlcCwgdGltZVN0ZXApO1xuICAgICAgICAgIGNoYW5nZWRUYXNrLmVuZCA9IGNoYW5nZWRUYXNrLnN0YXJ0O1xuICAgICAgICAgIGNoYW5nZWRUYXNrLngxID0gbmV3TW92ZVgxO1xuICAgICAgICAgIGNoYW5nZWRUYXNrLngyID0gbmV3TW92ZVgyO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzQ2hhbmdlZDogaXNDaGFuZ2VkLFxuICAgIGNoYW5nZWRUYXNrOiBjaGFuZ2VkVGFza1xuICB9O1xufTtcblxuZnVuY3Rpb24gaXNLZXlib2FyZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5rZXkgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHJlbW92ZUhpZGRlblRhc2tzKHRhc2tzKSB7XG4gIHZhciBncm91cGVkVGFza3MgPSB0YXNrcy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5oaWRlQ2hpbGRyZW4gJiYgdC50eXBlID09PSBcInByb2plY3RcIjtcbiAgfSk7XG5cbiAgaWYgKGdyb3VwZWRUYXNrcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuICAgICAgdmFyIGdyb3VwZWRUYXNrID0gZ3JvdXBlZFRhc2tzW2ldO1xuICAgICAgdmFyIGNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4odGFza3MsIGdyb3VwZWRUYXNrKTtcbiAgICAgIHRhc2tzID0gdGFza3MuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbi5pbmRleE9mKHQpID09PSAtMTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgZ3JvdXBlZFRhc2tzLmxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgX2xvb3AoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhc2tzO1xufVxuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbih0YXNrTGlzdCwgdGFzaykge1xuICB2YXIgdGFza3MgPSBbXTtcblxuICBpZiAodGFzay50eXBlICE9PSBcInByb2plY3RcIikge1xuICAgIHRhc2tzID0gdGFza0xpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5kZXBlbmRlbmNpZXMgJiYgdC5kZXBlbmRlbmNpZXMuaW5kZXhPZih0YXNrLmlkKSAhPT0gLTE7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGFza3MgPSB0YXNrTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LnByb2plY3QgJiYgdC5wcm9qZWN0ID09PSB0YXNrLmlkO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRhc2tDaGlsZHJlbiA9IFtdO1xuICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgdGFza0NoaWxkcmVuLnB1c2guYXBwbHkodGFza0NoaWxkcmVuLCBnZXRDaGlsZHJlbih0YXNrTGlzdCwgdCkpO1xuICB9KTtcbiAgdGFza3MgPSB0YXNrcy5jb25jYXQodGFza3MsIHRhc2tDaGlsZHJlbik7XG4gIHJldHVybiB0YXNrcztcbn1cblxudmFyIHNvcnRUYXNrcyA9IGZ1bmN0aW9uIHNvcnRUYXNrcyh0YXNrQSwgdGFza0IpIHtcbiAgdmFyIG9yZGVyQSA9IHRhc2tBLmRpc3BsYXlPcmRlciB8fCBOdW1iZXIuTUFYX1ZBTFVFO1xuICB2YXIgb3JkZXJCID0gdGFza0IuZGlzcGxheU9yZGVyIHx8IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgaWYgKG9yZGVyQSA+IG9yZGVyQikge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKG9yZGVyQSA8IG9yZGVyQikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxudmFyIHN0eWxlcyQ2ID0ge1wiYmFyV3JhcHBlclwiOlwiX0t4U1hTXCIsXCJiYXJIYW5kbGVcIjpcIl8zd181dVwiLFwiYmFyQmFja2dyb3VuZFwiOlwiXzMxRVJQXCJ9O1xuXG52YXIgQmFyRGlzcGxheSA9IGZ1bmN0aW9uIEJhckRpc3BsYXkoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmLmlzU2VsZWN0ZWQsXG4gICAgICBwcm9ncmVzc1ggPSBfcmVmLnByb2dyZXNzWCxcbiAgICAgIHByb2dyZXNzV2lkdGggPSBfcmVmLnByb2dyZXNzV2lkdGgsXG4gICAgICBiYXJDb3JuZXJSYWRpdXMgPSBfcmVmLmJhckNvcm5lclJhZGl1cyxcbiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgb25Nb3VzZURvd24gPSBfcmVmLm9uTW91c2VEb3duO1xuXG4gIHZhciBnZXRQcm9jZXNzQ29sb3IgPSBmdW5jdGlvbiBnZXRQcm9jZXNzQ29sb3IoKSB7XG4gICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyBzdHlsZXMucHJvZ3Jlc3NTZWxlY3RlZENvbG9yIDogc3R5bGVzLnByb2dyZXNzQ29sb3I7XG4gIH07XG5cbiAgdmFyIGdldEJhckNvbG9yID0gZnVuY3Rpb24gZ2V0QmFyQ29sb3IoKSB7XG4gICAgcmV0dXJuIGlzU2VsZWN0ZWQgPyBzdHlsZXMuYmFja2dyb3VuZFNlbGVjdGVkQ29sb3IgOiBzdHlsZXMuYmFja2dyb3VuZENvbG9yO1xuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIHtcbiAgICB4OiB4LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICB5OiB5LFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHJ5OiBiYXJDb3JuZXJSYWRpdXMsXG4gICAgcng6IGJhckNvcm5lclJhZGl1cyxcbiAgICBmaWxsOiBnZXRCYXJDb2xvcigpLFxuICAgIGNsYXNzTmFtZTogc3R5bGVzJDYuYmFyQmFja2dyb3VuZFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIHg6IHByb2dyZXNzWCxcbiAgICB3aWR0aDogcHJvZ3Jlc3NXaWR0aCxcbiAgICB5OiB5LFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHJ5OiBiYXJDb3JuZXJSYWRpdXMsXG4gICAgcng6IGJhckNvcm5lclJhZGl1cyxcbiAgICBmaWxsOiBnZXRQcm9jZXNzQ29sb3IoKVxuICB9KSk7XG59O1xuXG52YXIgQmFyRGF0ZUhhbmRsZSA9IGZ1bmN0aW9uIEJhckRhdGVIYW5kbGUoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGJhckNvcm5lclJhZGl1cyA9IF9yZWYuYmFyQ29ybmVyUmFkaXVzLFxuICAgICAgb25Nb3VzZURvd24gPSBfcmVmLm9uTW91c2VEb3duO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIHg6IHgsXG4gICAgeTogeSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkNi5iYXJIYW5kbGUsXG4gICAgcnk6IGJhckNvcm5lclJhZGl1cyxcbiAgICByeDogYmFyQ29ybmVyUmFkaXVzLFxuICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93blxuICB9KTtcbn07XG5cbnZhciBCYXJQcm9ncmVzc0hhbmRsZSA9IGZ1bmN0aW9uIEJhclByb2dyZXNzSGFuZGxlKF9yZWYpIHtcbiAgdmFyIHByb2dyZXNzUG9pbnQgPSBfcmVmLnByb2dyZXNzUG9pbnQsXG4gICAgICBvbk1vdXNlRG93biA9IF9yZWYub25Nb3VzZURvd247XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwicG9seWdvblwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkNi5iYXJIYW5kbGUsXG4gICAgcG9pbnRzOiBwcm9ncmVzc1BvaW50LFxuICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93blxuICB9KTtcbn07XG5cbnZhciBCYXIgPSBmdW5jdGlvbiBCYXIoX3JlZikge1xuICB2YXIgdGFzayA9IF9yZWYudGFzayxcbiAgICAgIGlzUHJvZ3Jlc3NDaGFuZ2VhYmxlID0gX3JlZi5pc1Byb2dyZXNzQ2hhbmdlYWJsZSxcbiAgICAgIGlzRGF0ZUNoYW5nZWFibGUgPSBfcmVmLmlzRGF0ZUNoYW5nZWFibGUsXG4gICAgICBydGwgPSBfcmVmLnJ0bCxcbiAgICAgIG9uRXZlbnRTdGFydCA9IF9yZWYub25FdmVudFN0YXJ0LFxuICAgICAgaXNTZWxlY3RlZCA9IF9yZWYuaXNTZWxlY3RlZDtcbiAgdmFyIHByb2dyZXNzUG9pbnQgPSBnZXRQcm9ncmVzc1BvaW50KCshcnRsICogdGFzay5wcm9ncmVzc1dpZHRoICsgdGFzay5wcm9ncmVzc1gsIHRhc2sueSwgdGFzay5oZWlnaHQpO1xuICB2YXIgaGFuZGxlSGVpZ2h0ID0gdGFzay5oZWlnaHQgLSAyO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJDYuYmFyV3JhcHBlcixcbiAgICB0YWJJbmRleDogMFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEJhckRpc3BsYXksIHtcbiAgICB4OiB0YXNrLngxLFxuICAgIHk6IHRhc2sueSxcbiAgICB3aWR0aDogdGFzay54MiAtIHRhc2sueDEsXG4gICAgaGVpZ2h0OiB0YXNrLmhlaWdodCxcbiAgICBwcm9ncmVzc1g6IHRhc2sucHJvZ3Jlc3NYLFxuICAgIHByb2dyZXNzV2lkdGg6IHRhc2sucHJvZ3Jlc3NXaWR0aCxcbiAgICBiYXJDb3JuZXJSYWRpdXM6IHRhc2suYmFyQ29ybmVyUmFkaXVzLFxuICAgIHN0eWxlczogdGFzay5zdHlsZXMsXG4gICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgaXNEYXRlQ2hhbmdlYWJsZSAmJiBvbkV2ZW50U3RhcnQoXCJtb3ZlXCIsIHRhc2ssIGUpO1xuICAgIH1cbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiaGFuZGxlR3JvdXBcIlxuICB9LCBpc0RhdGVDaGFuZ2VhYmxlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFyRGF0ZUhhbmRsZSwge1xuICAgIHg6IHRhc2sueDEgKyAxLFxuICAgIHk6IHRhc2sueSArIDEsXG4gICAgd2lkdGg6IHRhc2suaGFuZGxlV2lkdGgsXG4gICAgaGVpZ2h0OiBoYW5kbGVIZWlnaHQsXG4gICAgYmFyQ29ybmVyUmFkaXVzOiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgb25FdmVudFN0YXJ0KFwic3RhcnRcIiwgdGFzaywgZSk7XG4gICAgfVxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChCYXJEYXRlSGFuZGxlLCB7XG4gICAgeDogdGFzay54MiAtIHRhc2suaGFuZGxlV2lkdGggLSAxLFxuICAgIHk6IHRhc2sueSArIDEsXG4gICAgd2lkdGg6IHRhc2suaGFuZGxlV2lkdGgsXG4gICAgaGVpZ2h0OiBoYW5kbGVIZWlnaHQsXG4gICAgYmFyQ29ybmVyUmFkaXVzOiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgb25FdmVudFN0YXJ0KFwiZW5kXCIsIHRhc2ssIGUpO1xuICAgIH1cbiAgfSkpLCBpc1Byb2dyZXNzQ2hhbmdlYWJsZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhclByb2dyZXNzSGFuZGxlLCB7XG4gICAgcHJvZ3Jlc3NQb2ludDogcHJvZ3Jlc3NQb2ludCxcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgb25FdmVudFN0YXJ0KFwicHJvZ3Jlc3NcIiwgdGFzaywgZSk7XG4gICAgfVxuICB9KSkpO1xufTtcblxudmFyIEJhclNtYWxsID0gZnVuY3Rpb24gQmFyU21hbGwoX3JlZikge1xuICB2YXIgdGFzayA9IF9yZWYudGFzayxcbiAgICAgIGlzUHJvZ3Jlc3NDaGFuZ2VhYmxlID0gX3JlZi5pc1Byb2dyZXNzQ2hhbmdlYWJsZSxcbiAgICAgIGlzRGF0ZUNoYW5nZWFibGUgPSBfcmVmLmlzRGF0ZUNoYW5nZWFibGUsXG4gICAgICBvbkV2ZW50U3RhcnQgPSBfcmVmLm9uRXZlbnRTdGFydCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmLmlzU2VsZWN0ZWQ7XG4gIHZhciBwcm9ncmVzc1BvaW50ID0gZ2V0UHJvZ3Jlc3NQb2ludCh0YXNrLnByb2dyZXNzV2lkdGggKyB0YXNrLngxLCB0YXNrLnksIHRhc2suaGVpZ2h0KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQ2LmJhcldyYXBwZXIsXG4gICAgdGFiSW5kZXg6IDBcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChCYXJEaXNwbGF5LCB7XG4gICAgeDogdGFzay54MSxcbiAgICB5OiB0YXNrLnksXG4gICAgd2lkdGg6IHRhc2sueDIgLSB0YXNrLngxLFxuICAgIGhlaWdodDogdGFzay5oZWlnaHQsXG4gICAgcHJvZ3Jlc3NYOiB0YXNrLnByb2dyZXNzWCxcbiAgICBwcm9ncmVzc1dpZHRoOiB0YXNrLnByb2dyZXNzV2lkdGgsXG4gICAgYmFyQ29ybmVyUmFkaXVzOiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICBzdHlsZXM6IHRhc2suc3R5bGVzLFxuICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgIGlzRGF0ZUNoYW5nZWFibGUgJiYgb25FdmVudFN0YXJ0KFwibW92ZVwiLCB0YXNrLCBlKTtcbiAgICB9XG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgY2xhc3NOYW1lOiBcImhhbmRsZUdyb3VwXCJcbiAgfSwgaXNQcm9ncmVzc0NoYW5nZWFibGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChCYXJQcm9ncmVzc0hhbmRsZSwge1xuICAgIHByb2dyZXNzUG9pbnQ6IHByb2dyZXNzUG9pbnQsXG4gICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHtcbiAgICAgIG9uRXZlbnRTdGFydChcInByb2dyZXNzXCIsIHRhc2ssIGUpO1xuICAgIH1cbiAgfSkpKTtcbn07XG5cbnZhciBzdHlsZXMkNyA9IHtcIm1pbGVzdG9uZVdyYXBwZXJcIjpcIl9SUnIxM1wiLFwibWlsZXN0b25lQmFja2dyb3VuZFwiOlwiXzJQMkIxXCJ9O1xuXG52YXIgTWlsZXN0b25lID0gZnVuY3Rpb24gTWlsZXN0b25lKF9yZWYpIHtcbiAgdmFyIHRhc2sgPSBfcmVmLnRhc2ssXG4gICAgICBpc0RhdGVDaGFuZ2VhYmxlID0gX3JlZi5pc0RhdGVDaGFuZ2VhYmxlLFxuICAgICAgb25FdmVudFN0YXJ0ID0gX3JlZi5vbkV2ZW50U3RhcnQsXG4gICAgICBpc1NlbGVjdGVkID0gX3JlZi5pc1NlbGVjdGVkO1xuICB2YXIgdHJhbnNmb3JtID0gXCJyb3RhdGUoNDUgXCIgKyAodGFzay54MSArIHRhc2suaGVpZ2h0ICogMC4zNTYpICsgXCIgXFxuICAgIFwiICsgKHRhc2sueSArIHRhc2suaGVpZ2h0ICogMC44NSkgKyBcIilcIjtcblxuICB2YXIgZ2V0QmFyQ29sb3IgPSBmdW5jdGlvbiBnZXRCYXJDb2xvcigpIHtcbiAgICByZXR1cm4gaXNTZWxlY3RlZCA/IHRhc2suc3R5bGVzLmJhY2tncm91bmRTZWxlY3RlZENvbG9yIDogdGFzay5zdHlsZXMuYmFja2dyb3VuZENvbG9yO1xuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgdGFiSW5kZXg6IDAsXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkNy5taWxlc3RvbmVXcmFwcGVyXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIHtcbiAgICBmaWxsOiBnZXRCYXJDb2xvcigpLFxuICAgIHg6IHRhc2sueDEsXG4gICAgd2lkdGg6IHRhc2suaGVpZ2h0LFxuICAgIHk6IHRhc2sueSxcbiAgICBoZWlnaHQ6IHRhc2suaGVpZ2h0LFxuICAgIHJ4OiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICByeTogdGFzay5iYXJDb3JuZXJSYWRpdXMsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkNy5taWxlc3RvbmVCYWNrZ3JvdW5kLFxuICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICBpc0RhdGVDaGFuZ2VhYmxlICYmIG9uRXZlbnRTdGFydChcIm1vdmVcIiwgdGFzaywgZSk7XG4gICAgfVxuICB9KSk7XG59O1xuXG52YXIgc3R5bGVzJDggPSB7XCJwcm9qZWN0V3JhcHBlclwiOlwiXzFLSjZ4XCIsXCJwcm9qZWN0QmFja2dyb3VuZFwiOlwiXzJSYlZ5XCIsXCJwcm9qZWN0VG9wXCI6XCJfMnBaTUZcIn07XG5cbnZhciBQcm9qZWN0ID0gZnVuY3Rpb24gUHJvamVjdChfcmVmKSB7XG4gIHZhciB0YXNrID0gX3JlZi50YXNrLFxuICAgICAgaXNTZWxlY3RlZCA9IF9yZWYuaXNTZWxlY3RlZDtcbiAgdmFyIGJhckNvbG9yID0gaXNTZWxlY3RlZCA/IHRhc2suc3R5bGVzLmJhY2tncm91bmRTZWxlY3RlZENvbG9yIDogdGFzay5zdHlsZXMuYmFja2dyb3VuZENvbG9yO1xuICB2YXIgcHJvY2Vzc0NvbG9yID0gaXNTZWxlY3RlZCA/IHRhc2suc3R5bGVzLnByb2dyZXNzU2VsZWN0ZWRDb2xvciA6IHRhc2suc3R5bGVzLnByb2dyZXNzQ29sb3I7XG4gIHZhciBwcm9qZWN0V2l0aCA9IHRhc2sueDIgLSB0YXNrLngxO1xuICB2YXIgcHJvamVjdExlZnRUcmlhbmdsZSA9IFt0YXNrLngxLCB0YXNrLnkgKyB0YXNrLmhlaWdodCAvIDIgLSAxLCB0YXNrLngxLCB0YXNrLnkgKyB0YXNrLmhlaWdodCwgdGFzay54MSArIDE1LCB0YXNrLnkgKyB0YXNrLmhlaWdodCAvIDIgLSAxXS5qb2luKFwiLFwiKTtcbiAgdmFyIHByb2plY3RSaWdodFRyaWFuZ2xlID0gW3Rhc2sueDIsIHRhc2sueSArIHRhc2suaGVpZ2h0IC8gMiAtIDEsIHRhc2sueDIsIHRhc2sueSArIHRhc2suaGVpZ2h0LCB0YXNrLngyIC0gMTUsIHRhc2sueSArIHRhc2suaGVpZ2h0IC8gMiAtIDFdLmpvaW4oXCIsXCIpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIGNsYXNzTmFtZTogc3R5bGVzJDgucHJvamVjdFdyYXBwZXJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIGZpbGw6IGJhckNvbG9yLFxuICAgIHg6IHRhc2sueDEsXG4gICAgd2lkdGg6IHByb2plY3RXaXRoLFxuICAgIHk6IHRhc2sueSxcbiAgICBoZWlnaHQ6IHRhc2suaGVpZ2h0LFxuICAgIHJ4OiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICByeTogdGFzay5iYXJDb3JuZXJSYWRpdXMsXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkOC5wcm9qZWN0QmFja2dyb3VuZFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIHg6IHRhc2sucHJvZ3Jlc3NYLFxuICAgIHdpZHRoOiB0YXNrLnByb2dyZXNzV2lkdGgsXG4gICAgeTogdGFzay55LFxuICAgIGhlaWdodDogdGFzay5oZWlnaHQsXG4gICAgcnk6IHRhc2suYmFyQ29ybmVyUmFkaXVzLFxuICAgIHJ4OiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICBmaWxsOiBwcm9jZXNzQ29sb3JcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIHtcbiAgICBmaWxsOiBiYXJDb2xvcixcbiAgICB4OiB0YXNrLngxLFxuICAgIHdpZHRoOiBwcm9qZWN0V2l0aCxcbiAgICB5OiB0YXNrLnksXG4gICAgaGVpZ2h0OiB0YXNrLmhlaWdodCAvIDIsXG4gICAgcng6IHRhc2suYmFyQ29ybmVyUmFkaXVzLFxuICAgIHJ5OiB0YXNrLmJhckNvcm5lclJhZGl1cyxcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQ4LnByb2plY3RUb3BcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwb2x5Z29uXCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyQ4LnByb2plY3RUb3AsXG4gICAgcG9pbnRzOiBwcm9qZWN0TGVmdFRyaWFuZ2xlLFxuICAgIGZpbGw6IGJhckNvbG9yXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicG9seWdvblwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkOC5wcm9qZWN0VG9wLFxuICAgIHBvaW50czogcHJvamVjdFJpZ2h0VHJpYW5nbGUsXG4gICAgZmlsbDogYmFyQ29sb3JcbiAgfSkpO1xufTtcblxudmFyIHN0eWxlID0ge1wiYmFyTGFiZWxcIjpcIl8zelJKUVwiLFwiYmFyTGFiZWxPdXRzaWRlXCI6XCJfM0tjYU1cIn07XG5cbnZhciBUYXNrSXRlbSA9IGZ1bmN0aW9uIFRhc2tJdGVtKHByb3BzKSB7XG4gIHZhciBfcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpLFxuICAgICAgdGFzayA9IF9wcm9wcy50YXNrLFxuICAgICAgYXJyb3dJbmRlbnQgPSBfcHJvcHMuYXJyb3dJbmRlbnQsXG4gICAgICBpc0RlbGV0ZSA9IF9wcm9wcy5pc0RlbGV0ZSxcbiAgICAgIHRhc2tIZWlnaHQgPSBfcHJvcHMudGFza0hlaWdodCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcHJvcHMuaXNTZWxlY3RlZCxcbiAgICAgIHJ0bCA9IF9wcm9wcy5ydGwsXG4gICAgICBvbkV2ZW50U3RhcnQgPSBfcHJvcHMub25FdmVudFN0YXJ0O1xuXG4gIHZhciB0ZXh0UmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpKSxcbiAgICAgIHRhc2tJdGVtID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0VGFza0l0ZW0gPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSB1c2VTdGF0ZSh0cnVlKSxcbiAgICAgIGlzVGV4dEluc2lkZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRJc1RleHRJbnNpZGUgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc3dpdGNoICh0YXNrLnR5cGVJbnRlcm5hbCkge1xuICAgICAgY2FzZSBcIm1pbGVzdG9uZVwiOlxuICAgICAgICBzZXRUYXNrSXRlbShSZWFjdC5jcmVhdGVFbGVtZW50KE1pbGVzdG9uZSwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwicHJvamVjdFwiOlxuICAgICAgICBzZXRUYXNrSXRlbShSZWFjdC5jcmVhdGVFbGVtZW50KFByb2plY3QsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNtYWxsdGFza1wiOlxuICAgICAgICBzZXRUYXNrSXRlbShSZWFjdC5jcmVhdGVFbGVtZW50KEJhclNtYWxsLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcykpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNldFRhc2tJdGVtKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFyLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcykpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LCBbdGFzaywgaXNTZWxlY3RlZF0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldElzVGV4dEluc2lkZSh0ZXh0UmVmLmN1cnJlbnQuZ2V0QkJveCgpLndpZHRoIDwgdGFzay54MiAtIHRhc2sueDEpO1xuICAgIH1cbiAgfSwgW3RleHRSZWYsIHRhc2tdKTtcblxuICB2YXIgZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gICAgdmFyIHdpZHRoID0gdGFzay54MiAtIHRhc2sueDE7XG4gICAgdmFyIGhhc0NoaWxkID0gdGFzay5iYXJDaGlsZHJlbi5sZW5ndGggPiAwO1xuXG4gICAgaWYgKGlzVGV4dEluc2lkZSkge1xuICAgICAgcmV0dXJuIHRhc2sueDEgKyB3aWR0aCAqIDAuNTtcbiAgICB9XG5cbiAgICBpZiAocnRsICYmIHRleHRSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIHRhc2sueDEgLSB0ZXh0UmVmLmN1cnJlbnQuZ2V0QkJveCgpLndpZHRoIC0gYXJyb3dJbmRlbnQgKiAraGFzQ2hpbGQgLSBhcnJvd0luZGVudCAqIDAuMjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRhc2sueDEgKyB3aWR0aCArIGFycm93SW5kZW50ICogK2hhc0NoaWxkICsgYXJyb3dJbmRlbnQgKiAwLjI7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICBjYXNlIFwiRGVsZXRlXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKGlzRGVsZXRlKSBvbkV2ZW50U3RhcnQoXCJkZWxldGVcIiwgdGFzaywgZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uTW91c2VFbnRlcihlKSB7XG4gICAgICBvbkV2ZW50U3RhcnQoXCJtb3VzZWVudGVyXCIsIHRhc2ssIGUpO1xuICAgIH0sXG4gICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZSkge1xuICAgICAgb25FdmVudFN0YXJ0KFwibW91c2VsZWF2ZVwiLCB0YXNrLCBlKTtcbiAgICB9LFxuICAgIG9uRG91YmxlQ2xpY2s6IGZ1bmN0aW9uIG9uRG91YmxlQ2xpY2soZSkge1xuICAgICAgb25FdmVudFN0YXJ0KFwiZGJsY2xpY2tcIiwgdGFzaywgZSk7XG4gICAgfSxcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIG9uRXZlbnRTdGFydChcImNsaWNrXCIsIHRhc2ssIGUpO1xuICAgIH0sXG4gICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIG9uRXZlbnRTdGFydChcInNlbGVjdFwiLCB0YXNrKTtcbiAgICB9XG4gIH0sIHRhc2tJdGVtLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dFwiLCB7XG4gICAgeDogZ2V0WCgpLFxuICAgIHk6IHRhc2sueSArIHRhc2tIZWlnaHQgKiAwLjUsXG4gICAgY2xhc3NOYW1lOiBpc1RleHRJbnNpZGUgPyBzdHlsZS5iYXJMYWJlbCA6ICBzdHlsZS5iYXJMYWJlbE91dHNpZGUsXG4gICAgcmVmOiB0ZXh0UmVmXG4gIH0sIHRhc2submFtZSkpO1xufTtcblxudmFyIFRhc2tHYW50dENvbnRlbnQgPSBmdW5jdGlvbiBUYXNrR2FudHRDb250ZW50KF9yZWYpIHtcbiAgdmFyIF9zdmckY3VycmVudDtcblxuICB2YXIgdGFza3MgPSBfcmVmLnRhc2tzLFxuICAgICAgZGF0ZXMgPSBfcmVmLmRhdGVzLFxuICAgICAgZ2FudHRFdmVudCA9IF9yZWYuZ2FudHRFdmVudCxcbiAgICAgIHNlbGVjdGVkVGFzayA9IF9yZWYuc2VsZWN0ZWRUYXNrLFxuICAgICAgcm93SGVpZ2h0ID0gX3JlZi5yb3dIZWlnaHQsXG4gICAgICBjb2x1bW5XaWR0aCA9IF9yZWYuY29sdW1uV2lkdGgsXG4gICAgICB0aW1lU3RlcCA9IF9yZWYudGltZVN0ZXAsXG4gICAgICBzdmcgPSBfcmVmLnN2ZyxcbiAgICAgIHRhc2tIZWlnaHQgPSBfcmVmLnRhc2tIZWlnaHQsXG4gICAgICBhcnJvd0NvbG9yID0gX3JlZi5hcnJvd0NvbG9yLFxuICAgICAgYXJyb3dJbmRlbnQgPSBfcmVmLmFycm93SW5kZW50LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIHJ0bCA9IF9yZWYucnRsLFxuICAgICAgc2V0R2FudHRFdmVudCA9IF9yZWYuc2V0R2FudHRFdmVudCxcbiAgICAgIHNldEZhaWxlZFRhc2sgPSBfcmVmLnNldEZhaWxlZFRhc2ssXG4gICAgICBzZXRTZWxlY3RlZFRhc2sgPSBfcmVmLnNldFNlbGVjdGVkVGFzayxcbiAgICAgIG9uRGF0ZUNoYW5nZSA9IF9yZWYub25EYXRlQ2hhbmdlLFxuICAgICAgb25Qcm9ncmVzc0NoYW5nZSA9IF9yZWYub25Qcm9ncmVzc0NoYW5nZSxcbiAgICAgIG9uRG91YmxlQ2xpY2sgPSBfcmVmLm9uRG91YmxlQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25EZWxldGUgPSBfcmVmLm9uRGVsZXRlO1xuICB2YXIgcG9pbnQgPSBzdmcgPT09IG51bGwgfHwgc3ZnID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3N2ZyRjdXJyZW50ID0gc3ZnLmN1cnJlbnQpID09PSBudWxsIHx8IF9zdmckY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N2ZyRjdXJyZW50LmNyZWF0ZVNWR1BvaW50KCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKDApLFxuICAgICAgeFN0ZXAgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRYU3RlcCA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZVN0YXRlMiA9IHVzZVN0YXRlKDApLFxuICAgICAgaW5pdEV2ZW50WDFEZWx0YSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRJbml0RXZlbnRYMURlbHRhID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGlzTW92aW5nID0gX3VzZVN0YXRlM1swXSxcbiAgICAgIHNldElzTW92aW5nID0gX3VzZVN0YXRlM1sxXTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkYXRlRGVsdGEgPSBkYXRlc1sxXS5nZXRUaW1lKCkgLSBkYXRlc1swXS5nZXRUaW1lKCkgLSBkYXRlc1sxXS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwICsgZGF0ZXNbMF0uZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwICogMTAwMDtcbiAgICB2YXIgbmV3WFN0ZXAgPSB0aW1lU3RlcCAqIGNvbHVtbldpZHRoIC8gZGF0ZURlbHRhO1xuICAgIHNldFhTdGVwKG5ld1hTdGVwKTtcbiAgfSwgW2NvbHVtbldpZHRoLCBkYXRlcywgdGltZVN0ZXBdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgX3N2ZyRjdXJyZW50JGdldFNjcmVlO1xuXG4gICAgICAgIGlmICghZ2FudHRFdmVudC5jaGFuZ2VkVGFzayB8fCAhcG9pbnQgfHwgIShzdmcgIT09IG51bGwgJiYgc3ZnICE9PSB2b2lkIDAgJiYgc3ZnLmN1cnJlbnQpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYO1xuICAgICAgICB2YXIgY3Vyc29yID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKHN2ZyA9PT0gbnVsbCB8fCBzdmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUgPSBzdmcuY3VycmVudC5nZXRTY3JlZW5DVE0oKSkgPT09IG51bGwgfHwgX3N2ZyRjdXJyZW50JGdldFNjcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUuaW52ZXJzZSgpKTtcblxuICAgICAgICB2YXIgX2hhbmRsZVRhc2tCeVNWR01vdXNlID0gaGFuZGxlVGFza0J5U1ZHTW91c2VFdmVudChjdXJzb3IueCwgZ2FudHRFdmVudC5hY3Rpb24sIGdhbnR0RXZlbnQuY2hhbmdlZFRhc2ssIHhTdGVwLCB0aW1lU3RlcCwgaW5pdEV2ZW50WDFEZWx0YSwgcnRsKSxcbiAgICAgICAgICAgIGlzQ2hhbmdlZCA9IF9oYW5kbGVUYXNrQnlTVkdNb3VzZS5pc0NoYW5nZWQsXG4gICAgICAgICAgICBjaGFuZ2VkVGFzayA9IF9oYW5kbGVUYXNrQnlTVkdNb3VzZS5jaGFuZ2VkVGFzaztcblxuICAgICAgICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgICAgICAgc2V0R2FudHRFdmVudCh7XG4gICAgICAgICAgICBhY3Rpb246IGdhbnR0RXZlbnQuYWN0aW9uLFxuICAgICAgICAgICAgY2hhbmdlZFRhc2s6IGNoYW5nZWRUYXNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgX3N2ZyRjdXJyZW50JGdldFNjcmVlMjtcblxuICAgICAgICB2YXIgX3RlbXA2ID0gZnVuY3Rpb24gX3RlbXA2KCkge1xuICAgICAgICAgIGlmICghb3BlcmF0aW9uU3VjY2Vzcykge1xuICAgICAgICAgICAgc2V0RmFpbGVkVGFzayhvcmlnaW5hbFNlbGVjdGVkVGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhY3Rpb24gPSBnYW50dEV2ZW50LmFjdGlvbixcbiAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0ZWRUYXNrID0gZ2FudHRFdmVudC5vcmlnaW5hbFNlbGVjdGVkVGFzayxcbiAgICAgICAgICAgIGNoYW5nZWRUYXNrID0gZ2FudHRFdmVudC5jaGFuZ2VkVGFzaztcbiAgICAgICAgaWYgKCFjaGFuZ2VkVGFzayB8fCAhcG9pbnQgfHwgIShzdmcgIT09IG51bGwgJiYgc3ZnICE9PSB2b2lkIDAgJiYgc3ZnLmN1cnJlbnQpIHx8ICFvcmlnaW5hbFNlbGVjdGVkVGFzaykgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgdmFyIGN1cnNvciA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShzdmcgPT09IG51bGwgfHwgc3ZnID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3N2ZyRjdXJyZW50JGdldFNjcmVlMiA9IHN2Zy5jdXJyZW50LmdldFNjcmVlbkNUTSgpKSA9PT0gbnVsbCB8fCBfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUyLmludmVyc2UoKSk7XG5cbiAgICAgICAgdmFyIF9oYW5kbGVUYXNrQnlTVkdNb3VzZTIgPSBoYW5kbGVUYXNrQnlTVkdNb3VzZUV2ZW50KGN1cnNvci54LCBhY3Rpb24sIGNoYW5nZWRUYXNrLCB4U3RlcCwgdGltZVN0ZXAsIGluaXRFdmVudFgxRGVsdGEsIHJ0bCksXG4gICAgICAgICAgICBuZXdDaGFuZ2VkVGFzayA9IF9oYW5kbGVUYXNrQnlTVkdNb3VzZTIuY2hhbmdlZFRhc2s7XG5cbiAgICAgICAgdmFyIGlzTm90TGlrZU9yaWdpbmFsID0gb3JpZ2luYWxTZWxlY3RlZFRhc2suc3RhcnQgIT09IG5ld0NoYW5nZWRUYXNrLnN0YXJ0IHx8IG9yaWdpbmFsU2VsZWN0ZWRUYXNrLmVuZCAhPT0gbmV3Q2hhbmdlZFRhc2suZW5kIHx8IG9yaWdpbmFsU2VsZWN0ZWRUYXNrLnByb2dyZXNzICE9PSBuZXdDaGFuZ2VkVGFzay5wcm9ncmVzcztcbiAgICAgICAgc3ZnLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xuICAgICAgICBzdmcuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVNb3VzZVVwKTtcbiAgICAgICAgc2V0R2FudHRFdmVudCh7XG4gICAgICAgICAgYWN0aW9uOiBcIlwiXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRJc01vdmluZyhmYWxzZSk7XG4gICAgICAgIHZhciBvcGVyYXRpb25TdWNjZXNzID0gdHJ1ZTtcblxuICAgICAgICB2YXIgX3RlbXA3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICgoYWN0aW9uID09PSBcIm1vdmVcIiB8fCBhY3Rpb24gPT09IFwiZW5kXCIgfHwgYWN0aW9uID09PSBcInN0YXJ0XCIpICYmIG9uRGF0ZUNoYW5nZSAmJiBpc05vdExpa2VPcmlnaW5hbCkge1xuICAgICAgICAgICAgdmFyIF90ZW1wOCA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob25EYXRlQ2hhbmdlKG5ld0NoYW5nZWRUYXNrLCBuZXdDaGFuZ2VkVGFzay5iYXJDaGlsZHJlbikpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uU3VjY2VzcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBvcGVyYXRpb25TdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKF90ZW1wOCAmJiBfdGVtcDgudGhlbikgcmV0dXJuIF90ZW1wOC50aGVuKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF90ZW1wOSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKG9uUHJvZ3Jlc3NDaGFuZ2UgJiYgaXNOb3RMaWtlT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RlbXAxMCA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9uUHJvZ3Jlc3NDaGFuZ2UobmV3Q2hhbmdlZFRhc2ssIG5ld0NoYW5nZWRUYXNrLmJhckNoaWxkcmVuKSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvblN1Y2Nlc3MgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIG9wZXJhdGlvblN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChfdGVtcDEwICYmIF90ZW1wMTAudGhlbikgcmV0dXJuIF90ZW1wMTAudGhlbihmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgaWYgKF90ZW1wOSAmJiBfdGVtcDkudGhlbikgcmV0dXJuIF90ZW1wOS50aGVuKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0oKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90ZW1wNyAmJiBfdGVtcDcudGhlbiA/IF90ZW1wNy50aGVuKF90ZW1wNikgOiBfdGVtcDYoX3RlbXA3KSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFpc01vdmluZyAmJiAoZ2FudHRFdmVudC5hY3Rpb24gPT09IFwibW92ZVwiIHx8IGdhbnR0RXZlbnQuYWN0aW9uID09PSBcImVuZFwiIHx8IGdhbnR0RXZlbnQuYWN0aW9uID09PSBcInN0YXJ0XCIgfHwgZ2FudHRFdmVudC5hY3Rpb24gPT09IFwicHJvZ3Jlc3NcIikgJiYgc3ZnICE9PSBudWxsICYmIHN2ZyAhPT0gdm9pZCAwICYmIHN2Zy5jdXJyZW50KSB7XG4gICAgICBzdmcuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICBzdmcuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVNb3VzZVVwKTtcbiAgICAgIHNldElzTW92aW5nKHRydWUpO1xuICAgIH1cbiAgfSwgW2dhbnR0RXZlbnQsIHhTdGVwLCBpbml0RXZlbnRYMURlbHRhLCBvblByb2dyZXNzQ2hhbmdlLCB0aW1lU3RlcCwgb25EYXRlQ2hhbmdlLCBzdmcsIGlzTW92aW5nLCBwb2ludCwgcnRsLCBzZXRGYWlsZWRUYXNrLCBzZXRHYW50dEV2ZW50XSk7XG5cbiAgdmFyIGhhbmRsZUJhckV2ZW50U3RhcnQgPSBmdW5jdGlvbiBoYW5kbGVCYXJFdmVudFN0YXJ0KGFjdGlvbiwgdGFzaywgZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICBpZiAoYWN0aW9uID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZFRhc2sodGFzay5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaXNLZXlib2FyZEV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgdmFyIF90ZW1wMTQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RlbXAxNSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChvbkRlbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RlbXAxNiA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvbkRlbGV0ZSh0YXNrKSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldEdhbnR0RXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRUYXNrOiB0YXNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igb24gRGVsZXRlLiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90ZW1wMTYgJiYgX3RlbXAxNi50aGVuKSByZXR1cm4gX3RlbXAxNi50aGVuKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX3RlbXAxNSAmJiBfdGVtcDE1LnRoZW4pIHJldHVybiBfdGVtcDE1LnRoZW4oZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgIGlmIChfdGVtcDE0ICYmIF90ZW1wMTQudGhlbikgcmV0dXJuIF90ZW1wMTQudGhlbihmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwibW91c2VlbnRlclwiKSB7XG4gICAgICAgICAgICBpZiAoIWdhbnR0RXZlbnQuYWN0aW9uKSB7XG4gICAgICAgICAgICAgIHNldEdhbnR0RXZlbnQoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgICAgIGNoYW5nZWRUYXNrOiB0YXNrLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0ZWRUYXNrOiB0YXNrXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcIm1vdXNlbGVhdmVcIikge1xuICAgICAgICAgICAgaWYgKGdhbnR0RXZlbnQuYWN0aW9uID09PSBcIm1vdXNlZW50ZXJcIikge1xuICAgICAgICAgICAgICBzZXRHYW50dEV2ZW50KHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwiZGJsY2xpY2tcIikge1xuICAgICAgICAgICAgISFvbkRvdWJsZUNsaWNrICYmIG9uRG91YmxlQ2xpY2sodGFzayk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwiY2xpY2tcIikge1xuICAgICAgICAgICAgISFvbkNsaWNrICYmIG9uQ2xpY2sodGFzayk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwibW92ZVwiKSB7XG4gICAgICAgICAgICB2YXIgX3N2ZyRjdXJyZW50JGdldFNjcmVlMztcblxuICAgICAgICAgICAgaWYgKCEoc3ZnICE9PSBudWxsICYmIHN2ZyAhPT0gdm9pZCAwICYmIHN2Zy5jdXJyZW50KSB8fCAhcG9pbnQpIHJldHVybjtcbiAgICAgICAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYO1xuICAgICAgICAgICAgdmFyIGN1cnNvciA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybSgoX3N2ZyRjdXJyZW50JGdldFNjcmVlMyA9IHN2Zy5jdXJyZW50LmdldFNjcmVlbkNUTSgpKSA9PT0gbnVsbCB8fCBfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUzLmludmVyc2UoKSk7XG4gICAgICAgICAgICBzZXRJbml0RXZlbnRYMURlbHRhKGN1cnNvci54IC0gdGFzay54MSk7XG4gICAgICAgICAgICBzZXRHYW50dEV2ZW50KHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICAgIGNoYW5nZWRUYXNrOiB0YXNrLFxuICAgICAgICAgICAgICBvcmlnaW5hbFNlbGVjdGVkVGFzazogdGFza1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEdhbnR0RXZlbnQoe1xuICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgICAgY2hhbmdlZFRhc2s6IHRhc2ssXG4gICAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0ZWRUYXNrOiB0YXNrXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0oKTtcbiAgICAgIH0oKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJjb250ZW50XCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJhcnJvd3NcIixcbiAgICBmaWxsOiBhcnJvd0NvbG9yLFxuICAgIHN0cm9rZTogYXJyb3dDb2xvclxuICB9LCB0YXNrcy5tYXAoZnVuY3Rpb24gKHRhc2spIHtcbiAgICByZXR1cm4gdGFzay5iYXJDaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBcnJvdywge1xuICAgICAgICBrZXk6IFwiQXJyb3cgZnJvbSBcIiArIHRhc2suaWQgKyBcIiB0byBcIiArIHRhc2tzW2NoaWxkLmluZGV4XS5pZCxcbiAgICAgICAgdGFza0Zyb206IHRhc2ssXG4gICAgICAgIHRhc2tUbzogdGFza3NbY2hpbGQuaW5kZXhdLFxuICAgICAgICByb3dIZWlnaHQ6IHJvd0hlaWdodCxcbiAgICAgICAgdGFza0hlaWdodDogdGFza0hlaWdodCxcbiAgICAgICAgYXJyb3dJbmRlbnQ6IGFycm93SW5kZW50LFxuICAgICAgICBydGw6IHJ0bFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiYXJcIixcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZVxuICB9LCB0YXNrcy5tYXAoZnVuY3Rpb24gKHRhc2spIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYXNrSXRlbSwge1xuICAgICAgdGFzazogdGFzayxcbiAgICAgIGFycm93SW5kZW50OiBhcnJvd0luZGVudCxcbiAgICAgIHRhc2tIZWlnaHQ6IHRhc2tIZWlnaHQsXG4gICAgICBpc1Byb2dyZXNzQ2hhbmdlYWJsZTogISFvblByb2dyZXNzQ2hhbmdlICYmICF0YXNrLmlzRGlzYWJsZWQsXG4gICAgICBpc0RhdGVDaGFuZ2VhYmxlOiAhIW9uRGF0ZUNoYW5nZSAmJiAhdGFzay5pc0Rpc2FibGVkLFxuICAgICAgaXNEZWxldGU6ICF0YXNrLmlzRGlzYWJsZWQsXG4gICAgICBvbkV2ZW50U3RhcnQ6IGhhbmRsZUJhckV2ZW50U3RhcnQsXG4gICAgICBrZXk6IHRhc2suaWQsXG4gICAgICBpc1NlbGVjdGVkOiAhIXNlbGVjdGVkVGFzayAmJiB0YXNrLmlkID09PSBzZWxlY3RlZFRhc2suaWQsXG4gICAgICBydGw6IHJ0bFxuICAgIH0pO1xuICB9KSkpO1xufTtcblxudmFyIHN0eWxlcyQ5ID0ge1wiZ2FudHRWZXJ0aWNhbENvbnRhaW5lclwiOlwiX0NaanVEXCIsXCJob3Jpem9udGFsQ29udGFpbmVyXCI6XCJfMkIyenZcIixcIndyYXBwZXJcIjpcIl8zZVVMZlwifTtcblxudmFyIFRhc2tHYW50dCA9IGZ1bmN0aW9uIFRhc2tHYW50dChfcmVmKSB7XG4gIHZhciBncmlkUHJvcHMgPSBfcmVmLmdyaWRQcm9wcyxcbiAgICAgIGNhbGVuZGFyUHJvcHMgPSBfcmVmLmNhbGVuZGFyUHJvcHMsXG4gICAgICBiYXJQcm9wcyA9IF9yZWYuYmFyUHJvcHMsXG4gICAgICBnYW50dEhlaWdodCA9IF9yZWYuZ2FudHRIZWlnaHQsXG4gICAgICBzY3JvbGxZID0gX3JlZi5zY3JvbGxZLFxuICAgICAgc2Nyb2xsWCA9IF9yZWYuc2Nyb2xsWDtcbiAgdmFyIGdhbnR0U1ZHUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgaG9yaXpvbnRhbENvbnRhaW5lclJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHZlcnRpY2FsR2FudHRDb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgdmFyIG5ld0JhclByb3BzID0gX2V4dGVuZHMoe30sIGJhclByb3BzLCB7XG4gICAgc3ZnOiBnYW50dFNWR1JlZlxuICB9KTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChob3Jpem9udGFsQ29udGFpbmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIGhvcml6b250YWxDb250YWluZXJSZWYuY3VycmVudC5zY3JvbGxUb3AgPSBzY3JvbGxZO1xuICAgIH1cbiAgfSwgW3Njcm9sbFldKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmVydGljYWxHYW50dENvbnRhaW5lclJlZi5jdXJyZW50KSB7XG4gICAgICB2ZXJ0aWNhbEdhbnR0Q29udGFpbmVyUmVmLmN1cnJlbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbFg7XG4gICAgfVxuICB9LCBbc2Nyb2xsWF0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkOS5nYW50dFZlcnRpY2FsQ29udGFpbmVyLFxuICAgIHJlZjogdmVydGljYWxHYW50dENvbnRhaW5lclJlZixcbiAgICBkaXI6IFwibHRyXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB3aWR0aDogZ3JpZFByb3BzLnN2Z1dpZHRoLFxuICAgIGhlaWdodDogY2FsZW5kYXJQcm9wcy5oZWFkZXJIZWlnaHQsXG4gICAgZm9udEZhbWlseTogYmFyUHJvcHMuZm9udEZhbWlseVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyLCBPYmplY3QuYXNzaWduKHt9LCBjYWxlbmRhclByb3BzKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IGhvcml6b250YWxDb250YWluZXJSZWYsXG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkOS5ob3Jpem9udGFsQ29udGFpbmVyLFxuICAgIHN0eWxlOiBnYW50dEhlaWdodCA/IHtcbiAgICAgIGhlaWdodDogZ2FudHRIZWlnaHQsXG4gICAgICB3aWR0aDogZ3JpZFByb3BzLnN2Z1dpZHRoXG4gICAgfSA6IHtcbiAgICAgIHdpZHRoOiBncmlkUHJvcHMuc3ZnV2lkdGhcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgd2lkdGg6IGdyaWRQcm9wcy5zdmdXaWR0aCxcbiAgICBoZWlnaHQ6IGJhclByb3BzLnJvd0hlaWdodCAqIGJhclByb3BzLnRhc2tzLmxlbmd0aCxcbiAgICBmb250RmFtaWx5OiBiYXJQcm9wcy5mb250RmFtaWx5LFxuICAgIHJlZjogZ2FudHRTVkdSZWZcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChHcmlkLCBPYmplY3QuYXNzaWduKHt9LCBncmlkUHJvcHMpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUYXNrR2FudHRDb250ZW50LCBPYmplY3QuYXNzaWduKHt9LCBuZXdCYXJQcm9wcykpKSkpO1xufTtcblxudmFyIHN0eWxlcyRhID0ge1wic2Nyb2xsV3JhcHBlclwiOlwiXzJrOVlzXCIsXCJzY3JvbGxcIjpcIl8xOWpnV1wifTtcblxudmFyIEhvcml6b250YWxTY3JvbGwgPSBmdW5jdGlvbiBIb3Jpem9udGFsU2Nyb2xsKF9yZWYpIHtcbiAgdmFyIHNjcm9sbCA9IF9yZWYuc2Nyb2xsLFxuICAgICAgc3ZnV2lkdGggPSBfcmVmLnN2Z1dpZHRoLFxuICAgICAgdGFza0xpc3RXaWR0aCA9IF9yZWYudGFza0xpc3RXaWR0aCxcbiAgICAgIHJ0bCA9IF9yZWYucnRsLFxuICAgICAgb25TY3JvbGwgPSBfcmVmLm9uU2Nyb2xsO1xuICB2YXIgc2Nyb2xsUmVmID0gdXNlUmVmKG51bGwpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGxSZWYuY3VycmVudCkge1xuICAgICAgc2Nyb2xsUmVmLmN1cnJlbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbDtcbiAgICB9XG4gIH0sIFtzY3JvbGxdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGRpcjogXCJsdHJcIixcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luOiBydGwgPyBcIjBweCBcIiArIHRhc2tMaXN0V2lkdGggKyBcInB4IDBweCAwcHhcIiA6IFwiMHB4IDBweCAwcHggXCIgKyB0YXNrTGlzdFdpZHRoICsgXCJweFwiXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IHN0eWxlcyRhLnNjcm9sbFdyYXBwZXIsXG4gICAgb25TY3JvbGw6IG9uU2Nyb2xsLFxuICAgIHJlZjogc2Nyb2xsUmVmXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICB3aWR0aDogc3ZnV2lkdGhcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogc3R5bGVzJGEuc2Nyb2xsXG4gIH0pKTtcbn07XG5cbnZhciBHYW50dCA9IGZ1bmN0aW9uIEdhbnR0KF9yZWYpIHtcbiAgdmFyIHRhc2tzID0gX3JlZi50YXNrcyxcbiAgICAgIF9yZWYkaGVhZGVySGVpZ2h0ID0gX3JlZi5oZWFkZXJIZWlnaHQsXG4gICAgICBoZWFkZXJIZWlnaHQgPSBfcmVmJGhlYWRlckhlaWdodCA9PT0gdm9pZCAwID8gNTAgOiBfcmVmJGhlYWRlckhlaWdodCxcbiAgICAgIF9yZWYkY29sdW1uV2lkdGggPSBfcmVmLmNvbHVtbldpZHRoLFxuICAgICAgY29sdW1uV2lkdGggPSBfcmVmJGNvbHVtbldpZHRoID09PSB2b2lkIDAgPyA2MCA6IF9yZWYkY29sdW1uV2lkdGgsXG4gICAgICBfcmVmJGxpc3RDZWxsV2lkdGggPSBfcmVmLmxpc3RDZWxsV2lkdGgsXG4gICAgICBsaXN0Q2VsbFdpZHRoID0gX3JlZiRsaXN0Q2VsbFdpZHRoID09PSB2b2lkIDAgPyBcIjE1NXB4XCIgOiBfcmVmJGxpc3RDZWxsV2lkdGgsXG4gICAgICBfcmVmJHJvd0hlaWdodCA9IF9yZWYucm93SGVpZ2h0LFxuICAgICAgcm93SGVpZ2h0ID0gX3JlZiRyb3dIZWlnaHQgPT09IHZvaWQgMCA/IDUwIDogX3JlZiRyb3dIZWlnaHQsXG4gICAgICBfcmVmJGdhbnR0SGVpZ2h0ID0gX3JlZi5nYW50dEhlaWdodCxcbiAgICAgIGdhbnR0SGVpZ2h0ID0gX3JlZiRnYW50dEhlaWdodCA9PT0gdm9pZCAwID8gMCA6IF9yZWYkZ2FudHRIZWlnaHQsXG4gICAgICBfcmVmJHZpZXdNb2RlID0gX3JlZi52aWV3TW9kZSxcbiAgICAgIHZpZXdNb2RlID0gX3JlZiR2aWV3TW9kZSA9PT0gdm9pZCAwID8gVmlld01vZGUuRGF5IDogX3JlZiR2aWV3TW9kZSxcbiAgICAgIF9yZWYkcHJlU3RlcHNDb3VudCA9IF9yZWYucHJlU3RlcHNDb3VudCxcbiAgICAgIHByZVN0ZXBzQ291bnQgPSBfcmVmJHByZVN0ZXBzQ291bnQgPT09IHZvaWQgMCA/IDEgOiBfcmVmJHByZVN0ZXBzQ291bnQsXG4gICAgICBfcmVmJGxvY2FsZSA9IF9yZWYubG9jYWxlLFxuICAgICAgbG9jYWxlID0gX3JlZiRsb2NhbGUgPT09IHZvaWQgMCA/IFwiZW4tR0JcIiA6IF9yZWYkbG9jYWxlLFxuICAgICAgX3JlZiRiYXJGaWxsID0gX3JlZi5iYXJGaWxsLFxuICAgICAgYmFyRmlsbCA9IF9yZWYkYmFyRmlsbCA9PT0gdm9pZCAwID8gNjAgOiBfcmVmJGJhckZpbGwsXG4gICAgICBfcmVmJGJhckNvcm5lclJhZGl1cyA9IF9yZWYuYmFyQ29ybmVyUmFkaXVzLFxuICAgICAgYmFyQ29ybmVyUmFkaXVzID0gX3JlZiRiYXJDb3JuZXJSYWRpdXMgPT09IHZvaWQgMCA/IDMgOiBfcmVmJGJhckNvcm5lclJhZGl1cyxcbiAgICAgIF9yZWYkYmFyUHJvZ3Jlc3NDb2xvciA9IF9yZWYuYmFyUHJvZ3Jlc3NDb2xvcixcbiAgICAgIGJhclByb2dyZXNzQ29sb3IgPSBfcmVmJGJhclByb2dyZXNzQ29sb3IgPT09IHZvaWQgMCA/IFwiI2EzYTNmZlwiIDogX3JlZiRiYXJQcm9ncmVzc0NvbG9yLFxuICAgICAgX3JlZiRiYXJQcm9ncmVzc1NlbGVjID0gX3JlZi5iYXJQcm9ncmVzc1NlbGVjdGVkQ29sb3IsXG4gICAgICBiYXJQcm9ncmVzc1NlbGVjdGVkQ29sb3IgPSBfcmVmJGJhclByb2dyZXNzU2VsZWMgPT09IHZvaWQgMCA/IFwiIzgyODJmNVwiIDogX3JlZiRiYXJQcm9ncmVzc1NlbGVjLFxuICAgICAgX3JlZiRiYXJCYWNrZ3JvdW5kQ29sID0gX3JlZi5iYXJCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBiYXJCYWNrZ3JvdW5kQ29sb3IgPSBfcmVmJGJhckJhY2tncm91bmRDb2wgPT09IHZvaWQgMCA/IFwiI2I4YzJjY1wiIDogX3JlZiRiYXJCYWNrZ3JvdW5kQ29sLFxuICAgICAgX3JlZiRiYXJCYWNrZ3JvdW5kU2VsID0gX3JlZi5iYXJCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvcixcbiAgICAgIGJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yID0gX3JlZiRiYXJCYWNrZ3JvdW5kU2VsID09PSB2b2lkIDAgPyBcIiNhZWI4YzJcIiA6IF9yZWYkYmFyQmFja2dyb3VuZFNlbCxcbiAgICAgIF9yZWYkcHJvamVjdFByb2dyZXNzQyA9IF9yZWYucHJvamVjdFByb2dyZXNzQ29sb3IsXG4gICAgICBwcm9qZWN0UHJvZ3Jlc3NDb2xvciA9IF9yZWYkcHJvamVjdFByb2dyZXNzQyA9PT0gdm9pZCAwID8gXCIjN2RiNTlhXCIgOiBfcmVmJHByb2plY3RQcm9ncmVzc0MsXG4gICAgICBfcmVmJHByb2plY3RQcm9ncmVzc1MgPSBfcmVmLnByb2plY3RQcm9ncmVzc1NlbGVjdGVkQ29sb3IsXG4gICAgICBwcm9qZWN0UHJvZ3Jlc3NTZWxlY3RlZENvbG9yID0gX3JlZiRwcm9qZWN0UHJvZ3Jlc3NTID09PSB2b2lkIDAgPyBcIiM1OWE5ODVcIiA6IF9yZWYkcHJvamVjdFByb2dyZXNzUyxcbiAgICAgIF9yZWYkcHJvamVjdEJhY2tncm91biA9IF9yZWYucHJvamVjdEJhY2tncm91bmRDb2xvcixcbiAgICAgIHByb2plY3RCYWNrZ3JvdW5kQ29sb3IgPSBfcmVmJHByb2plY3RCYWNrZ3JvdW4gPT09IHZvaWQgMCA/IFwiI2ZhYzQ2NVwiIDogX3JlZiRwcm9qZWN0QmFja2dyb3VuLFxuICAgICAgX3JlZiRwcm9qZWN0QmFja2dyb3VuMiA9IF9yZWYucHJvamVjdEJhY2tncm91bmRTZWxlY3RlZENvbG9yLFxuICAgICAgcHJvamVjdEJhY2tncm91bmRTZWxlY3RlZENvbG9yID0gX3JlZiRwcm9qZWN0QmFja2dyb3VuMiA9PT0gdm9pZCAwID8gXCIjZjdiYjUzXCIgOiBfcmVmJHByb2plY3RCYWNrZ3JvdW4yLFxuICAgICAgX3JlZiRtaWxlc3RvbmVCYWNrZ3JvID0gX3JlZi5taWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IgPSBfcmVmJG1pbGVzdG9uZUJhY2tncm8gPT09IHZvaWQgMCA/IFwiI2YxYzQ1M1wiIDogX3JlZiRtaWxlc3RvbmVCYWNrZ3JvLFxuICAgICAgX3JlZiRtaWxlc3RvbmVCYWNrZ3JvMiA9IF9yZWYubWlsZXN0b25lQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsXG4gICAgICBtaWxlc3RvbmVCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciA9IF9yZWYkbWlsZXN0b25lQmFja2dybzIgPT09IHZvaWQgMCA/IFwiI2YyOWU0Y1wiIDogX3JlZiRtaWxlc3RvbmVCYWNrZ3JvMixcbiAgICAgIF9yZWYkcnRsID0gX3JlZi5ydGwsXG4gICAgICBydGwgPSBfcmVmJHJ0bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHJ0bCxcbiAgICAgIF9yZWYkaGFuZGxlV2lkdGggPSBfcmVmLmhhbmRsZVdpZHRoLFxuICAgICAgaGFuZGxlV2lkdGggPSBfcmVmJGhhbmRsZVdpZHRoID09PSB2b2lkIDAgPyA4IDogX3JlZiRoYW5kbGVXaWR0aCxcbiAgICAgIF9yZWYkdGltZVN0ZXAgPSBfcmVmLnRpbWVTdGVwLFxuICAgICAgdGltZVN0ZXAgPSBfcmVmJHRpbWVTdGVwID09PSB2b2lkIDAgPyAzMDAwMDAgOiBfcmVmJHRpbWVTdGVwLFxuICAgICAgX3JlZiRhcnJvd0NvbG9yID0gX3JlZi5hcnJvd0NvbG9yLFxuICAgICAgYXJyb3dDb2xvciA9IF9yZWYkYXJyb3dDb2xvciA9PT0gdm9pZCAwID8gXCJncmV5XCIgOiBfcmVmJGFycm93Q29sb3IsXG4gICAgICBfcmVmJGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250RmFtaWx5ID0gX3JlZiRmb250RmFtaWx5ID09PSB2b2lkIDAgPyBcIkFyaWFsLCBSb2JvdG8sIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsIEZpcmEgU2FucywgRHJvaWQgU2FucywgSGVsdmV0aWNhIE5ldWVcIiA6IF9yZWYkZm9udEZhbWlseSxcbiAgICAgIF9yZWYkZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcmVmJGZvbnRTaXplID09PSB2b2lkIDAgPyBcIjE0cHhcIiA6IF9yZWYkZm9udFNpemUsXG4gICAgICBfcmVmJGFycm93SW5kZW50ID0gX3JlZi5hcnJvd0luZGVudCxcbiAgICAgIGFycm93SW5kZW50ID0gX3JlZiRhcnJvd0luZGVudCA9PT0gdm9pZCAwID8gMjAgOiBfcmVmJGFycm93SW5kZW50LFxuICAgICAgX3JlZiR0b2RheUNvbG9yID0gX3JlZi50b2RheUNvbG9yLFxuICAgICAgdG9kYXlDb2xvciA9IF9yZWYkdG9kYXlDb2xvciA9PT0gdm9pZCAwID8gXCJyZ2JhKDI1MiwgMjQ4LCAyMjcsIDAuNSlcIiA6IF9yZWYkdG9kYXlDb2xvcixcbiAgICAgIHZpZXdEYXRlID0gX3JlZi52aWV3RGF0ZSxcbiAgICAgIF9yZWYkVG9vbHRpcENvbnRlbnQgPSBfcmVmLlRvb2x0aXBDb250ZW50LFxuICAgICAgVG9vbHRpcENvbnRlbnQgPSBfcmVmJFRvb2x0aXBDb250ZW50ID09PSB2b2lkIDAgPyBTdGFuZGFyZFRvb2x0aXBDb250ZW50IDogX3JlZiRUb29sdGlwQ29udGVudCxcbiAgICAgIF9yZWYkVGFza0xpc3RIZWFkZXIgPSBfcmVmLlRhc2tMaXN0SGVhZGVyLFxuICAgICAgVGFza0xpc3RIZWFkZXIgPSBfcmVmJFRhc2tMaXN0SGVhZGVyID09PSB2b2lkIDAgPyBUYXNrTGlzdEhlYWRlckRlZmF1bHQgOiBfcmVmJFRhc2tMaXN0SGVhZGVyLFxuICAgICAgX3JlZiRUYXNrTGlzdFRhYmxlID0gX3JlZi5UYXNrTGlzdFRhYmxlLFxuICAgICAgVGFza0xpc3RUYWJsZSA9IF9yZWYkVGFza0xpc3RUYWJsZSA9PT0gdm9pZCAwID8gVGFza0xpc3RUYWJsZURlZmF1bHQgOiBfcmVmJFRhc2tMaXN0VGFibGUsXG4gICAgICBvbkRhdGVDaGFuZ2UgPSBfcmVmLm9uRGF0ZUNoYW5nZSxcbiAgICAgIG9uUHJvZ3Jlc3NDaGFuZ2UgPSBfcmVmLm9uUHJvZ3Jlc3NDaGFuZ2UsXG4gICAgICBvbkRvdWJsZUNsaWNrID0gX3JlZi5vbkRvdWJsZUNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uRGVsZXRlID0gX3JlZi5vbkRlbGV0ZSxcbiAgICAgIG9uU2VsZWN0ID0gX3JlZi5vblNlbGVjdCxcbiAgICAgIG9uRXhwYW5kZXJDbGljayA9IF9yZWYub25FeHBhbmRlckNsaWNrO1xuICB2YXIgd3JhcHBlclJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHRhc2tMaXN0UmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9nYW50dERhdGVSYW5nZSA9IGdhbnR0RGF0ZVJhbmdlKHRhc2tzLCB2aWV3TW9kZSwgcHJlU3RlcHNDb3VudCksXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF9nYW50dERhdGVSYW5nZVswXSxcbiAgICAgICAgZW5kRGF0ZSA9IF9nYW50dERhdGVSYW5nZVsxXTtcblxuICAgIHJldHVybiB7XG4gICAgICB2aWV3TW9kZTogdmlld01vZGUsXG4gICAgICBkYXRlczogc2VlZERhdGVzKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgdmlld01vZGUpXG4gICAgfTtcbiAgfSksXG4gICAgICBkYXRlU2V0dXAgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXREYXRlU2V0dXAgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSB1c2VTdGF0ZSh1bmRlZmluZWQpLFxuICAgICAgY3VycmVudFZpZXdEYXRlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldEN1cnJlbnRWaWV3RGF0ZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZSgwKSxcbiAgICAgIHRhc2tMaXN0V2lkdGggPSBfdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0VGFza0xpc3RXaWR0aCA9IF91c2VTdGF0ZTNbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTQgPSB1c2VTdGF0ZSgwKSxcbiAgICAgIHN2Z0NvbnRhaW5lcldpZHRoID0gX3VzZVN0YXRlNFswXSxcbiAgICAgIHNldFN2Z0NvbnRhaW5lcldpZHRoID0gX3VzZVN0YXRlNFsxXTtcblxuICB2YXIgX3VzZVN0YXRlNSA9IHVzZVN0YXRlKGdhbnR0SGVpZ2h0KSxcbiAgICAgIHN2Z0NvbnRhaW5lckhlaWdodCA9IF91c2VTdGF0ZTVbMF0sXG4gICAgICBzZXRTdmdDb250YWluZXJIZWlnaHQgPSBfdXNlU3RhdGU1WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU2ID0gdXNlU3RhdGUoW10pLFxuICAgICAgYmFyVGFza3MgPSBfdXNlU3RhdGU2WzBdLFxuICAgICAgc2V0QmFyVGFza3MgPSBfdXNlU3RhdGU2WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU3ID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogXCJcIlxuICB9KSxcbiAgICAgIGdhbnR0RXZlbnQgPSBfdXNlU3RhdGU3WzBdLFxuICAgICAgc2V0R2FudHRFdmVudCA9IF91c2VTdGF0ZTdbMV07XG5cbiAgdmFyIHRhc2tIZWlnaHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcm93SGVpZ2h0ICogYmFyRmlsbCAvIDEwMDtcbiAgfSwgW3Jvd0hlaWdodCwgYmFyRmlsbF0pO1xuXG4gIHZhciBfdXNlU3RhdGU4ID0gdXNlU3RhdGUoKSxcbiAgICAgIHNlbGVjdGVkVGFzayA9IF91c2VTdGF0ZThbMF0sXG4gICAgICBzZXRTZWxlY3RlZFRhc2sgPSBfdXNlU3RhdGU4WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU5ID0gdXNlU3RhdGUobnVsbCksXG4gICAgICBmYWlsZWRUYXNrID0gX3VzZVN0YXRlOVswXSxcbiAgICAgIHNldEZhaWxlZFRhc2sgPSBfdXNlU3RhdGU5WzFdO1xuXG4gIHZhciBzdmdXaWR0aCA9IGRhdGVTZXR1cC5kYXRlcy5sZW5ndGggKiBjb2x1bW5XaWR0aDtcbiAgdmFyIGdhbnR0RnVsbEhlaWdodCA9IGJhclRhc2tzLmxlbmd0aCAqIHJvd0hlaWdodDtcblxuICB2YXIgX3VzZVN0YXRlMTAgPSB1c2VTdGF0ZSgwKSxcbiAgICAgIHNjcm9sbFkgPSBfdXNlU3RhdGUxMFswXSxcbiAgICAgIHNldFNjcm9sbFkgPSBfdXNlU3RhdGUxMFsxXTtcblxuICB2YXIgX3VzZVN0YXRlMTEgPSB1c2VTdGF0ZSgtMSksXG4gICAgICBzY3JvbGxYID0gX3VzZVN0YXRlMTFbMF0sXG4gICAgICBzZXRTY3JvbGxYID0gX3VzZVN0YXRlMTFbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTEyID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgaWdub3JlU2Nyb2xsRXZlbnQgPSBfdXNlU3RhdGUxMlswXSxcbiAgICAgIHNldElnbm9yZVNjcm9sbEV2ZW50ID0gX3VzZVN0YXRlMTJbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlsdGVyZWRUYXNrcztcblxuICAgIGlmIChvbkV4cGFuZGVyQ2xpY2spIHtcbiAgICAgIGZpbHRlcmVkVGFza3MgPSByZW1vdmVIaWRkZW5UYXNrcyh0YXNrcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbHRlcmVkVGFza3MgPSB0YXNrcztcbiAgICB9XG5cbiAgICBmaWx0ZXJlZFRhc2tzID0gZmlsdGVyZWRUYXNrcy5zb3J0KHNvcnRUYXNrcyk7XG5cbiAgICB2YXIgX2dhbnR0RGF0ZVJhbmdlMiA9IGdhbnR0RGF0ZVJhbmdlKGZpbHRlcmVkVGFza3MsIHZpZXdNb2RlLCBwcmVTdGVwc0NvdW50KSxcbiAgICAgICAgc3RhcnREYXRlID0gX2dhbnR0RGF0ZVJhbmdlMlswXSxcbiAgICAgICAgZW5kRGF0ZSA9IF9nYW50dERhdGVSYW5nZTJbMV07XG5cbiAgICB2YXIgbmV3RGF0ZXMgPSBzZWVkRGF0ZXMoc3RhcnREYXRlLCBlbmREYXRlLCB2aWV3TW9kZSk7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICBuZXdEYXRlcyA9IG5ld0RhdGVzLnJldmVyc2UoKTtcblxuICAgICAgaWYgKHNjcm9sbFggPT09IC0xKSB7XG4gICAgICAgIHNldFNjcm9sbFgobmV3RGF0ZXMubGVuZ3RoICogY29sdW1uV2lkdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldERhdGVTZXR1cCh7XG4gICAgICBkYXRlczogbmV3RGF0ZXMsXG4gICAgICB2aWV3TW9kZTogdmlld01vZGVcbiAgICB9KTtcbiAgICBzZXRCYXJUYXNrcyhjb252ZXJ0VG9CYXJUYXNrcyhmaWx0ZXJlZFRhc2tzLCBuZXdEYXRlcywgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgdGFza0hlaWdodCwgYmFyQ29ybmVyUmFkaXVzLCBoYW5kbGVXaWR0aCwgcnRsLCBiYXJQcm9ncmVzc0NvbG9yLCBiYXJQcm9ncmVzc1NlbGVjdGVkQ29sb3IsIGJhckJhY2tncm91bmRDb2xvciwgYmFyQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsIHByb2plY3RQcm9ncmVzc0NvbG9yLCBwcm9qZWN0UHJvZ3Jlc3NTZWxlY3RlZENvbG9yLCBwcm9qZWN0QmFja2dyb3VuZENvbG9yLCBwcm9qZWN0QmFja2dyb3VuZFNlbGVjdGVkQ29sb3IsIG1pbGVzdG9uZUJhY2tncm91bmRDb2xvciwgbWlsZXN0b25lQmFja2dyb3VuZFNlbGVjdGVkQ29sb3IpKTtcbiAgfSwgW3Rhc2tzLCB2aWV3TW9kZSwgcHJlU3RlcHNDb3VudCwgcm93SGVpZ2h0LCBiYXJDb3JuZXJSYWRpdXMsIGNvbHVtbldpZHRoLCB0YXNrSGVpZ2h0LCBoYW5kbGVXaWR0aCwgYmFyUHJvZ3Jlc3NDb2xvciwgYmFyUHJvZ3Jlc3NTZWxlY3RlZENvbG9yLCBiYXJCYWNrZ3JvdW5kQ29sb3IsIGJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yLCBwcm9qZWN0UHJvZ3Jlc3NDb2xvciwgcHJvamVjdFByb2dyZXNzU2VsZWN0ZWRDb2xvciwgcHJvamVjdEJhY2tncm91bmRDb2xvciwgcHJvamVjdEJhY2tncm91bmRTZWxlY3RlZENvbG9yLCBtaWxlc3RvbmVCYWNrZ3JvdW5kQ29sb3IsIG1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yLCBydGwsIHNjcm9sbFgsIG9uRXhwYW5kZXJDbGlja10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh2aWV3TW9kZSA9PT0gZGF0ZVNldHVwLnZpZXdNb2RlICYmICh2aWV3RGF0ZSAmJiAhY3VycmVudFZpZXdEYXRlIHx8IHZpZXdEYXRlICYmIChjdXJyZW50Vmlld0RhdGUgPT09IG51bGwgfHwgY3VycmVudFZpZXdEYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50Vmlld0RhdGUudmFsdWVPZigpKSAhPT0gdmlld0RhdGUudmFsdWVPZigpKSkge1xuICAgICAgdmFyIGRhdGVzID0gZGF0ZVNldHVwLmRhdGVzO1xuICAgICAgdmFyIGluZGV4ID0gZGF0ZXMuZmluZEluZGV4KGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgIHJldHVybiB2aWV3RGF0ZS52YWx1ZU9mKCkgPj0gZC52YWx1ZU9mKCkgJiYgaSArIDEgIT09IGRhdGVzLmxlbmd0aCAmJiB2aWV3RGF0ZS52YWx1ZU9mKCkgPCBkYXRlc1tpICsgMV0udmFsdWVPZigpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRDdXJyZW50Vmlld0RhdGUodmlld0RhdGUpO1xuICAgICAgc2V0U2Nyb2xsWChjb2x1bW5XaWR0aCAqIGluZGV4KTtcbiAgICB9XG4gIH0sIFt2aWV3RGF0ZSwgY29sdW1uV2lkdGgsIGRhdGVTZXR1cC5kYXRlcywgZGF0ZVNldHVwLnZpZXdNb2RlLCB2aWV3TW9kZSwgY3VycmVudFZpZXdEYXRlLCBzZXRDdXJyZW50Vmlld0RhdGVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2hhbmdlZFRhc2sgPSBnYW50dEV2ZW50LmNoYW5nZWRUYXNrLFxuICAgICAgICBhY3Rpb24gPSBnYW50dEV2ZW50LmFjdGlvbjtcblxuICAgIGlmIChjaGFuZ2VkVGFzaykge1xuICAgICAgaWYgKGFjdGlvbiA9PT0gXCJkZWxldGVcIikge1xuICAgICAgICBzZXRHYW50dEV2ZW50KHtcbiAgICAgICAgICBhY3Rpb246IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEJhclRhc2tzKGJhclRhc2tzLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LmlkICE9PSBjaGFuZ2VkVGFzay5pZDtcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwibW92ZVwiIHx8IGFjdGlvbiA9PT0gXCJlbmRcIiB8fCBhY3Rpb24gPT09IFwic3RhcnRcIiB8fCBhY3Rpb24gPT09IFwicHJvZ3Jlc3NcIikge1xuICAgICAgICB2YXIgcHJldlN0YXRlVGFzayA9IGJhclRhc2tzLmZpbmQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gY2hhbmdlZFRhc2suaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwcmV2U3RhdGVUYXNrICYmIChwcmV2U3RhdGVUYXNrLnN0YXJ0LmdldFRpbWUoKSAhPT0gY2hhbmdlZFRhc2suc3RhcnQuZ2V0VGltZSgpIHx8IHByZXZTdGF0ZVRhc2suZW5kLmdldFRpbWUoKSAhPT0gY2hhbmdlZFRhc2suZW5kLmdldFRpbWUoKSB8fCBwcmV2U3RhdGVUYXNrLnByb2dyZXNzICE9PSBjaGFuZ2VkVGFzay5wcm9ncmVzcykpIHtcbiAgICAgICAgICB2YXIgbmV3VGFza0xpc3QgPSBiYXJUYXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmlkID09PSBjaGFuZ2VkVGFzay5pZCA/IGNoYW5nZWRUYXNrIDogdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZXRCYXJUYXNrcyhuZXdUYXNrTGlzdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIFtnYW50dEV2ZW50LCBiYXJUYXNrc10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChmYWlsZWRUYXNrKSB7XG4gICAgICBzZXRCYXJUYXNrcyhiYXJUYXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuaWQgIT09IGZhaWxlZFRhc2suaWQgPyB0IDogZmFpbGVkVGFzaztcbiAgICAgIH0pKTtcbiAgICAgIHNldEZhaWxlZFRhc2sobnVsbCk7XG4gICAgfVxuICB9LCBbZmFpbGVkVGFzaywgYmFyVGFza3NdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWxpc3RDZWxsV2lkdGgpIHtcbiAgICAgIHNldFRhc2tMaXN0V2lkdGgoMCk7XG4gICAgfVxuXG4gICAgaWYgKHRhc2tMaXN0UmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRhc2tMaXN0V2lkdGgodGFza0xpc3RSZWYuY3VycmVudC5vZmZzZXRXaWR0aCk7XG4gICAgfVxuICB9LCBbdGFza0xpc3RSZWYsIGxpc3RDZWxsV2lkdGhdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod3JhcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRTdmdDb250YWluZXJXaWR0aCh3cmFwcGVyUmVmLmN1cnJlbnQub2Zmc2V0V2lkdGggLSB0YXNrTGlzdFdpZHRoKTtcbiAgICB9XG4gIH0sIFt3cmFwcGVyUmVmLCB0YXNrTGlzdFdpZHRoXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdhbnR0SGVpZ2h0KSB7XG4gICAgICBzZXRTdmdDb250YWluZXJIZWlnaHQoZ2FudHRIZWlnaHQgKyBoZWFkZXJIZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTdmdDb250YWluZXJIZWlnaHQodGFza3MubGVuZ3RoICogcm93SGVpZ2h0ICsgaGVhZGVySGVpZ2h0KTtcbiAgICB9XG4gIH0sIFtnYW50dEhlaWdodCwgdGFza3MsIGhlYWRlckhlaWdodCwgcm93SGVpZ2h0XSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF93cmFwcGVyUmVmJGN1cnJlbnQ7XG5cbiAgICB2YXIgaGFuZGxlV2hlZWwgPSBmdW5jdGlvbiBoYW5kbGVXaGVlbChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmRlbHRhWCkge1xuICAgICAgICB2YXIgc2Nyb2xsTW92ZSA9IGV2ZW50LmRlbHRhWCA/IGV2ZW50LmRlbHRhWCA6IGV2ZW50LmRlbHRhWTtcbiAgICAgICAgdmFyIG5ld1Njcm9sbFggPSBzY3JvbGxYICsgc2Nyb2xsTW92ZTtcblxuICAgICAgICBpZiAobmV3U2Nyb2xsWCA8IDApIHtcbiAgICAgICAgICBuZXdTY3JvbGxYID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdTY3JvbGxYID4gc3ZnV2lkdGgpIHtcbiAgICAgICAgICBuZXdTY3JvbGxYID0gc3ZnV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRTY3JvbGxYKG5ld1Njcm9sbFgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIGlmIChnYW50dEhlaWdodCkge1xuICAgICAgICB2YXIgbmV3U2Nyb2xsWSA9IHNjcm9sbFkgKyBldmVudC5kZWx0YVk7XG5cbiAgICAgICAgaWYgKG5ld1Njcm9sbFkgPCAwKSB7XG4gICAgICAgICAgbmV3U2Nyb2xsWSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAobmV3U2Nyb2xsWSA+IGdhbnR0RnVsbEhlaWdodCAtIGdhbnR0SGVpZ2h0KSB7XG4gICAgICAgICAgbmV3U2Nyb2xsWSA9IGdhbnR0RnVsbEhlaWdodCAtIGdhbnR0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1Njcm9sbFkgIT09IHNjcm9sbFkpIHtcbiAgICAgICAgICBzZXRTY3JvbGxZKG5ld1Njcm9sbFkpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0SWdub3JlU2Nyb2xsRXZlbnQodHJ1ZSk7XG4gICAgfTtcblxuICAgIChfd3JhcHBlclJlZiRjdXJyZW50ID0gd3JhcHBlclJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfd3JhcHBlclJlZiRjdXJyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd3JhcHBlclJlZiRjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCBoYW5kbGVXaGVlbCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF93cmFwcGVyUmVmJGN1cnJlbnQyO1xuXG4gICAgICAoX3dyYXBwZXJSZWYkY3VycmVudDIgPSB3cmFwcGVyUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF93cmFwcGVyUmVmJGN1cnJlbnQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd3JhcHBlclJlZiRjdXJyZW50Mi5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgaGFuZGxlV2hlZWwpO1xuICAgIH07XG4gIH0sIFt3cmFwcGVyUmVmLCBzY3JvbGxZLCBzY3JvbGxYLCBnYW50dEhlaWdodCwgc3ZnV2lkdGgsIHJ0bCwgZ2FudHRGdWxsSGVpZ2h0XSk7XG5cbiAgdmFyIGhhbmRsZVNjcm9sbFkgPSBmdW5jdGlvbiBoYW5kbGVTY3JvbGxZKGV2ZW50KSB7XG4gICAgaWYgKHNjcm9sbFkgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wICYmICFpZ25vcmVTY3JvbGxFdmVudCkge1xuICAgICAgc2V0U2Nyb2xsWShldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbFRvcCk7XG4gICAgICBzZXRJZ25vcmVTY3JvbGxFdmVudCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SWdub3JlU2Nyb2xsRXZlbnQoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlU2Nyb2xsWCA9IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbFgoZXZlbnQpIHtcbiAgICBpZiAoc2Nyb2xsWCAhPT0gZXZlbnQuY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0ICYmICFpZ25vcmVTY3JvbGxFdmVudCkge1xuICAgICAgc2V0U2Nyb2xsWChldmVudC5jdXJyZW50VGFyZ2V0LnNjcm9sbExlZnQpO1xuICAgICAgc2V0SWdub3JlU2Nyb2xsRXZlbnQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElnbm9yZVNjcm9sbEV2ZW50KGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgbmV3U2Nyb2xsWSA9IHNjcm9sbFk7XG4gICAgdmFyIG5ld1Njcm9sbFggPSBzY3JvbGxYO1xuICAgIHZhciBpc1ggPSB0cnVlO1xuXG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgIGNhc2UgXCJEb3duXCI6XG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgIG5ld1Njcm9sbFkgKz0gcm93SGVpZ2h0O1xuICAgICAgICBpc1ggPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJVcFwiOlxuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgICAgbmV3U2Nyb2xsWSAtPSByb3dIZWlnaHQ7XG4gICAgICAgIGlzWCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkxlZnRcIjpcbiAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgbmV3U2Nyb2xsWCAtPSBjb2x1bW5XaWR0aDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJSaWdodFwiOlxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgbmV3U2Nyb2xsWCArPSBjb2x1bW5XaWR0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGlzWCkge1xuICAgICAgaWYgKG5ld1Njcm9sbFggPCAwKSB7XG4gICAgICAgIG5ld1Njcm9sbFggPSAwO1xuICAgICAgfSBlbHNlIGlmIChuZXdTY3JvbGxYID4gc3ZnV2lkdGgpIHtcbiAgICAgICAgbmV3U2Nyb2xsWCA9IHN2Z1dpZHRoO1xuICAgICAgfVxuXG4gICAgICBzZXRTY3JvbGxYKG5ld1Njcm9sbFgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmV3U2Nyb2xsWSA8IDApIHtcbiAgICAgICAgbmV3U2Nyb2xsWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Njcm9sbFkgPiBnYW50dEZ1bGxIZWlnaHQgLSBnYW50dEhlaWdodCkge1xuICAgICAgICBuZXdTY3JvbGxZID0gZ2FudHRGdWxsSGVpZ2h0IC0gZ2FudHRIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHNldFNjcm9sbFkobmV3U2Nyb2xsWSk7XG4gICAgfVxuXG4gICAgc2V0SWdub3JlU2Nyb2xsRXZlbnQodHJ1ZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVNlbGVjdGVkVGFzayA9IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGVkVGFzayh0YXNrSWQpIHtcbiAgICB2YXIgbmV3U2VsZWN0ZWRUYXNrID0gYmFyVGFza3MuZmluZChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQuaWQgPT09IHRhc2tJZDtcbiAgICB9KTtcbiAgICB2YXIgb2xkU2VsZWN0ZWRUYXNrID0gYmFyVGFza3MuZmluZChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuICEhc2VsZWN0ZWRUYXNrICYmIHQuaWQgPT09IHNlbGVjdGVkVGFzay5pZDtcbiAgICB9KTtcblxuICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgaWYgKG9sZFNlbGVjdGVkVGFzaykge1xuICAgICAgICBvblNlbGVjdChvbGRTZWxlY3RlZFRhc2ssIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1NlbGVjdGVkVGFzaykge1xuICAgICAgICBvblNlbGVjdChuZXdTZWxlY3RlZFRhc2ssIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldFNlbGVjdGVkVGFzayhuZXdTZWxlY3RlZFRhc2spO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFeHBhbmRlckNsaWNrID0gZnVuY3Rpb24gaGFuZGxlRXhwYW5kZXJDbGljayh0YXNrKSB7XG4gICAgaWYgKG9uRXhwYW5kZXJDbGljayAmJiB0YXNrLmhpZGVDaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvbkV4cGFuZGVyQ2xpY2soX2V4dGVuZHMoe30sIHRhc2ssIHtcbiAgICAgICAgaGlkZUNoaWxkcmVuOiAhdGFzay5oaWRlQ2hpbGRyZW5cbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdyaWRQcm9wcyA9IHtcbiAgICBjb2x1bW5XaWR0aDogY29sdW1uV2lkdGgsXG4gICAgc3ZnV2lkdGg6IHN2Z1dpZHRoLFxuICAgIHRhc2tzOiB0YXNrcyxcbiAgICByb3dIZWlnaHQ6IHJvd0hlaWdodCxcbiAgICBkYXRlczogZGF0ZVNldHVwLmRhdGVzLFxuICAgIHRvZGF5Q29sb3I6IHRvZGF5Q29sb3IsXG4gICAgcnRsOiBydGxcbiAgfTtcbiAgdmFyIGNhbGVuZGFyUHJvcHMgPSB7XG4gICAgZGF0ZVNldHVwOiBkYXRlU2V0dXAsXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgdmlld01vZGU6IHZpZXdNb2RlLFxuICAgIGhlYWRlckhlaWdodDogaGVhZGVySGVpZ2h0LFxuICAgIGNvbHVtbldpZHRoOiBjb2x1bW5XaWR0aCxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBydGw6IHJ0bFxuICB9O1xuICB2YXIgYmFyUHJvcHMgPSB7XG4gICAgdGFza3M6IGJhclRhc2tzLFxuICAgIGRhdGVzOiBkYXRlU2V0dXAuZGF0ZXMsXG4gICAgZ2FudHRFdmVudDogZ2FudHRFdmVudCxcbiAgICBzZWxlY3RlZFRhc2s6IHNlbGVjdGVkVGFzayxcbiAgICByb3dIZWlnaHQ6IHJvd0hlaWdodCxcbiAgICB0YXNrSGVpZ2h0OiB0YXNrSGVpZ2h0LFxuICAgIGNvbHVtbldpZHRoOiBjb2x1bW5XaWR0aCxcbiAgICBhcnJvd0NvbG9yOiBhcnJvd0NvbG9yLFxuICAgIHRpbWVTdGVwOiB0aW1lU3RlcCxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBhcnJvd0luZGVudDogYXJyb3dJbmRlbnQsXG4gICAgc3ZnV2lkdGg6IHN2Z1dpZHRoLFxuICAgIHJ0bDogcnRsLFxuICAgIHNldEdhbnR0RXZlbnQ6IHNldEdhbnR0RXZlbnQsXG4gICAgc2V0RmFpbGVkVGFzazogc2V0RmFpbGVkVGFzayxcbiAgICBzZXRTZWxlY3RlZFRhc2s6IGhhbmRsZVNlbGVjdGVkVGFzayxcbiAgICBvbkRhdGVDaGFuZ2U6IG9uRGF0ZUNoYW5nZSxcbiAgICBvblByb2dyZXNzQ2hhbmdlOiBvblByb2dyZXNzQ2hhbmdlLFxuICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2ssXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkRlbGV0ZTogb25EZWxldGVcbiAgfTtcbiAgdmFyIHRhYmxlUHJvcHMgPSB7XG4gICAgcm93SGVpZ2h0OiByb3dIZWlnaHQsXG4gICAgcm93V2lkdGg6IGxpc3RDZWxsV2lkdGgsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgdGFza3M6IGJhclRhc2tzLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIGhlYWRlckhlaWdodDogaGVhZGVySGVpZ2h0LFxuICAgIHNjcm9sbFk6IHNjcm9sbFksXG4gICAgZ2FudHRIZWlnaHQ6IGdhbnR0SGVpZ2h0LFxuICAgIGhvcml6b250YWxDb250YWluZXJDbGFzczogc3R5bGVzJDkuaG9yaXpvbnRhbENvbnRhaW5lcixcbiAgICBzZWxlY3RlZFRhc2s6IHNlbGVjdGVkVGFzayxcbiAgICB0YXNrTGlzdFJlZjogdGFza0xpc3RSZWYsXG4gICAgc2V0U2VsZWN0ZWRUYXNrOiBoYW5kbGVTZWxlY3RlZFRhc2ssXG4gICAgb25FeHBhbmRlckNsaWNrOiBoYW5kbGVFeHBhbmRlckNsaWNrLFxuICAgIFRhc2tMaXN0SGVhZGVyOiBUYXNrTGlzdEhlYWRlcixcbiAgICBUYXNrTGlzdFRhYmxlOiBUYXNrTGlzdFRhYmxlXG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJDkud3JhcHBlcixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IDAsXG4gICAgcmVmOiB3cmFwcGVyUmVmXG4gIH0sIGxpc3RDZWxsV2lkdGggJiYgUmVhY3QuY3JlYXRlRWxlbWVudChUYXNrTGlzdCwgT2JqZWN0LmFzc2lnbih7fSwgdGFibGVQcm9wcykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRhc2tHYW50dCwge1xuICAgIGdyaWRQcm9wczogZ3JpZFByb3BzLFxuICAgIGNhbGVuZGFyUHJvcHM6IGNhbGVuZGFyUHJvcHMsXG4gICAgYmFyUHJvcHM6IGJhclByb3BzLFxuICAgIGdhbnR0SGVpZ2h0OiBnYW50dEhlaWdodCxcbiAgICBzY3JvbGxZOiBzY3JvbGxZLFxuICAgIHNjcm9sbFg6IHNjcm9sbFhcbiAgfSksIGdhbnR0RXZlbnQuY2hhbmdlZFRhc2sgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChUb29sdGlwLCB7XG4gICAgYXJyb3dJbmRlbnQ6IGFycm93SW5kZW50LFxuICAgIHJvd0hlaWdodDogcm93SGVpZ2h0LFxuICAgIHN2Z0NvbnRhaW5lckhlaWdodDogc3ZnQ29udGFpbmVySGVpZ2h0LFxuICAgIHN2Z0NvbnRhaW5lcldpZHRoOiBzdmdDb250YWluZXJXaWR0aCxcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBzY3JvbGxYOiBzY3JvbGxYLFxuICAgIHNjcm9sbFk6IHNjcm9sbFksXG4gICAgdGFzazogZ2FudHRFdmVudC5jaGFuZ2VkVGFzayxcbiAgICBoZWFkZXJIZWlnaHQ6IGhlYWRlckhlaWdodCxcbiAgICB0YXNrTGlzdFdpZHRoOiB0YXNrTGlzdFdpZHRoLFxuICAgIFRvb2x0aXBDb250ZW50OiBUb29sdGlwQ29udGVudCxcbiAgICBydGw6IHJ0bCxcbiAgICBzdmdXaWR0aDogc3ZnV2lkdGhcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVydGljYWxTY3JvbGwsIHtcbiAgICBnYW50dEZ1bGxIZWlnaHQ6IGdhbnR0RnVsbEhlaWdodCxcbiAgICBnYW50dEhlaWdodDogZ2FudHRIZWlnaHQsXG4gICAgaGVhZGVySGVpZ2h0OiBoZWFkZXJIZWlnaHQsXG4gICAgc2Nyb2xsOiBzY3JvbGxZLFxuICAgIG9uU2Nyb2xsOiBoYW5kbGVTY3JvbGxZLFxuICAgIHJ0bDogcnRsXG4gIH0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChIb3Jpem9udGFsU2Nyb2xsLCB7XG4gICAgc3ZnV2lkdGg6IHN2Z1dpZHRoLFxuICAgIHRhc2tMaXN0V2lkdGg6IHRhc2tMaXN0V2lkdGgsXG4gICAgc2Nyb2xsOiBzY3JvbGxYLFxuICAgIHJ0bDogcnRsLFxuICAgIG9uU2Nyb2xsOiBoYW5kbGVTY3JvbGxYXG4gIH0pKTtcbn07XG5cbmV4cG9ydCB7IEdhbnR0LCBWaWV3TW9kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubW9kZXJuLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTWVtbyIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJiaW5kIiwiaXNBcnJheSIsImRvbmUiLCJ2YWx1ZSIsIlR5cGVFcnJvciIsIlZpZXdNb2RlIiwiaW50bERUQ2FjaGUiLCJnZXRDYWNoZWREYXRlVGltZUZvcm1hdCIsImxvY1N0cmluZyIsIm9wdHMiLCJKU09OIiwic3RyaW5naWZ5IiwiZHRmIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiYWRkVG9EYXRlIiwiZGF0ZSIsInF1YW50aXR5Iiwic2NhbGUiLCJuZXdEYXRlIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInN0YXJ0T2ZEYXRlIiwic2NvcmVzIiwic2hvdWxkUmVzZXQiLCJfc2NhbGUiLCJtYXhTY29yZSIsImluZGV4T2YiLCJnYW50dERhdGVSYW5nZSIsInRhc2tzIiwidmlld01vZGUiLCJwcmVTdGVwc0NvdW50IiwibmV3U3RhcnREYXRlIiwic3RhcnQiLCJuZXdFbmREYXRlIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJ0YXNrIiwiZW5kIiwiWWVhciIsIk1vbnRoIiwiV2VlayIsImdldE1vbmRheSIsIkRheSIsIlF1YXJ0ZXJEYXkiLCJIYWxmRGF5IiwiSG91ciIsInNlZWREYXRlcyIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJjdXJyZW50RGF0ZSIsImRhdGVzIiwicHVzaCIsImdldExvY2FsZU1vbnRoIiwibG9jYWxlIiwiYm90dG9tVmFsdWUiLCJtb250aCIsImZvcm1hdCIsInJlcGxhY2UiLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsImdldExvY2FsRGF5T2ZXZWVrIiwid2Vla2RheSIsImRheSIsImdldERheSIsImRpZmYiLCJzZXREYXRlIiwiZ2V0V2Vla051bWJlcklTTzg2MDEiLCJ0bXBEYXRlIiwidmFsdWVPZiIsImRheU51bWJlciIsImZpcnN0VGh1cnNkYXkiLCJzZXRNb250aCIsIndlZWtOdW1iZXIiLCJNYXRoIiwiY2VpbCIsImdldERheXNJbk1vbnRoIiwieWVhciIsInN0eWxlcyIsIlRhc2tMaXN0SGVhZGVyRGVmYXVsdCIsIl9yZWYiLCJoZWFkZXJIZWlnaHQiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJyb3dXaWR0aCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJnYW50dFRhYmxlIiwic3R5bGUiLCJnYW50dFRhYmxlX0hlYWRlciIsImhlaWdodCIsImdhbnR0VGFibGVfSGVhZGVySXRlbSIsIm1pbldpZHRoIiwiZ2FudHRUYWJsZV9IZWFkZXJTZXBhcmF0b3IiLCJtYXJnaW5Ub3AiLCJzdHlsZXMkMSIsImxvY2FsZURhdGVTdHJpbmdDYWNoZSIsInRvTG9jYWxlRGF0ZVN0cmluZ0ZhY3RvcnkiLCJkYXRlVGltZU9wdGlvbnMiLCJsZHMiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJUYXNrTGlzdFRhYmxlRGVmYXVsdCIsInJvd0hlaWdodCIsIm9uRXhwYW5kZXJDbGljayIsInRhc2tMaXN0V3JhcHBlciIsIm1hcCIsInQiLCJleHBhbmRlclN5bWJvbCIsImhpZGVDaGlsZHJlbiIsInRhc2tMaXN0VGFibGVSb3ciLCJpZCIsInRhc2tMaXN0Q2VsbCIsIm1heFdpZHRoIiwidGl0bGUiLCJ0YXNrTGlzdE5hbWVXcmFwcGVyIiwidGFza0xpc3RFeHBhbmRlciIsInRhc2tMaXN0RW1wdHlFeHBhbmRlciIsIm9uQ2xpY2siLCJzdHlsZXMkMiIsIlRvb2x0aXAiLCJydGwiLCJzdmdDb250YWluZXJIZWlnaHQiLCJzdmdDb250YWluZXJXaWR0aCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiYXJyb3dJbmRlbnQiLCJ0YXNrTGlzdFdpZHRoIiwiVG9vbHRpcENvbnRlbnQiLCJ0b29sdGlwUmVmIiwiX3VzZVN0YXRlIiwicmVsYXRlZFkiLCJzZXRSZWxhdGVkWSIsIl91c2VTdGF0ZTIiLCJyZWxhdGVkWCIsInNldFJlbGF0ZWRYIiwiY3VycmVudCIsInRvb2x0aXBIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ0b29sdGlwV2lkdGgiLCJvZmZzZXRXaWR0aCIsIm5ld1JlbGF0ZWRZIiwiaW5kZXgiLCJuZXdSZWxhdGVkWCIsIngxIiwieDIiLCJ0b29sdGlwTGVmdG1vc3RQb2ludCIsIl90b29sdGlwTGVmdG1vc3RQb2ludCIsImZ1bGxDaGFydFdpZHRoIiwidG9vbHRpcExvd2VyUG9pbnQiLCJyZWYiLCJ0b29sdGlwRGV0YWlsc0NvbnRhaW5lciIsInRvb2x0aXBEZXRhaWxzQ29udGFpbmVySGlkZGVuIiwibGVmdCIsInRvcCIsIlN0YW5kYXJkVG9vbHRpcENvbnRlbnQiLCJfcmVmMiIsInRvb2x0aXBEZWZhdWx0Q29udGFpbmVyIiwiZ2V0VGltZSIsInRvb2x0aXBEZWZhdWx0Q29udGFpbmVyUGFyYWdyYXBoIiwicHJvZ3Jlc3MiLCJzdHlsZXMkMyIsIlZlcnRpY2FsU2Nyb2xsIiwic2Nyb2xsIiwiZ2FudHRIZWlnaHQiLCJnYW50dEZ1bGxIZWlnaHQiLCJvblNjcm9sbCIsInNjcm9sbFJlZiIsInNjcm9sbFRvcCIsIm1hcmdpbkxlZnQiLCJ3aWR0aCIsIlRhc2tMaXN0Iiwic2VsZWN0ZWRUYXNrIiwic2V0U2VsZWN0ZWRUYXNrIiwidGFza0xpc3RSZWYiLCJob3Jpem9udGFsQ29udGFpbmVyQ2xhc3MiLCJUYXNrTGlzdEhlYWRlciIsIlRhc2tMaXN0VGFibGUiLCJob3Jpem9udGFsQ29udGFpbmVyUmVmIiwiaGVhZGVyUHJvcHMiLCJzZWxlY3RlZFRhc2tJZCIsInRhYmxlUHJvcHMiLCJzdHlsZXMkNCIsIkdyaWRCb2R5Iiwic3ZnV2lkdGgiLCJjb2x1bW5XaWR0aCIsInRvZGF5Q29sb3IiLCJ5IiwiZ3JpZFJvd3MiLCJyb3dMaW5lcyIsIngiLCJ5MSIsInkyIiwiZ3JpZFJvd0xpbmUiLCJncmlkUm93Iiwibm93IiwidGlja1giLCJ0aWNrcyIsInRvZGF5IiwiZ3JpZFRpY2siLCJmaWxsIiwiR3JpZCIsInByb3BzIiwic3R5bGVzJDUiLCJUb3BQYXJ0T2ZDYWxlbmRhciIsIngxTGluZSIsInkxTGluZSIsInkyTGluZSIsInhUZXh0IiwieVRleHQiLCJjYWxlbmRhclRvcFRpY2siLCJjYWxlbmRhclRvcFRleHQiLCJDYWxlbmRhciIsImRhdGVTZXR1cCIsImdldENhbGVuZGFyVmFsdWVzRm9yWWVhciIsInRvcFZhbHVlcyIsImJvdHRvbVZhbHVlcyIsInRvcERlZmF1bHRIZWlnaHQiLCJjYWxlbmRhckJvdHRvbVRleHQiLCJ0b3BWYWx1ZSIsImdldENhbGVuZGFyVmFsdWVzRm9yTW9udGgiLCJnZXRDYWxlbmRhclZhbHVlc0ZvcldlZWsiLCJ3ZWVrc0NvdW50IiwiZ2V0Q2FsZW5kYXJWYWx1ZXNGb3JEYXkiLCJnZXRDYWxlbmRhclZhbHVlc0ZvclBhcnRPZkRheSIsImhvdXIiLCJnZXRDYWxlbmRhclZhbHVlc0ZvckhvdXIiLCJkaXNwbGF5RGF0ZSIsInRvcFBvc2l0aW9uIiwiX2dldENhbGVuZGFyVmFsdWVzRm9yIiwiX2dldENhbGVuZGFyVmFsdWVzRm9yMiIsIl9nZXRDYWxlbmRhclZhbHVlc0ZvcjMiLCJfZ2V0Q2FsZW5kYXJWYWx1ZXNGb3I0IiwiX2dldENhbGVuZGFyVmFsdWVzRm9yNSIsIl9nZXRDYWxlbmRhclZhbHVlc0ZvcjYiLCJjYWxlbmRhckhlYWRlciIsIl9pdGVyYXRvclN5bWJvbCIsIl9hc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIl9jYXRjaCIsImJvZHkiLCJyZWNvdmVyIiwicmVzdWx0IiwiZSIsInRoZW4iLCJBcnJvdyIsInRhc2tGcm9tIiwidGFza1RvIiwidGFza0hlaWdodCIsInBhdGgiLCJ0cmlhbmdsZVBvaW50cyIsIl9kcm93blBhdGhBbmRUcmlhbmdsZSIsImRyb3duUGF0aEFuZFRyaWFuZ2xlUlRMIiwiX2Ryb3duUGF0aEFuZFRyaWFuZ2xlMiIsImRyb3duUGF0aEFuZFRyaWFuZ2xlIiwic3Ryb2tlV2lkdGgiLCJkIiwicG9pbnRzIiwiaW5kZXhDb21wYXJlIiwidGFza1RvRW5kUG9zaXRpb24iLCJ0YXNrRnJvbUVuZFBvc2l0aW9uIiwidGFza0Zyb21Ib3Jpem9udGFsT2Zmc2V0VmFsdWUiLCJ0YXNrVG9Ib3Jpem9udGFsT2Zmc2V0VmFsdWUiLCJjb252ZXJ0VG9CYXJUYXNrcyIsImJhckNvcm5lclJhZGl1cyIsImhhbmRsZVdpZHRoIiwiYmFyUHJvZ3Jlc3NDb2xvciIsImJhclByb2dyZXNzU2VsZWN0ZWRDb2xvciIsImJhckJhY2tncm91bmRDb2xvciIsImJhckJhY2tncm91bmRTZWxlY3RlZENvbG9yIiwicHJvamVjdFByb2dyZXNzQ29sb3IiLCJwcm9qZWN0UHJvZ3Jlc3NTZWxlY3RlZENvbG9yIiwicHJvamVjdEJhY2tncm91bmRDb2xvciIsInByb2plY3RCYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciIsIm1pbGVzdG9uZUJhY2tncm91bmRDb2xvciIsIm1pbGVzdG9uZUJhY2tncm91bmRTZWxlY3RlZENvbG9yIiwiYmFyVGFza3MiLCJjb252ZXJ0VG9CYXJUYXNrIiwiZGVwZW5kZW5jaWVzIiwiX2xvb3AiLCJqIiwiZGVwZW5kZW5jZSIsImZpbmRJbmRleCIsImJhckNoaWxkcmVuIiwiYmFyVGFzayIsInR5cGUiLCJjb252ZXJ0VG9NaWxlc3RvbmUiLCJjb252ZXJ0VG9CYXIiLCJ0YXNrWENvb3JkaW5hdGVSVEwiLCJ0YXNrWENvb3JkaW5hdGUiLCJ0eXBlSW50ZXJuYWwiLCJfcHJvZ3Jlc3NXaXRoQnlQYXJhbXMiLCJwcm9ncmVzc1dpdGhCeVBhcmFtcyIsInByb2dyZXNzV2lkdGgiLCJwcm9ncmVzc1giLCJ0YXNrWUNvb3JkaW5hdGUiLCJ1bmRlZmluZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kU2VsZWN0ZWRDb2xvciIsInByb2dyZXNzQ29sb3IiLCJwcm9ncmVzc1NlbGVjdGVkQ29sb3IiLCJyb3RhdGVkSGVpZ2h0IiwieERhdGUiLCJyZW1haW5kZXJNaWxsaXMiLCJwZXJjZW50T2ZJbnRlcnZhbCIsInRhc2tYMSIsInRhc2tYMiIsInByb2dyZXNzQnlYIiwiYmFyV2lkdGgiLCJwcm9ncmVzc1BlcmNlbnQiLCJyb3VuZCIsInByb2dyZXNzQnlYUlRMIiwiZ2V0UHJvZ3Jlc3NQb2ludCIsInRhc2tZIiwicG9pbnQiLCJqb2luIiwic3RhcnRCeVgiLCJ4U3RlcCIsInN0ZXBzIiwiYWRkaXRpb25hbFhWYWx1ZSIsIm5ld1giLCJlbmRCeVgiLCJtb3ZlQnlYIiwibmV3WDEiLCJuZXdYMiIsImRhdGVCeVgiLCJ0YXNrWCIsInRhc2tEYXRlIiwidGltZVN0ZXAiLCJnZXRUaW1lem9uZU9mZnNldCIsImhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnQiLCJzdmdYIiwiYWN0aW9uIiwiaW5pdEV2ZW50WDFEZWx0YSIsImhhbmRsZVRhc2tCeVNWR01vdXNlRXZlbnRGb3JNaWxlc3RvbmUiLCJoYW5kbGVUYXNrQnlTVkdNb3VzZUV2ZW50Rm9yQmFyIiwiY2hhbmdlZFRhc2siLCJpc0NoYW5nZWQiLCJfcHJvZ3Jlc3NXaXRoQnlQYXJhbXMyIiwiX3Byb2dyZXNzV2l0aEJ5UGFyYW1zMyIsIl9wcm9ncmVzc1dpZHRoIiwiX3Byb2dyZXNzWCIsIl9wcm9ncmVzc1dpdGhCeVBhcmFtczQiLCJfcHJvZ3Jlc3NXaWR0aDIiLCJfcHJvZ3Jlc3NYMiIsIl9tb3ZlQnlYIiwibmV3TW92ZVgxIiwibmV3TW92ZVgyIiwiX3Byb2dyZXNzV2l0aEJ5UGFyYW1zNSIsIl9wcm9ncmVzc1dpZHRoMyIsIl9wcm9ncmVzc1gzIiwiX21vdmVCeVgyIiwiaXNLZXlib2FyZEV2ZW50IiwiZXZlbnQiLCJyZW1vdmVIaWRkZW5UYXNrcyIsImdyb3VwZWRUYXNrcyIsImZpbHRlciIsImdyb3VwZWRUYXNrIiwiY2hpbGRyZW4iLCJnZXRDaGlsZHJlbiIsInRhc2tMaXN0IiwicHJvamVjdCIsInRhc2tDaGlsZHJlbiIsImZvckVhY2giLCJjb25jYXQiLCJzb3J0VGFza3MiLCJ0YXNrQSIsInRhc2tCIiwib3JkZXJBIiwiZGlzcGxheU9yZGVyIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwib3JkZXJCIiwic3R5bGVzJDYiLCJCYXJEaXNwbGF5IiwiaXNTZWxlY3RlZCIsIm9uTW91c2VEb3duIiwiZ2V0UHJvY2Vzc0NvbG9yIiwiZ2V0QmFyQ29sb3IiLCJyeSIsInJ4IiwiYmFyQmFja2dyb3VuZCIsIkJhckRhdGVIYW5kbGUiLCJiYXJIYW5kbGUiLCJCYXJQcm9ncmVzc0hhbmRsZSIsInByb2dyZXNzUG9pbnQiLCJCYXIiLCJpc1Byb2dyZXNzQ2hhbmdlYWJsZSIsImlzRGF0ZUNoYW5nZWFibGUiLCJvbkV2ZW50U3RhcnQiLCJoYW5kbGVIZWlnaHQiLCJiYXJXcmFwcGVyIiwidGFiSW5kZXgiLCJCYXJTbWFsbCIsInN0eWxlcyQ3IiwiTWlsZXN0b25lIiwidHJhbnNmb3JtIiwibWlsZXN0b25lV3JhcHBlciIsIm1pbGVzdG9uZUJhY2tncm91bmQiLCJzdHlsZXMkOCIsIlByb2plY3QiLCJiYXJDb2xvciIsInByb2Nlc3NDb2xvciIsInByb2plY3RXaXRoIiwicHJvamVjdExlZnRUcmlhbmdsZSIsInByb2plY3RSaWdodFRyaWFuZ2xlIiwicHJvamVjdFdyYXBwZXIiLCJwcm9qZWN0QmFja2dyb3VuZCIsInByb2plY3RUb3AiLCJUYXNrSXRlbSIsIl9wcm9wcyIsImlzRGVsZXRlIiwidGV4dFJlZiIsInRhc2tJdGVtIiwic2V0VGFza0l0ZW0iLCJpc1RleHRJbnNpZGUiLCJzZXRJc1RleHRJbnNpZGUiLCJnZXRCQm94IiwiZ2V0WCIsImhhc0NoaWxkIiwib25LZXlEb3duIiwic3RvcFByb3BhZ2F0aW9uIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwib25Eb3VibGVDbGljayIsIm9uRm9jdXMiLCJiYXJMYWJlbCIsImJhckxhYmVsT3V0c2lkZSIsIlRhc2tHYW50dENvbnRlbnQiLCJfc3ZnJGN1cnJlbnQiLCJnYW50dEV2ZW50Iiwic3ZnIiwiYXJyb3dDb2xvciIsInNldEdhbnR0RXZlbnQiLCJzZXRGYWlsZWRUYXNrIiwib25EYXRlQ2hhbmdlIiwib25Qcm9ncmVzc0NoYW5nZSIsIm9uRGVsZXRlIiwiY3JlYXRlU1ZHUG9pbnQiLCJzZXRYU3RlcCIsInNldEluaXRFdmVudFgxRGVsdGEiLCJfdXNlU3RhdGUzIiwiaXNNb3ZpbmciLCJzZXRJc01vdmluZyIsImRhdGVEZWx0YSIsIm5ld1hTdGVwIiwiaGFuZGxlTW91c2VNb3ZlIiwiX3N2ZyRjdXJyZW50JGdldFNjcmVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWVudFgiLCJjdXJzb3IiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwiX2hhbmRsZVRhc2tCeVNWR01vdXNlIiwicmVqZWN0IiwiaGFuZGxlTW91c2VVcCIsIl9zdmckY3VycmVudCRnZXRTY3JlZTIiLCJfdGVtcDYiLCJvcGVyYXRpb25TdWNjZXNzIiwib3JpZ2luYWxTZWxlY3RlZFRhc2siLCJfaGFuZGxlVGFza0J5U1ZHTW91c2UyIiwibmV3Q2hhbmdlZFRhc2siLCJpc05vdExpa2VPcmlnaW5hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfdGVtcDciLCJfdGVtcDgiLCJfdGVtcDkiLCJfdGVtcDEwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUJhckV2ZW50U3RhcnQiLCJfdGVtcDE0IiwiX3RlbXAxNSIsIl90ZW1wMTYiLCJlcnJvciIsImNvbnNvbGUiLCJfc3ZnJGN1cnJlbnQkZ2V0U2NyZWUzIiwic3Ryb2tlIiwiY2hpbGQiLCJpc0Rpc2FibGVkIiwic3R5bGVzJDkiLCJUYXNrR2FudHQiLCJncmlkUHJvcHMiLCJjYWxlbmRhclByb3BzIiwiYmFyUHJvcHMiLCJnYW50dFNWR1JlZiIsInZlcnRpY2FsR2FudHRDb250YWluZXJSZWYiLCJuZXdCYXJQcm9wcyIsInNjcm9sbExlZnQiLCJnYW50dFZlcnRpY2FsQ29udGFpbmVyIiwiZGlyIiwieG1sbnMiLCJob3Jpem9udGFsQ29udGFpbmVyIiwic3R5bGVzJGEiLCJIb3Jpem9udGFsU2Nyb2xsIiwibWFyZ2luIiwic2Nyb2xsV3JhcHBlciIsIkdhbnR0IiwiX3JlZiRoZWFkZXJIZWlnaHQiLCJfcmVmJGNvbHVtbldpZHRoIiwiX3JlZiRsaXN0Q2VsbFdpZHRoIiwibGlzdENlbGxXaWR0aCIsIl9yZWYkcm93SGVpZ2h0IiwiX3JlZiRnYW50dEhlaWdodCIsIl9yZWYkdmlld01vZGUiLCJfcmVmJHByZVN0ZXBzQ291bnQiLCJfcmVmJGxvY2FsZSIsIl9yZWYkYmFyRmlsbCIsImJhckZpbGwiLCJfcmVmJGJhckNvcm5lclJhZGl1cyIsIl9yZWYkYmFyUHJvZ3Jlc3NDb2xvciIsIl9yZWYkYmFyUHJvZ3Jlc3NTZWxlYyIsIl9yZWYkYmFyQmFja2dyb3VuZENvbCIsIl9yZWYkYmFyQmFja2dyb3VuZFNlbCIsIl9yZWYkcHJvamVjdFByb2dyZXNzQyIsIl9yZWYkcHJvamVjdFByb2dyZXNzUyIsIl9yZWYkcHJvamVjdEJhY2tncm91biIsIl9yZWYkcHJvamVjdEJhY2tncm91bjIiLCJfcmVmJG1pbGVzdG9uZUJhY2tncm8iLCJfcmVmJG1pbGVzdG9uZUJhY2tncm8yIiwiX3JlZiRydGwiLCJfcmVmJGhhbmRsZVdpZHRoIiwiX3JlZiR0aW1lU3RlcCIsIl9yZWYkYXJyb3dDb2xvciIsIl9yZWYkZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJfcmVmJGFycm93SW5kZW50IiwiX3JlZiR0b2RheUNvbG9yIiwidmlld0RhdGUiLCJfcmVmJFRvb2x0aXBDb250ZW50IiwiX3JlZiRUYXNrTGlzdEhlYWRlciIsIl9yZWYkVGFza0xpc3RUYWJsZSIsIm9uU2VsZWN0Iiwid3JhcHBlclJlZiIsIl9nYW50dERhdGVSYW5nZSIsInNldERhdGVTZXR1cCIsImN1cnJlbnRWaWV3RGF0ZSIsInNldEN1cnJlbnRWaWV3RGF0ZSIsInNldFRhc2tMaXN0V2lkdGgiLCJfdXNlU3RhdGU0Iiwic2V0U3ZnQ29udGFpbmVyV2lkdGgiLCJfdXNlU3RhdGU1Iiwic2V0U3ZnQ29udGFpbmVySGVpZ2h0IiwiX3VzZVN0YXRlNiIsInNldEJhclRhc2tzIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJfdXNlU3RhdGU5IiwiZmFpbGVkVGFzayIsIl91c2VTdGF0ZTEwIiwic2V0U2Nyb2xsWSIsIl91c2VTdGF0ZTExIiwic2V0U2Nyb2xsWCIsIl91c2VTdGF0ZTEyIiwiaWdub3JlU2Nyb2xsRXZlbnQiLCJzZXRJZ25vcmVTY3JvbGxFdmVudCIsImZpbHRlcmVkVGFza3MiLCJzb3J0IiwiX2dhbnR0RGF0ZVJhbmdlMiIsIm5ld0RhdGVzIiwicmV2ZXJzZSIsInByZXZTdGF0ZVRhc2siLCJmaW5kIiwibmV3VGFza0xpc3QiLCJfd3JhcHBlclJlZiRjdXJyZW50IiwiaGFuZGxlV2hlZWwiLCJzaGlmdEtleSIsImRlbHRhWCIsInNjcm9sbE1vdmUiLCJkZWx0YVkiLCJuZXdTY3JvbGxYIiwibmV3U2Nyb2xsWSIsInBhc3NpdmUiLCJfd3JhcHBlclJlZiRjdXJyZW50MiIsImhhbmRsZVNjcm9sbFkiLCJjdXJyZW50VGFyZ2V0IiwiaGFuZGxlU2Nyb2xsWCIsImhhbmRsZUtleURvd24iLCJpc1giLCJoYW5kbGVTZWxlY3RlZFRhc2siLCJ0YXNrSWQiLCJuZXdTZWxlY3RlZFRhc2siLCJvbGRTZWxlY3RlZFRhc2siLCJoYW5kbGVFeHBhbmRlckNsaWNrIiwid3JhcHBlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gantt-task-react/dist/index.modern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gantt-task-react/dist/index.css":
/*!******************************************************!*\
  !*** ./node_modules/gantt-task-react/dist/index.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"ac371838a449\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2FudHQtdGFzay1yZWFjdC9kaXN0L2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZC10by1qaXJhLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dhbnR0LXRhc2stcmVhY3QvZGlzdC9pbmRleC5jc3M/OTMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImFjMzcxODM4YTQ0OVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gantt-task-react/dist/index.css\n");

/***/ })

};
;